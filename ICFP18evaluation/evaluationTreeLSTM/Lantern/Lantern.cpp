
      #include <fcntl.h>
      #include <errno.h>
      #include <err.h>
      #include <sys/mman.h>
      #include <sys/stat.h>
      #include <sys/time.h>
      #include <stdio.h>
      #include <stdint.h>
      #include <unistd.h>
      #include <time.h>
      #include <functional>
      #include <memory>
      #include <math.h>
      #include <random>

      using namespace std;
      #ifndef MAP_FILE
      #define MAP_FILE MAP_SHARED
      #endif
      int fsize(int fd) {
        struct stat stat;
        int res = fstat(fd,&stat);
        return stat.st_size;
      }
      int printll(char* s) {
        while (*s != '\n' && *s != ',' && *s != '\t') {
          putchar(*s++);
        }
        return 0;
      }
      long hash(char *str0, int len)
      {
        unsigned char* str = (unsigned char*)str0;
        unsigned long hash = 5381;
        int c;

        while ((c = *str++) && len--)
          hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

        return hash;
      }
      int HEAP_SIZE = 1073741826; // 1048576;  //2147483652; //536870912; // 268435456; //2097152;
      void *mallocBase = malloc(HEAP_SIZE);
      void *mallocAddr = mallocBase;
      void *waterMark  = mallocBase;
      void* myMalloc(size_t bytes) {
        void* res = mallocAddr;
        mallocAddr += bytes;
        return res;
      }

      int timeval_subtract(struct timeval *result, struct timeval *t2, struct timeval *t1) {
        long int diff = (t2->tv_usec + 1000000 * t2->tv_sec) - (t1->tv_usec + 1000000 * t1->tv_sec);
        result->tv_sec = diff / 1000000;
        result->tv_usec = diff % 1000000;
        return (diff<0);
      }



      void Snippet(char*);

      std::random_device rd{};
      std::mt19937 gen{rd()};
      std::normal_distribution<> d{0,1};

      int main(int argc, char *argv[])
      {

        if (argc != 2) {
          printf("usage: query <filename>\n");
          return 0;
        }
        Snippet(argv[1]);
        return 0;
      }

      
/*****************************************
  Emitting C Generated Code                  
*******************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
void Snippet(char*  x0) {
double x1 = ((double)clock() / CLOCKS_PER_SEC);
int32_t* x2 = (int32_t*)myMalloc(1 * sizeof(int32_t));
int64_t x3 = (long)fopen("small_glove.txt", "r");
if (fscanf((FILE *)x3,"%d", &x2[0])!=1) perror("Error reading file");
int32_t x5 = x2[0];
float** x6 = (float**)myMalloc(x5 * sizeof(float*));
for(int x8=0; x8 < x5; x8++) {
float* x9 = (float*)myMalloc(300 * sizeof(float));
x6[x8] = x9;
for(int x12=0; x12 < 300; x12++) {
float* x13 = x6[x8];
if (fscanf((FILE *)x3,"%f", &x13[x12])!=1) perror("Error reading file");

}

}
fclose((FILE*)x3);
int32_t* x20 = (int32_t*)myMalloc(1 * sizeof(int32_t));
int64_t x21 = (long)fopen("array_tree.txt", "r");
if (fscanf((FILE *)x21,"%d", &x20[0])!=1) perror("Error reading file");
int32_t x23 = x20[0];
int32_t x24 = x23 * 4;
int** x25 = (int**)myMalloc(x24 * sizeof(int*));
int32_t* x26 = (int32_t*)myMalloc(1 * sizeof(int32_t));
for(int x28=0; x28 < x23; x28++) {
if (fscanf((FILE *)x21,"%d", &x26[0])!=1) perror("Error reading file");
int32_t x32 = x28 * 4;
for(int x31=0; x31 < 4; x31++) {
int32_t x34 = x26[0];
int32_t* x35 = (int32_t*)myMalloc(x34 * sizeof(int32_t));
int32_t x33 = x32 + x31;
x25[x33] = x35;
int32_t x37 = x26[0];
for(int x39=0; x39 < x37; x39++) {
int* x40 = x25[x33];
if (fscanf((FILE *)x21,"%d", &x40[x39])!=1) perror("Error reading file");

}

}

}
fclose((FILE*)x21);
float* x49 = (float*)myMalloc(45000 * sizeof(float));
for(int x51=0; x51 < 45000; x51++) {
float x52 = (float)rand()/RAND_MAX;
float x53 = x52 - 0.5f;
float x54 = x53 * 0.01f;
x49[x51] = x54;

}
float* x58 = (float*)myMalloc(150 * sizeof(float));
for(int x60=0; x60 < 150; x60++) {
x58[x60] = 0.0f;

}
float* x64 = (float*)myMalloc(45000 * sizeof(float));
for(int x65=0; x65 < 45000; x65++) {
float x66 = (float)rand()/RAND_MAX;
float x67 = x66 - 0.5f;
float x68 = x67 * 0.01f;
x64[x65] = x68;

}
float* x72 = (float*)myMalloc(150 * sizeof(float));
for(int x73=0; x73 < 150; x73++) {
x72[x73] = 0.0f;

}
float* x77 = (float*)myMalloc(45000 * sizeof(float));
for(int x78=0; x78 < 45000; x78++) {
float x79 = (float)rand()/RAND_MAX;
float x80 = x79 - 0.5f;
float x81 = x80 * 0.01f;
x77[x78] = x81;

}
float* x85 = (float*)myMalloc(150 * sizeof(float));
for(int x86=0; x86 < 150; x86++) {
x85[x86] = 0.0f;

}
float* x90 = (float*)myMalloc(22500 * sizeof(float));
for(int x92=0; x92 < 22500; x92++) {
float x93 = (float)rand()/RAND_MAX;
float x94 = x93 - 0.5f;
float x95 = x94 * 0.01f;
x90[x92] = x95;

}
float* x99 = (float*)myMalloc(22500 * sizeof(float));
for(int x100=0; x100 < 22500; x100++) {
float x101 = (float)rand()/RAND_MAX;
float x102 = x101 - 0.5f;
float x103 = x102 * 0.01f;
x99[x100] = x103;

}
float* x107 = (float*)myMalloc(150 * sizeof(float));
for(int x108=0; x108 < 150; x108++) {
x107[x108] = 0.0f;

}
float* x112 = (float*)myMalloc(22500 * sizeof(float));
for(int x113=0; x113 < 22500; x113++) {
float x114 = (float)rand()/RAND_MAX;
float x115 = x114 - 0.5f;
float x116 = x115 * 0.01f;
x112[x113] = x116;

}
float* x120 = (float*)myMalloc(22500 * sizeof(float));
for(int x121=0; x121 < 22500; x121++) {
float x122 = (float)rand()/RAND_MAX;
float x123 = x122 - 0.5f;
float x124 = x123 * 0.01f;
x120[x121] = x124;

}
float* x128 = (float*)myMalloc(22500 * sizeof(float));
for(int x129=0; x129 < 22500; x129++) {
float x130 = (float)rand()/RAND_MAX;
float x131 = x130 - 0.5f;
float x132 = x131 * 0.01f;
x128[x129] = x132;

}
float* x136 = (float*)myMalloc(22500 * sizeof(float));
for(int x137=0; x137 < 22500; x137++) {
float x138 = (float)rand()/RAND_MAX;
float x139 = x138 - 0.5f;
float x140 = x139 * 0.01f;
x136[x137] = x140;

}
float* x144 = (float*)myMalloc(150 * sizeof(float));
for(int x145=0; x145 < 150; x145++) {
x144[x145] = 0.0f;

}
float* x149 = (float*)myMalloc(22500 * sizeof(float));
for(int x150=0; x150 < 22500; x150++) {
float x151 = (float)rand()/RAND_MAX;
float x152 = x151 - 0.5f;
float x153 = x152 * 0.01f;
x149[x150] = x153;

}
float* x157 = (float*)myMalloc(22500 * sizeof(float));
for(int x158=0; x158 < 22500; x158++) {
float x159 = (float)rand()/RAND_MAX;
float x160 = x159 - 0.5f;
float x161 = x160 * 0.01f;
x157[x158] = x161;

}
float* x165 = (float*)myMalloc(150 * sizeof(float));
for(int x166=0; x166 < 150; x166++) {
x165[x166] = 0.0f;

}
float* x170 = (float*)myMalloc(22500 * sizeof(float));
for(int x171=0; x171 < 22500; x171++) {
float x172 = (float)rand()/RAND_MAX;
float x173 = x172 - 0.5f;
float x174 = x173 * 0.01f;
x170[x171] = x174;

}
float* x178 = (float*)myMalloc(22500 * sizeof(float));
for(int x179=0; x179 < 22500; x179++) {
float x180 = (float)rand()/RAND_MAX;
float x181 = x180 - 0.5f;
float x182 = x181 * 0.01f;
x178[x179] = x182;

}
float* x186 = (float*)myMalloc(150 * sizeof(float));
for(int x187=0; x187 < 150; x187++) {
x186[x187] = 0.0f;

}
float* x191 = (float*)myMalloc(750 * sizeof(float));
for(int x193=0; x193 < 750; x193++) {
float x194 = (float)rand()/RAND_MAX;
float x195 = x194 - 0.5f;
float x196 = x195 * 0.01f;
x191[x193] = x196;

}
float* x200 = (float*)myMalloc(5 * sizeof(float));
for(int x202=0; x202 < 5; x202++) {
x200[x202] = 0.0f;

}
float* x206 = (float*)myMalloc(45000 * sizeof(float));
for(int x207=0; x207 < 45000; x207++) {
x206[x207] = 0.0f;

}
float* x211 = (float*)myMalloc(150 * sizeof(float));
for(int x212=0; x212 < 150; x212++) {
x211[x212] = 0.0f;

}
float* x216 = (float*)myMalloc(45000 * sizeof(float));
for(int x217=0; x217 < 45000; x217++) {
x216[x217] = 0.0f;

}
float* x221 = (float*)myMalloc(150 * sizeof(float));
for(int x222=0; x222 < 150; x222++) {
x221[x222] = 0.0f;

}
float* x226 = (float*)myMalloc(45000 * sizeof(float));
for(int x227=0; x227 < 45000; x227++) {
x226[x227] = 0.0f;

}
float* x231 = (float*)myMalloc(150 * sizeof(float));
for(int x232=0; x232 < 150; x232++) {
x231[x232] = 0.0f;

}
float* x236 = (float*)myMalloc(22500 * sizeof(float));
for(int x237=0; x237 < 22500; x237++) {
x236[x237] = 0.0f;

}
float* x241 = (float*)myMalloc(22500 * sizeof(float));
for(int x242=0; x242 < 22500; x242++) {
x241[x242] = 0.0f;

}
float* x246 = (float*)myMalloc(150 * sizeof(float));
for(int x247=0; x247 < 150; x247++) {
x246[x247] = 0.0f;

}
float* x251 = (float*)myMalloc(22500 * sizeof(float));
for(int x252=0; x252 < 22500; x252++) {
x251[x252] = 0.0f;

}
float* x256 = (float*)myMalloc(22500 * sizeof(float));
for(int x257=0; x257 < 22500; x257++) {
x256[x257] = 0.0f;

}
float* x261 = (float*)myMalloc(22500 * sizeof(float));
for(int x262=0; x262 < 22500; x262++) {
x261[x262] = 0.0f;

}
float* x266 = (float*)myMalloc(22500 * sizeof(float));
for(int x267=0; x267 < 22500; x267++) {
x266[x267] = 0.0f;

}
float* x271 = (float*)myMalloc(150 * sizeof(float));
for(int x272=0; x272 < 150; x272++) {
x271[x272] = 0.0f;

}
float* x276 = (float*)myMalloc(22500 * sizeof(float));
for(int x277=0; x277 < 22500; x277++) {
x276[x277] = 0.0f;

}
float* x281 = (float*)myMalloc(22500 * sizeof(float));
for(int x282=0; x282 < 22500; x282++) {
x281[x282] = 0.0f;

}
float* x286 = (float*)myMalloc(150 * sizeof(float));
for(int x287=0; x287 < 150; x287++) {
x286[x287] = 0.0f;

}
float* x291 = (float*)myMalloc(22500 * sizeof(float));
for(int x292=0; x292 < 22500; x292++) {
x291[x292] = 0.0f;

}
float* x296 = (float*)myMalloc(22500 * sizeof(float));
for(int x297=0; x297 < 22500; x297++) {
x296[x297] = 0.0f;

}
float* x301 = (float*)myMalloc(150 * sizeof(float));
for(int x302=0; x302 < 150; x302++) {
x301[x302] = 0.0f;

}
float* x306 = (float*)myMalloc(750 * sizeof(float));
for(int x307=0; x307 < 750; x307++) {
x306[x307] = 0.0f;

}
float* x311 = (float*)myMalloc(5 * sizeof(float));
for(int x312=0; x312 < 5; x312++) {
x311[x312] = 0.0f;

}
float* x316 = (float*)myMalloc(300 * sizeof(float));
for(int x317=0; x317 < 300; x317++) {
x316[x317] = 0.0f;

}
float* x321 = (float*)myMalloc(300 * sizeof(float));
for(int x322=0; x322 < 300; x322++) {
x321[x322] = 0.0f;

}
float* x326 = (float*)myMalloc(150 * sizeof(float));
for(int x327=0; x327 < 150; x327++) {
x326[x327] = 0.0f;

}
float* x331 = (float*)myMalloc(150 * sizeof(float));
for(int x332=0; x332 < 150; x332++) {
x331[x332] = 0.0f;

}
float* x336 = (float*)myMalloc(45000 * sizeof(float));
for(int x337=0; x337 < 45000; x337++) {
x336[x337] = 0.0f;

}
float* x341 = (float*)myMalloc(150 * sizeof(float));
for(int x342=0; x342 < 150; x342++) {
x341[x342] = 0.0f;

}
float* x346 = (float*)myMalloc(45000 * sizeof(float));
for(int x347=0; x347 < 45000; x347++) {
x346[x347] = 0.0f;

}
float* x351 = (float*)myMalloc(150 * sizeof(float));
for(int x352=0; x352 < 150; x352++) {
x351[x352] = 0.0f;

}
float* x356 = (float*)myMalloc(45000 * sizeof(float));
for(int x357=0; x357 < 45000; x357++) {
x356[x357] = 0.0f;

}
float* x361 = (float*)myMalloc(150 * sizeof(float));
for(int x362=0; x362 < 150; x362++) {
x361[x362] = 0.0f;

}
float* x366 = (float*)myMalloc(22500 * sizeof(float));
for(int x367=0; x367 < 22500; x367++) {
x366[x367] = 0.0f;

}
float* x371 = (float*)myMalloc(22500 * sizeof(float));
for(int x372=0; x372 < 22500; x372++) {
x371[x372] = 0.0f;

}
float* x376 = (float*)myMalloc(150 * sizeof(float));
for(int x377=0; x377 < 150; x377++) {
x376[x377] = 0.0f;

}
float* x381 = (float*)myMalloc(22500 * sizeof(float));
for(int x382=0; x382 < 22500; x382++) {
x381[x382] = 0.0f;

}
float* x386 = (float*)myMalloc(22500 * sizeof(float));
for(int x387=0; x387 < 22500; x387++) {
x386[x387] = 0.0f;

}
float* x391 = (float*)myMalloc(22500 * sizeof(float));
for(int x392=0; x392 < 22500; x392++) {
x391[x392] = 0.0f;

}
float* x396 = (float*)myMalloc(22500 * sizeof(float));
for(int x397=0; x397 < 22500; x397++) {
x396[x397] = 0.0f;

}
float* x401 = (float*)myMalloc(150 * sizeof(float));
for(int x402=0; x402 < 150; x402++) {
x401[x402] = 0.0f;

}
float* x406 = (float*)myMalloc(22500 * sizeof(float));
for(int x407=0; x407 < 22500; x407++) {
x406[x407] = 0.0f;

}
float* x411 = (float*)myMalloc(22500 * sizeof(float));
for(int x412=0; x412 < 22500; x412++) {
x411[x412] = 0.0f;

}
float* x416 = (float*)myMalloc(150 * sizeof(float));
for(int x417=0; x417 < 150; x417++) {
x416[x417] = 0.0f;

}
float* x421 = (float*)myMalloc(22500 * sizeof(float));
for(int x422=0; x422 < 22500; x422++) {
x421[x422] = 0.0f;

}
float* x426 = (float*)myMalloc(22500 * sizeof(float));
for(int x427=0; x427 < 22500; x427++) {
x426[x427] = 0.0f;

}
float* x431 = (float*)myMalloc(150 * sizeof(float));
for(int x432=0; x432 < 150; x432++) {
x431[x432] = 0.0f;

}
float* x436 = (float*)myMalloc(750 * sizeof(float));
for(int x437=0; x437 < 750; x437++) {
x436[x437] = 0.0f;

}
float* x441 = (float*)myMalloc(5 * sizeof(float));
for(int x442=0; x442 < 5; x442++) {
x441[x442] = 0.0f;

}
double* x446 = (double*)myMalloc(30 * sizeof(double));
int64_t x447 = (long)mallocAddr;
double x448 = ((double)clock() / CLOCKS_PER_SEC);
for(int x450=0; x450 < 30; x450++) {
float x451 = 0.0f;
for(int x452=0; x452 < x23; x452++) {
int32_t x453 = x452 % x23;
int32_t x454 = x453 * 4;
int* x455 = x25[x454];
int32_t x456 = x454 + 1;
int* x457 = x25[x456];
int32_t x458 = x454 + 2;
int* x459 = x25[x458];
int32_t x460 = x454 + 3;
int* x461 = x25[x460];
function<void(int32_t,function<void(float**)>,float**)> x508 = [&](int32_t x509,function<void(float**)> x510,float** x511) {
float** x514 = x511;
float* x515 = x514[0];
float* x516 = x514[1];
float* x517 = x514[2];
float* x518 = x514[3];
float* x519 = x514[4];
float* x520 = x514[5];
int32_t x512 = x509;
bool x521 = x512 >= 0;
if (x521) {
int32_t x522 = x459[x512];
float** x2543 = (float**)myMalloc(6 * sizeof(float*));
x2543[0] = x515;
x2543[1] = x516;
x2543[2] = x517;
x2543[3] = x518;
x2543[4] = x519;
x2543[5] = x520;
function<void(float**)> x513 = x510;
function<void(float**)> x523 = [&](float** x524) {
float* x525 = x524[0];
float* x526 = x524[1];
float* x527 = x524[2];
float* x528 = x524[3];
float* x529 = x524[4];
float* x530 = x524[5];
int32_t x531 = x461[x512];
float** x2533 = (float**)myMalloc(6 * sizeof(float*));
x2533[0] = x515;
x2533[1] = x516;
x2533[2] = x517;
x2533[3] = x518;
x2533[4] = x519;
x2533[5] = x520;
function<void(float**)> x532 = [&](float** x533) {
float* x534 = x533[0];
float* x535 = x533[1];
float* x536 = x533[2];
float* x537 = x533[3];
float* x538 = x533[4];
float* x539 = x533[5];
float* x540 = (float*)myMalloc(5 * sizeof(float));
for(int x541=0; x541 < 5; x541++) {
x540[x541] = 0.0f;

}
int32_t x545 = x455[x512];
x540[x545] = 1.0f;
float* x547 = (float*)myMalloc(5 * sizeof(float));
for(int x548=0; x548 < 5; x548++) {
x547[x548] = 0.0f;

}
int32_t x552 = x459[x512];
bool x553 = x552 < 0;
if (x553) {
int32_t x2514 = x457[x512];
float* x2515 = x6[x2514];
float* x2516 = (float*)myMalloc(300 * sizeof(float));
for(int x2517=0; x2517 < 300; x2517++) {
x2516[x2517] = 0.0f;

}
float** x2521 = (float**)myMalloc(2 * sizeof(float*));
x2521[0] = x2515;
x2521[1] = x2516;
function<void(float**)> x554 = [&](float** x555) {
float* x556 = x555[0];
float* x557 = x555[1];
int32_t x558 = x459[x512];
bool x559 = x558 < 0;
if (x559) {
// dot List(150, 300) - WrappedArray(300)
int32_t x2195 = 0;
float* x2196 = (float*)myMalloc(150 * sizeof(float));
for(int x2197=0; x2197 < 150; x2197++) {
float x2198 = 0.0f;
for(int x2199=0; x2199 < 300; x2199++) {
int32_t x2200 = x2195;
float x2201 = x49[x2200];
float x2202 = x556[x2199];
float x2203 = x2201 * x2202;
x2198 += x2203;
x2195 += 1;

}
float x2208 = x2198;
x2196[x2197] = x2208;

}
float* x2212 = (float*)myMalloc(150 * sizeof(float));
for(int x2213=0; x2213 < 150; x2213++) {
x2212[x2213] = 0.0f;

}
float* x2217 = (float*)myMalloc(150 * sizeof(float));
for(int x2218=0; x2218 < 150; x2218++) {
float x2219 = x2196[x2218];
float x2220 = x58[x2218];
float x2221 = x2219 + x2220;
x2217[x2218] = x2221;

}
float* x2225 = (float*)myMalloc(150 * sizeof(float));
for(int x2226=0; x2226 < 150; x2226++) {
x2225[x2226] = 0.0f;

}
float* x2230 = (float*)myMalloc(150 * sizeof(float));
for(int x2231=0; x2231 < 150; x2231++) {
float x2232 = x2217[x2231];
float x2233 = -1.0f * x2232;
double x2234 = (double)x2233;
double x2235 = exp(x2234);
float x2236 = (float)x2235;
float x2237 = x2236 + 1.0f;
float x2238 = 1.0f / x2237;
x2230[x2231] = x2238;

}
float* x2242 = (float*)myMalloc(150 * sizeof(float));
for(int x2243=0; x2243 < 150; x2243++) {
x2242[x2243] = 0.0f;

}
float** x2247 = (float**)myMalloc(2 * sizeof(float*));
x2247[0] = x2230;
x2247[1] = x2242;
function<void(float**)> x560 = [&](float** x561) {
float* x562 = x561[0];
float* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
float** x1986 = (float**)myMalloc(2 * sizeof(float*));
x1986[0] = x326;
x1986[1] = x331;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1778 = (float**)myMalloc(2 * sizeof(float*));
x1778[0] = x326;
x1778[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1778);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1784 = 0;
float* x1785 = (float*)myMalloc(150 * sizeof(float));
for(int x1786=0; x1786 < 150; x1786++) {
float x1787 = 0.0f;
for(int x1788=0; x1788 < 150; x1788++) {
int32_t x1789 = x1784;
float x1790 = x128[x1789];
float x1791 = x527[x1788];
float x1792 = x1790 * x1791;
x1787 += x1792;
x1784 += 1;

}
float x1797 = x1787;
x1785[x1786] = x1797;

}
float* x1801 = (float*)myMalloc(150 * sizeof(float));
for(int x1802=0; x1802 < 150; x1802++) {
x1801[x1802] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1807 = 0;
float* x1808 = (float*)myMalloc(150 * sizeof(float));
for(int x1809=0; x1809 < 150; x1809++) {
float x1810 = 0.0f;
for(int x1811=0; x1811 < 150; x1811++) {
int32_t x1812 = x1807;
float x1813 = x136[x1812];
float x1814 = x536[x1811];
float x1815 = x1813 * x1814;
x1810 += x1815;
x1807 += 1;

}
float x1820 = x1810;
x1808[x1809] = x1820;

}
float* x1824 = (float*)myMalloc(150 * sizeof(float));
for(int x1825=0; x1825 < 150; x1825++) {
x1824[x1825] = 0.0f;

}
float* x1829 = (float*)myMalloc(150 * sizeof(float));
for(int x1830=0; x1830 < 150; x1830++) {
float x1831 = x1785[x1830];
float x1832 = x1808[x1830];
float x1833 = x1831 + x1832;
x1829[x1830] = x1833;

}
float* x1837 = (float*)myMalloc(150 * sizeof(float));
for(int x1838=0; x1838 < 150; x1838++) {
x1837[x1838] = 0.0f;

}
float* x1842 = (float*)myMalloc(150 * sizeof(float));
for(int x1843=0; x1843 < 150; x1843++) {
float x1844 = x1829[x1843];
float x1845 = x144[x1843];
float x1846 = x1844 + x1845;
x1842[x1843] = x1846;

}
float* x1850 = (float*)myMalloc(150 * sizeof(float));
for(int x1851=0; x1851 < 150; x1851++) {
x1850[x1851] = 0.0f;

}
float* x1855 = (float*)myMalloc(150 * sizeof(float));
for(int x1856=0; x1856 < 150; x1856++) {
float x1857 = x1842[x1856];
float x1858 = -1.0f * x1857;
double x1859 = (double)x1858;
double x1860 = exp(x1859);
float x1861 = (float)x1860;
float x1862 = x1861 + 1.0f;
float x1863 = 1.0f / x1862;
x1855[x1856] = x1863;

}
float* x1867 = (float*)myMalloc(150 * sizeof(float));
for(int x1868=0; x1868 < 150; x1868++) {
x1867[x1868] = 0.0f;

}
float** x1872 = (float**)myMalloc(2 * sizeof(float*));
x1872[0] = x1855;
x1872[1] = x1867;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1872);
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1850[x1876];
float x1878 = x1855[x1876];
float x1881 = x1867[x1876];
float x1879 = 1.0f - x1878;
float x1880 = x1879 * x1878;
float x1882 = x1880 * x1881;
float x1883 = x1877 + x1882;
x1850[x1876] = x1883;

}
// backpropagate +
for(int x1888=0; x1888 < 150; x1888++) {
float x1889 = x1837[x1888];
float x1890 = x1850[x1888];
float x1891 = x1889 + x1890;
x1837[x1888] = x1891;

}
for(int x1895=0; x1895 < 150; x1895++) {
float x1896 = x271[x1895];
float x1897 = x1850[x1895];
float x1898 = x1896 + x1897;
x271[x1895] = x1898;

}
// backpropagate +
for(int x1903=0; x1903 < 150; x1903++) {
float x1904 = x1801[x1903];
float x1905 = x1837[x1903];
float x1906 = x1904 + x1905;
x1801[x1903] = x1906;

}
for(int x1910=0; x1910 < 150; x1910++) {
float x1911 = x1824[x1910];
float x1912 = x1837[x1910];
float x1913 = x1911 + x1912;
x1824[x1910] = x1913;

}
// add_cartesian
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
int32_t x1921 = x1918;
int32_t x1922 = x1921 + x1920;
float x1923 = x266[x1922];
float x1924 = x536[x1920];
float x1925 = x1824[x1919];
float x1926 = x1924 * x1925;
float x1927 = x1923 + x1926;
x266[x1922] = x1927;

}
x1918 += 150;

}
int32_t x1934 = 0;
for(int x1935=0; x1935 < 150; x1935++) {
for(int x1936=0; x1936 < 150; x1936++) {
float x1937 = x537[x1936];
int32_t x1938 = x1934;
int32_t x1939 = x1938 + x1936;
float x1940 = x136[x1939];
float x1941 = x1824[x1935];
float x1942 = x1940 * x1941;
float x1943 = x1937 + x1942;
x537[x1936] = x1943;

}
x1934 += 150;

}
// add_cartesian
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
int32_t x1954 = x1951;
int32_t x1955 = x1954 + x1953;
float x1956 = x261[x1955];
float x1957 = x527[x1953];
float x1958 = x1801[x1952];
float x1959 = x1957 * x1958;
float x1960 = x1956 + x1959;
x261[x1955] = x1960;

}
x1951 += 150;

}
int32_t x1967 = 0;
for(int x1968=0; x1968 < 150; x1968++) {
for(int x1969=0; x1969 < 150; x1969++) {
float x1970 = x528[x1969];
int32_t x1971 = x1967;
int32_t x1972 = x1971 + x1969;
float x1973 = x128[x1972];
float x1974 = x1801[x1968];
float x1975 = x1973 * x1974;
float x1976 = x1970 + x1975;
x528[x1969] = x1976;

}
x1967 += 150;

}
}
};
x566(x1986);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1992 = 0;
float* x1993 = (float*)myMalloc(150 * sizeof(float));
for(int x1994=0; x1994 < 150; x1994++) {
float x1995 = 0.0f;
for(int x1996=0; x1996 < 150; x1996++) {
int32_t x1997 = x1992;
float x1998 = x112[x1997];
float x1999 = x527[x1996];
float x2000 = x1998 * x1999;
x1995 += x2000;
x1992 += 1;

}
float x2005 = x1995;
x1993[x1994] = x2005;

}
float* x2009 = (float*)myMalloc(150 * sizeof(float));
for(int x2010=0; x2010 < 150; x2010++) {
x2009[x2010] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2015 = 0;
float* x2016 = (float*)myMalloc(150 * sizeof(float));
for(int x2017=0; x2017 < 150; x2017++) {
float x2018 = 0.0f;
for(int x2019=0; x2019 < 150; x2019++) {
int32_t x2020 = x2015;
float x2021 = x120[x2020];
float x2022 = x536[x2019];
float x2023 = x2021 * x2022;
x2018 += x2023;
x2015 += 1;

}
float x2028 = x2018;
x2016[x2017] = x2028;

}
float* x2032 = (float*)myMalloc(150 * sizeof(float));
for(int x2033=0; x2033 < 150; x2033++) {
x2032[x2033] = 0.0f;

}
float* x2037 = (float*)myMalloc(150 * sizeof(float));
for(int x2038=0; x2038 < 150; x2038++) {
float x2039 = x1993[x2038];
float x2040 = x2016[x2038];
float x2041 = x2039 + x2040;
x2037[x2038] = x2041;

}
float* x2045 = (float*)myMalloc(150 * sizeof(float));
for(int x2046=0; x2046 < 150; x2046++) {
x2045[x2046] = 0.0f;

}
float* x2050 = (float*)myMalloc(150 * sizeof(float));
for(int x2051=0; x2051 < 150; x2051++) {
float x2052 = x2037[x2051];
float x2053 = x144[x2051];
float x2054 = x2052 + x2053;
x2050[x2051] = x2054;

}
float* x2058 = (float*)myMalloc(150 * sizeof(float));
for(int x2059=0; x2059 < 150; x2059++) {
x2058[x2059] = 0.0f;

}
float* x2063 = (float*)myMalloc(150 * sizeof(float));
for(int x2064=0; x2064 < 150; x2064++) {
float x2065 = x2050[x2064];
float x2066 = -1.0f * x2065;
double x2067 = (double)x2066;
double x2068 = exp(x2067);
float x2069 = (float)x2068;
float x2070 = x2069 + 1.0f;
float x2071 = 1.0f / x2070;
x2063[x2064] = x2071;

}
float* x2075 = (float*)myMalloc(150 * sizeof(float));
for(int x2076=0; x2076 < 150; x2076++) {
x2075[x2076] = 0.0f;

}
float** x2080 = (float**)myMalloc(2 * sizeof(float*));
x2080[0] = x2063;
x2080[1] = x2075;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1778 = (float**)myMalloc(2 * sizeof(float*));
x1778[0] = x326;
x1778[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1778);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1784 = 0;
float* x1785 = (float*)myMalloc(150 * sizeof(float));
for(int x1786=0; x1786 < 150; x1786++) {
float x1787 = 0.0f;
for(int x1788=0; x1788 < 150; x1788++) {
int32_t x1789 = x1784;
float x1790 = x128[x1789];
float x1791 = x527[x1788];
float x1792 = x1790 * x1791;
x1787 += x1792;
x1784 += 1;

}
float x1797 = x1787;
x1785[x1786] = x1797;

}
float* x1801 = (float*)myMalloc(150 * sizeof(float));
for(int x1802=0; x1802 < 150; x1802++) {
x1801[x1802] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1807 = 0;
float* x1808 = (float*)myMalloc(150 * sizeof(float));
for(int x1809=0; x1809 < 150; x1809++) {
float x1810 = 0.0f;
for(int x1811=0; x1811 < 150; x1811++) {
int32_t x1812 = x1807;
float x1813 = x136[x1812];
float x1814 = x536[x1811];
float x1815 = x1813 * x1814;
x1810 += x1815;
x1807 += 1;

}
float x1820 = x1810;
x1808[x1809] = x1820;

}
float* x1824 = (float*)myMalloc(150 * sizeof(float));
for(int x1825=0; x1825 < 150; x1825++) {
x1824[x1825] = 0.0f;

}
float* x1829 = (float*)myMalloc(150 * sizeof(float));
for(int x1830=0; x1830 < 150; x1830++) {
float x1831 = x1785[x1830];
float x1832 = x1808[x1830];
float x1833 = x1831 + x1832;
x1829[x1830] = x1833;

}
float* x1837 = (float*)myMalloc(150 * sizeof(float));
for(int x1838=0; x1838 < 150; x1838++) {
x1837[x1838] = 0.0f;

}
float* x1842 = (float*)myMalloc(150 * sizeof(float));
for(int x1843=0; x1843 < 150; x1843++) {
float x1844 = x1829[x1843];
float x1845 = x144[x1843];
float x1846 = x1844 + x1845;
x1842[x1843] = x1846;

}
float* x1850 = (float*)myMalloc(150 * sizeof(float));
for(int x1851=0; x1851 < 150; x1851++) {
x1850[x1851] = 0.0f;

}
float* x1855 = (float*)myMalloc(150 * sizeof(float));
for(int x1856=0; x1856 < 150; x1856++) {
float x1857 = x1842[x1856];
float x1858 = -1.0f * x1857;
double x1859 = (double)x1858;
double x1860 = exp(x1859);
float x1861 = (float)x1860;
float x1862 = x1861 + 1.0f;
float x1863 = 1.0f / x1862;
x1855[x1856] = x1863;

}
float* x1867 = (float*)myMalloc(150 * sizeof(float));
for(int x1868=0; x1868 < 150; x1868++) {
x1867[x1868] = 0.0f;

}
float** x1872 = (float**)myMalloc(2 * sizeof(float*));
x1872[0] = x1855;
x1872[1] = x1867;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1872);
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1850[x1876];
float x1878 = x1855[x1876];
float x1881 = x1867[x1876];
float x1879 = 1.0f - x1878;
float x1880 = x1879 * x1878;
float x1882 = x1880 * x1881;
float x1883 = x1877 + x1882;
x1850[x1876] = x1883;

}
// backpropagate +
for(int x1888=0; x1888 < 150; x1888++) {
float x1889 = x1837[x1888];
float x1890 = x1850[x1888];
float x1891 = x1889 + x1890;
x1837[x1888] = x1891;

}
for(int x1895=0; x1895 < 150; x1895++) {
float x1896 = x271[x1895];
float x1897 = x1850[x1895];
float x1898 = x1896 + x1897;
x271[x1895] = x1898;

}
// backpropagate +
for(int x1903=0; x1903 < 150; x1903++) {
float x1904 = x1801[x1903];
float x1905 = x1837[x1903];
float x1906 = x1904 + x1905;
x1801[x1903] = x1906;

}
for(int x1910=0; x1910 < 150; x1910++) {
float x1911 = x1824[x1910];
float x1912 = x1837[x1910];
float x1913 = x1911 + x1912;
x1824[x1910] = x1913;

}
// add_cartesian
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
int32_t x1921 = x1918;
int32_t x1922 = x1921 + x1920;
float x1923 = x266[x1922];
float x1924 = x536[x1920];
float x1925 = x1824[x1919];
float x1926 = x1924 * x1925;
float x1927 = x1923 + x1926;
x266[x1922] = x1927;

}
x1918 += 150;

}
int32_t x1934 = 0;
for(int x1935=0; x1935 < 150; x1935++) {
for(int x1936=0; x1936 < 150; x1936++) {
float x1937 = x537[x1936];
int32_t x1938 = x1934;
int32_t x1939 = x1938 + x1936;
float x1940 = x136[x1939];
float x1941 = x1824[x1935];
float x1942 = x1940 * x1941;
float x1943 = x1937 + x1942;
x537[x1936] = x1943;

}
x1934 += 150;

}
// add_cartesian
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
int32_t x1954 = x1951;
int32_t x1955 = x1954 + x1953;
float x1956 = x261[x1955];
float x1957 = x527[x1953];
float x1958 = x1801[x1952];
float x1959 = x1957 * x1958;
float x1960 = x1956 + x1959;
x261[x1955] = x1960;

}
x1951 += 150;

}
int32_t x1967 = 0;
for(int x1968=0; x1968 < 150; x1968++) {
for(int x1969=0; x1969 < 150; x1969++) {
float x1970 = x528[x1969];
int32_t x1971 = x1967;
int32_t x1972 = x1971 + x1969;
float x1973 = x128[x1972];
float x1974 = x1801[x1968];
float x1975 = x1973 * x1974;
float x1976 = x1970 + x1975;
x528[x1969] = x1976;

}
x1967 += 150;

}
}
};
x566(x2080);
for(int x2084=0; x2084 < 150; x2084++) {
float x2085 = x2058[x2084];
float x2086 = x2063[x2084];
float x2089 = x2075[x2084];
float x2087 = 1.0f - x2086;
float x2088 = x2087 * x2086;
float x2090 = x2088 * x2089;
float x2091 = x2085 + x2090;
x2058[x2084] = x2091;

}
// backpropagate +
for(int x2096=0; x2096 < 150; x2096++) {
float x2097 = x2045[x2096];
float x2098 = x2058[x2096];
float x2099 = x2097 + x2098;
x2045[x2096] = x2099;

}
for(int x2103=0; x2103 < 150; x2103++) {
float x2104 = x271[x2103];
float x2105 = x2058[x2103];
float x2106 = x2104 + x2105;
x271[x2103] = x2106;

}
// backpropagate +
for(int x2111=0; x2111 < 150; x2111++) {
float x2112 = x2009[x2111];
float x2113 = x2045[x2111];
float x2114 = x2112 + x2113;
x2009[x2111] = x2114;

}
for(int x2118=0; x2118 < 150; x2118++) {
float x2119 = x2032[x2118];
float x2120 = x2045[x2118];
float x2121 = x2119 + x2120;
x2032[x2118] = x2121;

}
// add_cartesian
int32_t x2126 = 0;
for(int x2127=0; x2127 < 150; x2127++) {
for(int x2128=0; x2128 < 150; x2128++) {
int32_t x2129 = x2126;
int32_t x2130 = x2129 + x2128;
float x2131 = x256[x2130];
float x2132 = x536[x2128];
float x2133 = x2032[x2127];
float x2134 = x2132 * x2133;
float x2135 = x2131 + x2134;
x256[x2130] = x2135;

}
x2126 += 150;

}
int32_t x2142 = 0;
for(int x2143=0; x2143 < 150; x2143++) {
for(int x2144=0; x2144 < 150; x2144++) {
float x2145 = x537[x2144];
int32_t x2146 = x2142;
int32_t x2147 = x2146 + x2144;
float x2148 = x120[x2147];
float x2149 = x2032[x2143];
float x2150 = x2148 * x2149;
float x2151 = x2145 + x2150;
x537[x2144] = x2151;

}
x2142 += 150;

}
// add_cartesian
int32_t x2159 = 0;
for(int x2160=0; x2160 < 150; x2160++) {
for(int x2161=0; x2161 < 150; x2161++) {
int32_t x2162 = x2159;
int32_t x2163 = x2162 + x2161;
float x2164 = x251[x2163];
float x2165 = x527[x2161];
float x2166 = x2009[x2160];
float x2167 = x2165 * x2166;
float x2168 = x2164 + x2167;
x251[x2163] = x2168;

}
x2159 += 150;

}
int32_t x2175 = 0;
for(int x2176=0; x2176 < 150; x2176++) {
for(int x2177=0; x2177 < 150; x2177++) {
float x2178 = x528[x2177];
int32_t x2179 = x2175;
int32_t x2180 = x2179 + x2177;
float x2181 = x112[x2180];
float x2182 = x2009[x2176];
float x2183 = x2181 * x2182;
float x2184 = x2178 + x2183;
x528[x2177] = x2184;

}
x2175 += 150;

}
}
};
x560(x2247);
for(int x2251=0; x2251 < 150; x2251++) {
float x2252 = x2225[x2251];
float x2253 = x2230[x2251];
float x2256 = x2242[x2251];
float x2254 = 1.0f - x2253;
float x2255 = x2254 * x2253;
float x2257 = x2255 * x2256;
float x2258 = x2252 + x2257;
x2225[x2251] = x2258;

}
// backpropagate +
for(int x2263=0; x2263 < 150; x2263++) {
float x2264 = x2212[x2263];
float x2265 = x2225[x2263];
float x2266 = x2264 + x2265;
x2212[x2263] = x2266;

}
for(int x2270=0; x2270 < 150; x2270++) {
float x2271 = x211[x2270];
float x2272 = x2225[x2270];
float x2273 = x2271 + x2272;
x211[x2270] = x2273;

}
// add_cartesian
int32_t x2278 = 0;
for(int x2279=0; x2279 < 150; x2279++) {
for(int x2280=0; x2280 < 300; x2280++) {
int32_t x2281 = x2278;
int32_t x2282 = x2281 + x2280;
float x2283 = x206[x2282];
float x2284 = x556[x2280];
float x2285 = x2212[x2279];
float x2286 = x2284 * x2285;
float x2287 = x2283 + x2286;
x206[x2282] = x2287;

}
x2278 += 300;

}
int32_t x2294 = 0;
for(int x2295=0; x2295 < 150; x2295++) {
for(int x2296=0; x2296 < 300; x2296++) {
float x2297 = x557[x2296];
int32_t x2298 = x2294;
int32_t x2299 = x2298 + x2296;
float x2300 = x49[x2299];
float x2301 = x2212[x2295];
float x2302 = x2300 * x2301;
float x2303 = x2297 + x2302;
x557[x2296] = x2303;

}
x2294 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2312 = 0;
float* x2313 = (float*)myMalloc(150 * sizeof(float));
for(int x2314=0; x2314 < 150; x2314++) {
float x2315 = 0.0f;
for(int x2316=0; x2316 < 150; x2316++) {
int32_t x2317 = x2312;
float x2318 = x90[x2317];
float x2319 = x527[x2316];
float x2320 = x2318 * x2319;
x2315 += x2320;
x2312 += 1;

}
float x2325 = x2315;
x2313[x2314] = x2325;

}
float* x2329 = (float*)myMalloc(150 * sizeof(float));
for(int x2330=0; x2330 < 150; x2330++) {
x2329[x2330] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2335 = 0;
float* x2336 = (float*)myMalloc(150 * sizeof(float));
for(int x2337=0; x2337 < 150; x2337++) {
float x2338 = 0.0f;
for(int x2339=0; x2339 < 150; x2339++) {
int32_t x2340 = x2335;
float x2341 = x99[x2340];
float x2342 = x536[x2339];
float x2343 = x2341 * x2342;
x2338 += x2343;
x2335 += 1;

}
float x2348 = x2338;
x2336[x2337] = x2348;

}
float* x2352 = (float*)myMalloc(150 * sizeof(float));
for(int x2353=0; x2353 < 150; x2353++) {
x2352[x2353] = 0.0f;

}
float* x2357 = (float*)myMalloc(150 * sizeof(float));
for(int x2358=0; x2358 < 150; x2358++) {
float x2359 = x2313[x2358];
float x2360 = x2336[x2358];
float x2361 = x2359 + x2360;
x2357[x2358] = x2361;

}
float* x2365 = (float*)myMalloc(150 * sizeof(float));
for(int x2366=0; x2366 < 150; x2366++) {
x2365[x2366] = 0.0f;

}
float* x2370 = (float*)myMalloc(150 * sizeof(float));
for(int x2371=0; x2371 < 150; x2371++) {
float x2372 = x2357[x2371];
float x2373 = x107[x2371];
float x2374 = x2372 + x2373;
x2370[x2371] = x2374;

}
float* x2378 = (float*)myMalloc(150 * sizeof(float));
for(int x2379=0; x2379 < 150; x2379++) {
x2378[x2379] = 0.0f;

}
float* x2383 = (float*)myMalloc(150 * sizeof(float));
for(int x2384=0; x2384 < 150; x2384++) {
float x2385 = x2370[x2384];
float x2386 = -1.0f * x2385;
double x2387 = (double)x2386;
double x2388 = exp(x2387);
float x2389 = (float)x2388;
float x2390 = x2389 + 1.0f;
float x2391 = 1.0f / x2390;
x2383[x2384] = x2391;

}
float* x2395 = (float*)myMalloc(150 * sizeof(float));
for(int x2396=0; x2396 < 150; x2396++) {
x2395[x2396] = 0.0f;

}
float** x2400 = (float**)myMalloc(2 * sizeof(float*));
x2400[0] = x2383;
x2400[1] = x2395;
function<void(float**)> x560 = [&](float** x561) {
float* x562 = x561[0];
float* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
float** x1986 = (float**)myMalloc(2 * sizeof(float*));
x1986[0] = x326;
x1986[1] = x331;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1778 = (float**)myMalloc(2 * sizeof(float*));
x1778[0] = x326;
x1778[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1778);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1784 = 0;
float* x1785 = (float*)myMalloc(150 * sizeof(float));
for(int x1786=0; x1786 < 150; x1786++) {
float x1787 = 0.0f;
for(int x1788=0; x1788 < 150; x1788++) {
int32_t x1789 = x1784;
float x1790 = x128[x1789];
float x1791 = x527[x1788];
float x1792 = x1790 * x1791;
x1787 += x1792;
x1784 += 1;

}
float x1797 = x1787;
x1785[x1786] = x1797;

}
float* x1801 = (float*)myMalloc(150 * sizeof(float));
for(int x1802=0; x1802 < 150; x1802++) {
x1801[x1802] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1807 = 0;
float* x1808 = (float*)myMalloc(150 * sizeof(float));
for(int x1809=0; x1809 < 150; x1809++) {
float x1810 = 0.0f;
for(int x1811=0; x1811 < 150; x1811++) {
int32_t x1812 = x1807;
float x1813 = x136[x1812];
float x1814 = x536[x1811];
float x1815 = x1813 * x1814;
x1810 += x1815;
x1807 += 1;

}
float x1820 = x1810;
x1808[x1809] = x1820;

}
float* x1824 = (float*)myMalloc(150 * sizeof(float));
for(int x1825=0; x1825 < 150; x1825++) {
x1824[x1825] = 0.0f;

}
float* x1829 = (float*)myMalloc(150 * sizeof(float));
for(int x1830=0; x1830 < 150; x1830++) {
float x1831 = x1785[x1830];
float x1832 = x1808[x1830];
float x1833 = x1831 + x1832;
x1829[x1830] = x1833;

}
float* x1837 = (float*)myMalloc(150 * sizeof(float));
for(int x1838=0; x1838 < 150; x1838++) {
x1837[x1838] = 0.0f;

}
float* x1842 = (float*)myMalloc(150 * sizeof(float));
for(int x1843=0; x1843 < 150; x1843++) {
float x1844 = x1829[x1843];
float x1845 = x144[x1843];
float x1846 = x1844 + x1845;
x1842[x1843] = x1846;

}
float* x1850 = (float*)myMalloc(150 * sizeof(float));
for(int x1851=0; x1851 < 150; x1851++) {
x1850[x1851] = 0.0f;

}
float* x1855 = (float*)myMalloc(150 * sizeof(float));
for(int x1856=0; x1856 < 150; x1856++) {
float x1857 = x1842[x1856];
float x1858 = -1.0f * x1857;
double x1859 = (double)x1858;
double x1860 = exp(x1859);
float x1861 = (float)x1860;
float x1862 = x1861 + 1.0f;
float x1863 = 1.0f / x1862;
x1855[x1856] = x1863;

}
float* x1867 = (float*)myMalloc(150 * sizeof(float));
for(int x1868=0; x1868 < 150; x1868++) {
x1867[x1868] = 0.0f;

}
float** x1872 = (float**)myMalloc(2 * sizeof(float*));
x1872[0] = x1855;
x1872[1] = x1867;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1872);
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1850[x1876];
float x1878 = x1855[x1876];
float x1881 = x1867[x1876];
float x1879 = 1.0f - x1878;
float x1880 = x1879 * x1878;
float x1882 = x1880 * x1881;
float x1883 = x1877 + x1882;
x1850[x1876] = x1883;

}
// backpropagate +
for(int x1888=0; x1888 < 150; x1888++) {
float x1889 = x1837[x1888];
float x1890 = x1850[x1888];
float x1891 = x1889 + x1890;
x1837[x1888] = x1891;

}
for(int x1895=0; x1895 < 150; x1895++) {
float x1896 = x271[x1895];
float x1897 = x1850[x1895];
float x1898 = x1896 + x1897;
x271[x1895] = x1898;

}
// backpropagate +
for(int x1903=0; x1903 < 150; x1903++) {
float x1904 = x1801[x1903];
float x1905 = x1837[x1903];
float x1906 = x1904 + x1905;
x1801[x1903] = x1906;

}
for(int x1910=0; x1910 < 150; x1910++) {
float x1911 = x1824[x1910];
float x1912 = x1837[x1910];
float x1913 = x1911 + x1912;
x1824[x1910] = x1913;

}
// add_cartesian
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
int32_t x1921 = x1918;
int32_t x1922 = x1921 + x1920;
float x1923 = x266[x1922];
float x1924 = x536[x1920];
float x1925 = x1824[x1919];
float x1926 = x1924 * x1925;
float x1927 = x1923 + x1926;
x266[x1922] = x1927;

}
x1918 += 150;

}
int32_t x1934 = 0;
for(int x1935=0; x1935 < 150; x1935++) {
for(int x1936=0; x1936 < 150; x1936++) {
float x1937 = x537[x1936];
int32_t x1938 = x1934;
int32_t x1939 = x1938 + x1936;
float x1940 = x136[x1939];
float x1941 = x1824[x1935];
float x1942 = x1940 * x1941;
float x1943 = x1937 + x1942;
x537[x1936] = x1943;

}
x1934 += 150;

}
// add_cartesian
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
int32_t x1954 = x1951;
int32_t x1955 = x1954 + x1953;
float x1956 = x261[x1955];
float x1957 = x527[x1953];
float x1958 = x1801[x1952];
float x1959 = x1957 * x1958;
float x1960 = x1956 + x1959;
x261[x1955] = x1960;

}
x1951 += 150;

}
int32_t x1967 = 0;
for(int x1968=0; x1968 < 150; x1968++) {
for(int x1969=0; x1969 < 150; x1969++) {
float x1970 = x528[x1969];
int32_t x1971 = x1967;
int32_t x1972 = x1971 + x1969;
float x1973 = x128[x1972];
float x1974 = x1801[x1968];
float x1975 = x1973 * x1974;
float x1976 = x1970 + x1975;
x528[x1969] = x1976;

}
x1967 += 150;

}
}
};
x566(x1986);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1992 = 0;
float* x1993 = (float*)myMalloc(150 * sizeof(float));
for(int x1994=0; x1994 < 150; x1994++) {
float x1995 = 0.0f;
for(int x1996=0; x1996 < 150; x1996++) {
int32_t x1997 = x1992;
float x1998 = x112[x1997];
float x1999 = x527[x1996];
float x2000 = x1998 * x1999;
x1995 += x2000;
x1992 += 1;

}
float x2005 = x1995;
x1993[x1994] = x2005;

}
float* x2009 = (float*)myMalloc(150 * sizeof(float));
for(int x2010=0; x2010 < 150; x2010++) {
x2009[x2010] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2015 = 0;
float* x2016 = (float*)myMalloc(150 * sizeof(float));
for(int x2017=0; x2017 < 150; x2017++) {
float x2018 = 0.0f;
for(int x2019=0; x2019 < 150; x2019++) {
int32_t x2020 = x2015;
float x2021 = x120[x2020];
float x2022 = x536[x2019];
float x2023 = x2021 * x2022;
x2018 += x2023;
x2015 += 1;

}
float x2028 = x2018;
x2016[x2017] = x2028;

}
float* x2032 = (float*)myMalloc(150 * sizeof(float));
for(int x2033=0; x2033 < 150; x2033++) {
x2032[x2033] = 0.0f;

}
float* x2037 = (float*)myMalloc(150 * sizeof(float));
for(int x2038=0; x2038 < 150; x2038++) {
float x2039 = x1993[x2038];
float x2040 = x2016[x2038];
float x2041 = x2039 + x2040;
x2037[x2038] = x2041;

}
float* x2045 = (float*)myMalloc(150 * sizeof(float));
for(int x2046=0; x2046 < 150; x2046++) {
x2045[x2046] = 0.0f;

}
float* x2050 = (float*)myMalloc(150 * sizeof(float));
for(int x2051=0; x2051 < 150; x2051++) {
float x2052 = x2037[x2051];
float x2053 = x144[x2051];
float x2054 = x2052 + x2053;
x2050[x2051] = x2054;

}
float* x2058 = (float*)myMalloc(150 * sizeof(float));
for(int x2059=0; x2059 < 150; x2059++) {
x2058[x2059] = 0.0f;

}
float* x2063 = (float*)myMalloc(150 * sizeof(float));
for(int x2064=0; x2064 < 150; x2064++) {
float x2065 = x2050[x2064];
float x2066 = -1.0f * x2065;
double x2067 = (double)x2066;
double x2068 = exp(x2067);
float x2069 = (float)x2068;
float x2070 = x2069 + 1.0f;
float x2071 = 1.0f / x2070;
x2063[x2064] = x2071;

}
float* x2075 = (float*)myMalloc(150 * sizeof(float));
for(int x2076=0; x2076 < 150; x2076++) {
x2075[x2076] = 0.0f;

}
float** x2080 = (float**)myMalloc(2 * sizeof(float*));
x2080[0] = x2063;
x2080[1] = x2075;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1778 = (float**)myMalloc(2 * sizeof(float*));
x1778[0] = x326;
x1778[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1778);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1784 = 0;
float* x1785 = (float*)myMalloc(150 * sizeof(float));
for(int x1786=0; x1786 < 150; x1786++) {
float x1787 = 0.0f;
for(int x1788=0; x1788 < 150; x1788++) {
int32_t x1789 = x1784;
float x1790 = x128[x1789];
float x1791 = x527[x1788];
float x1792 = x1790 * x1791;
x1787 += x1792;
x1784 += 1;

}
float x1797 = x1787;
x1785[x1786] = x1797;

}
float* x1801 = (float*)myMalloc(150 * sizeof(float));
for(int x1802=0; x1802 < 150; x1802++) {
x1801[x1802] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1807 = 0;
float* x1808 = (float*)myMalloc(150 * sizeof(float));
for(int x1809=0; x1809 < 150; x1809++) {
float x1810 = 0.0f;
for(int x1811=0; x1811 < 150; x1811++) {
int32_t x1812 = x1807;
float x1813 = x136[x1812];
float x1814 = x536[x1811];
float x1815 = x1813 * x1814;
x1810 += x1815;
x1807 += 1;

}
float x1820 = x1810;
x1808[x1809] = x1820;

}
float* x1824 = (float*)myMalloc(150 * sizeof(float));
for(int x1825=0; x1825 < 150; x1825++) {
x1824[x1825] = 0.0f;

}
float* x1829 = (float*)myMalloc(150 * sizeof(float));
for(int x1830=0; x1830 < 150; x1830++) {
float x1831 = x1785[x1830];
float x1832 = x1808[x1830];
float x1833 = x1831 + x1832;
x1829[x1830] = x1833;

}
float* x1837 = (float*)myMalloc(150 * sizeof(float));
for(int x1838=0; x1838 < 150; x1838++) {
x1837[x1838] = 0.0f;

}
float* x1842 = (float*)myMalloc(150 * sizeof(float));
for(int x1843=0; x1843 < 150; x1843++) {
float x1844 = x1829[x1843];
float x1845 = x144[x1843];
float x1846 = x1844 + x1845;
x1842[x1843] = x1846;

}
float* x1850 = (float*)myMalloc(150 * sizeof(float));
for(int x1851=0; x1851 < 150; x1851++) {
x1850[x1851] = 0.0f;

}
float* x1855 = (float*)myMalloc(150 * sizeof(float));
for(int x1856=0; x1856 < 150; x1856++) {
float x1857 = x1842[x1856];
float x1858 = -1.0f * x1857;
double x1859 = (double)x1858;
double x1860 = exp(x1859);
float x1861 = (float)x1860;
float x1862 = x1861 + 1.0f;
float x1863 = 1.0f / x1862;
x1855[x1856] = x1863;

}
float* x1867 = (float*)myMalloc(150 * sizeof(float));
for(int x1868=0; x1868 < 150; x1868++) {
x1867[x1868] = 0.0f;

}
float** x1872 = (float**)myMalloc(2 * sizeof(float*));
x1872[0] = x1855;
x1872[1] = x1867;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1872);
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1850[x1876];
float x1878 = x1855[x1876];
float x1881 = x1867[x1876];
float x1879 = 1.0f - x1878;
float x1880 = x1879 * x1878;
float x1882 = x1880 * x1881;
float x1883 = x1877 + x1882;
x1850[x1876] = x1883;

}
// backpropagate +
for(int x1888=0; x1888 < 150; x1888++) {
float x1889 = x1837[x1888];
float x1890 = x1850[x1888];
float x1891 = x1889 + x1890;
x1837[x1888] = x1891;

}
for(int x1895=0; x1895 < 150; x1895++) {
float x1896 = x271[x1895];
float x1897 = x1850[x1895];
float x1898 = x1896 + x1897;
x271[x1895] = x1898;

}
// backpropagate +
for(int x1903=0; x1903 < 150; x1903++) {
float x1904 = x1801[x1903];
float x1905 = x1837[x1903];
float x1906 = x1904 + x1905;
x1801[x1903] = x1906;

}
for(int x1910=0; x1910 < 150; x1910++) {
float x1911 = x1824[x1910];
float x1912 = x1837[x1910];
float x1913 = x1911 + x1912;
x1824[x1910] = x1913;

}
// add_cartesian
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
int32_t x1921 = x1918;
int32_t x1922 = x1921 + x1920;
float x1923 = x266[x1922];
float x1924 = x536[x1920];
float x1925 = x1824[x1919];
float x1926 = x1924 * x1925;
float x1927 = x1923 + x1926;
x266[x1922] = x1927;

}
x1918 += 150;

}
int32_t x1934 = 0;
for(int x1935=0; x1935 < 150; x1935++) {
for(int x1936=0; x1936 < 150; x1936++) {
float x1937 = x537[x1936];
int32_t x1938 = x1934;
int32_t x1939 = x1938 + x1936;
float x1940 = x136[x1939];
float x1941 = x1824[x1935];
float x1942 = x1940 * x1941;
float x1943 = x1937 + x1942;
x537[x1936] = x1943;

}
x1934 += 150;

}
// add_cartesian
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
int32_t x1954 = x1951;
int32_t x1955 = x1954 + x1953;
float x1956 = x261[x1955];
float x1957 = x527[x1953];
float x1958 = x1801[x1952];
float x1959 = x1957 * x1958;
float x1960 = x1956 + x1959;
x261[x1955] = x1960;

}
x1951 += 150;

}
int32_t x1967 = 0;
for(int x1968=0; x1968 < 150; x1968++) {
for(int x1969=0; x1969 < 150; x1969++) {
float x1970 = x528[x1969];
int32_t x1971 = x1967;
int32_t x1972 = x1971 + x1969;
float x1973 = x128[x1972];
float x1974 = x1801[x1968];
float x1975 = x1973 * x1974;
float x1976 = x1970 + x1975;
x528[x1969] = x1976;

}
x1967 += 150;

}
}
};
x566(x2080);
for(int x2084=0; x2084 < 150; x2084++) {
float x2085 = x2058[x2084];
float x2086 = x2063[x2084];
float x2089 = x2075[x2084];
float x2087 = 1.0f - x2086;
float x2088 = x2087 * x2086;
float x2090 = x2088 * x2089;
float x2091 = x2085 + x2090;
x2058[x2084] = x2091;

}
// backpropagate +
for(int x2096=0; x2096 < 150; x2096++) {
float x2097 = x2045[x2096];
float x2098 = x2058[x2096];
float x2099 = x2097 + x2098;
x2045[x2096] = x2099;

}
for(int x2103=0; x2103 < 150; x2103++) {
float x2104 = x271[x2103];
float x2105 = x2058[x2103];
float x2106 = x2104 + x2105;
x271[x2103] = x2106;

}
// backpropagate +
for(int x2111=0; x2111 < 150; x2111++) {
float x2112 = x2009[x2111];
float x2113 = x2045[x2111];
float x2114 = x2112 + x2113;
x2009[x2111] = x2114;

}
for(int x2118=0; x2118 < 150; x2118++) {
float x2119 = x2032[x2118];
float x2120 = x2045[x2118];
float x2121 = x2119 + x2120;
x2032[x2118] = x2121;

}
// add_cartesian
int32_t x2126 = 0;
for(int x2127=0; x2127 < 150; x2127++) {
for(int x2128=0; x2128 < 150; x2128++) {
int32_t x2129 = x2126;
int32_t x2130 = x2129 + x2128;
float x2131 = x256[x2130];
float x2132 = x536[x2128];
float x2133 = x2032[x2127];
float x2134 = x2132 * x2133;
float x2135 = x2131 + x2134;
x256[x2130] = x2135;

}
x2126 += 150;

}
int32_t x2142 = 0;
for(int x2143=0; x2143 < 150; x2143++) {
for(int x2144=0; x2144 < 150; x2144++) {
float x2145 = x537[x2144];
int32_t x2146 = x2142;
int32_t x2147 = x2146 + x2144;
float x2148 = x120[x2147];
float x2149 = x2032[x2143];
float x2150 = x2148 * x2149;
float x2151 = x2145 + x2150;
x537[x2144] = x2151;

}
x2142 += 150;

}
// add_cartesian
int32_t x2159 = 0;
for(int x2160=0; x2160 < 150; x2160++) {
for(int x2161=0; x2161 < 150; x2161++) {
int32_t x2162 = x2159;
int32_t x2163 = x2162 + x2161;
float x2164 = x251[x2163];
float x2165 = x527[x2161];
float x2166 = x2009[x2160];
float x2167 = x2165 * x2166;
float x2168 = x2164 + x2167;
x251[x2163] = x2168;

}
x2159 += 150;

}
int32_t x2175 = 0;
for(int x2176=0; x2176 < 150; x2176++) {
for(int x2177=0; x2177 < 150; x2177++) {
float x2178 = x528[x2177];
int32_t x2179 = x2175;
int32_t x2180 = x2179 + x2177;
float x2181 = x112[x2180];
float x2182 = x2009[x2176];
float x2183 = x2181 * x2182;
float x2184 = x2178 + x2183;
x528[x2177] = x2184;

}
x2175 += 150;

}
}
};
x560(x2400);
for(int x2404=0; x2404 < 150; x2404++) {
float x2405 = x2378[x2404];
float x2406 = x2383[x2404];
float x2409 = x2395[x2404];
float x2407 = 1.0f - x2406;
float x2408 = x2407 * x2406;
float x2410 = x2408 * x2409;
float x2411 = x2405 + x2410;
x2378[x2404] = x2411;

}
// backpropagate +
for(int x2416=0; x2416 < 150; x2416++) {
float x2417 = x2365[x2416];
float x2418 = x2378[x2416];
float x2419 = x2417 + x2418;
x2365[x2416] = x2419;

}
for(int x2423=0; x2423 < 150; x2423++) {
float x2424 = x246[x2423];
float x2425 = x2378[x2423];
float x2426 = x2424 + x2425;
x246[x2423] = x2426;

}
// backpropagate +
for(int x2431=0; x2431 < 150; x2431++) {
float x2432 = x2329[x2431];
float x2433 = x2365[x2431];
float x2434 = x2432 + x2433;
x2329[x2431] = x2434;

}
for(int x2438=0; x2438 < 150; x2438++) {
float x2439 = x2352[x2438];
float x2440 = x2365[x2438];
float x2441 = x2439 + x2440;
x2352[x2438] = x2441;

}
// add_cartesian
int32_t x2446 = 0;
for(int x2447=0; x2447 < 150; x2447++) {
for(int x2448=0; x2448 < 150; x2448++) {
int32_t x2449 = x2446;
int32_t x2450 = x2449 + x2448;
float x2451 = x241[x2450];
float x2452 = x536[x2448];
float x2453 = x2352[x2447];
float x2454 = x2452 * x2453;
float x2455 = x2451 + x2454;
x241[x2450] = x2455;

}
x2446 += 150;

}
int32_t x2462 = 0;
for(int x2463=0; x2463 < 150; x2463++) {
for(int x2464=0; x2464 < 150; x2464++) {
float x2465 = x537[x2464];
int32_t x2466 = x2462;
int32_t x2467 = x2466 + x2464;
float x2468 = x99[x2467];
float x2469 = x2352[x2463];
float x2470 = x2468 * x2469;
float x2471 = x2465 + x2470;
x537[x2464] = x2471;

}
x2462 += 150;

}
// add_cartesian
int32_t x2479 = 0;
for(int x2480=0; x2480 < 150; x2480++) {
for(int x2481=0; x2481 < 150; x2481++) {
int32_t x2482 = x2479;
int32_t x2483 = x2482 + x2481;
float x2484 = x236[x2483];
float x2485 = x527[x2481];
float x2486 = x2329[x2480];
float x2487 = x2485 * x2486;
float x2488 = x2484 + x2487;
x236[x2483] = x2488;

}
x2479 += 150;

}
int32_t x2495 = 0;
for(int x2496=0; x2496 < 150; x2496++) {
for(int x2497=0; x2497 < 150; x2497++) {
float x2498 = x528[x2497];
int32_t x2499 = x2495;
int32_t x2500 = x2499 + x2497;
float x2501 = x90[x2500];
float x2502 = x2329[x2496];
float x2503 = x2501 * x2502;
float x2504 = x2498 + x2503;
x528[x2497] = x2504;

}
x2495 += 150;

}
}
};
x554(x2521);
} else {
float** x2526 = (float**)myMalloc(2 * sizeof(float*));
x2526[0] = x316;
x2526[1] = x321;
function<void(float**)> x554 = [&](float** x555) {
float* x556 = x555[0];
float* x557 = x555[1];
int32_t x558 = x459[x512];
bool x559 = x558 < 0;
if (x559) {
// dot List(150, 300) - WrappedArray(300)
int32_t x2195 = 0;
float* x2196 = (float*)myMalloc(150 * sizeof(float));
for(int x2197=0; x2197 < 150; x2197++) {
float x2198 = 0.0f;
for(int x2199=0; x2199 < 300; x2199++) {
int32_t x2200 = x2195;
float x2201 = x49[x2200];
float x2202 = x556[x2199];
float x2203 = x2201 * x2202;
x2198 += x2203;
x2195 += 1;

}
float x2208 = x2198;
x2196[x2197] = x2208;

}
float* x2212 = (float*)myMalloc(150 * sizeof(float));
for(int x2213=0; x2213 < 150; x2213++) {
x2212[x2213] = 0.0f;

}
float* x2217 = (float*)myMalloc(150 * sizeof(float));
for(int x2218=0; x2218 < 150; x2218++) {
float x2219 = x2196[x2218];
float x2220 = x58[x2218];
float x2221 = x2219 + x2220;
x2217[x2218] = x2221;

}
float* x2225 = (float*)myMalloc(150 * sizeof(float));
for(int x2226=0; x2226 < 150; x2226++) {
x2225[x2226] = 0.0f;

}
float* x2230 = (float*)myMalloc(150 * sizeof(float));
for(int x2231=0; x2231 < 150; x2231++) {
float x2232 = x2217[x2231];
float x2233 = -1.0f * x2232;
double x2234 = (double)x2233;
double x2235 = exp(x2234);
float x2236 = (float)x2235;
float x2237 = x2236 + 1.0f;
float x2238 = 1.0f / x2237;
x2230[x2231] = x2238;

}
float* x2242 = (float*)myMalloc(150 * sizeof(float));
for(int x2243=0; x2243 < 150; x2243++) {
x2242[x2243] = 0.0f;

}
float** x2247 = (float**)myMalloc(2 * sizeof(float*));
x2247[0] = x2230;
x2247[1] = x2242;
function<void(float**)> x560 = [&](float** x561) {
float* x562 = x561[0];
float* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
float** x1986 = (float**)myMalloc(2 * sizeof(float*));
x1986[0] = x326;
x1986[1] = x331;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1778 = (float**)myMalloc(2 * sizeof(float*));
x1778[0] = x326;
x1778[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1778);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1784 = 0;
float* x1785 = (float*)myMalloc(150 * sizeof(float));
for(int x1786=0; x1786 < 150; x1786++) {
float x1787 = 0.0f;
for(int x1788=0; x1788 < 150; x1788++) {
int32_t x1789 = x1784;
float x1790 = x128[x1789];
float x1791 = x527[x1788];
float x1792 = x1790 * x1791;
x1787 += x1792;
x1784 += 1;

}
float x1797 = x1787;
x1785[x1786] = x1797;

}
float* x1801 = (float*)myMalloc(150 * sizeof(float));
for(int x1802=0; x1802 < 150; x1802++) {
x1801[x1802] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1807 = 0;
float* x1808 = (float*)myMalloc(150 * sizeof(float));
for(int x1809=0; x1809 < 150; x1809++) {
float x1810 = 0.0f;
for(int x1811=0; x1811 < 150; x1811++) {
int32_t x1812 = x1807;
float x1813 = x136[x1812];
float x1814 = x536[x1811];
float x1815 = x1813 * x1814;
x1810 += x1815;
x1807 += 1;

}
float x1820 = x1810;
x1808[x1809] = x1820;

}
float* x1824 = (float*)myMalloc(150 * sizeof(float));
for(int x1825=0; x1825 < 150; x1825++) {
x1824[x1825] = 0.0f;

}
float* x1829 = (float*)myMalloc(150 * sizeof(float));
for(int x1830=0; x1830 < 150; x1830++) {
float x1831 = x1785[x1830];
float x1832 = x1808[x1830];
float x1833 = x1831 + x1832;
x1829[x1830] = x1833;

}
float* x1837 = (float*)myMalloc(150 * sizeof(float));
for(int x1838=0; x1838 < 150; x1838++) {
x1837[x1838] = 0.0f;

}
float* x1842 = (float*)myMalloc(150 * sizeof(float));
for(int x1843=0; x1843 < 150; x1843++) {
float x1844 = x1829[x1843];
float x1845 = x144[x1843];
float x1846 = x1844 + x1845;
x1842[x1843] = x1846;

}
float* x1850 = (float*)myMalloc(150 * sizeof(float));
for(int x1851=0; x1851 < 150; x1851++) {
x1850[x1851] = 0.0f;

}
float* x1855 = (float*)myMalloc(150 * sizeof(float));
for(int x1856=0; x1856 < 150; x1856++) {
float x1857 = x1842[x1856];
float x1858 = -1.0f * x1857;
double x1859 = (double)x1858;
double x1860 = exp(x1859);
float x1861 = (float)x1860;
float x1862 = x1861 + 1.0f;
float x1863 = 1.0f / x1862;
x1855[x1856] = x1863;

}
float* x1867 = (float*)myMalloc(150 * sizeof(float));
for(int x1868=0; x1868 < 150; x1868++) {
x1867[x1868] = 0.0f;

}
float** x1872 = (float**)myMalloc(2 * sizeof(float*));
x1872[0] = x1855;
x1872[1] = x1867;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1872);
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1850[x1876];
float x1878 = x1855[x1876];
float x1881 = x1867[x1876];
float x1879 = 1.0f - x1878;
float x1880 = x1879 * x1878;
float x1882 = x1880 * x1881;
float x1883 = x1877 + x1882;
x1850[x1876] = x1883;

}
// backpropagate +
for(int x1888=0; x1888 < 150; x1888++) {
float x1889 = x1837[x1888];
float x1890 = x1850[x1888];
float x1891 = x1889 + x1890;
x1837[x1888] = x1891;

}
for(int x1895=0; x1895 < 150; x1895++) {
float x1896 = x271[x1895];
float x1897 = x1850[x1895];
float x1898 = x1896 + x1897;
x271[x1895] = x1898;

}
// backpropagate +
for(int x1903=0; x1903 < 150; x1903++) {
float x1904 = x1801[x1903];
float x1905 = x1837[x1903];
float x1906 = x1904 + x1905;
x1801[x1903] = x1906;

}
for(int x1910=0; x1910 < 150; x1910++) {
float x1911 = x1824[x1910];
float x1912 = x1837[x1910];
float x1913 = x1911 + x1912;
x1824[x1910] = x1913;

}
// add_cartesian
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
int32_t x1921 = x1918;
int32_t x1922 = x1921 + x1920;
float x1923 = x266[x1922];
float x1924 = x536[x1920];
float x1925 = x1824[x1919];
float x1926 = x1924 * x1925;
float x1927 = x1923 + x1926;
x266[x1922] = x1927;

}
x1918 += 150;

}
int32_t x1934 = 0;
for(int x1935=0; x1935 < 150; x1935++) {
for(int x1936=0; x1936 < 150; x1936++) {
float x1937 = x537[x1936];
int32_t x1938 = x1934;
int32_t x1939 = x1938 + x1936;
float x1940 = x136[x1939];
float x1941 = x1824[x1935];
float x1942 = x1940 * x1941;
float x1943 = x1937 + x1942;
x537[x1936] = x1943;

}
x1934 += 150;

}
// add_cartesian
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
int32_t x1954 = x1951;
int32_t x1955 = x1954 + x1953;
float x1956 = x261[x1955];
float x1957 = x527[x1953];
float x1958 = x1801[x1952];
float x1959 = x1957 * x1958;
float x1960 = x1956 + x1959;
x261[x1955] = x1960;

}
x1951 += 150;

}
int32_t x1967 = 0;
for(int x1968=0; x1968 < 150; x1968++) {
for(int x1969=0; x1969 < 150; x1969++) {
float x1970 = x528[x1969];
int32_t x1971 = x1967;
int32_t x1972 = x1971 + x1969;
float x1973 = x128[x1972];
float x1974 = x1801[x1968];
float x1975 = x1973 * x1974;
float x1976 = x1970 + x1975;
x528[x1969] = x1976;

}
x1967 += 150;

}
}
};
x566(x1986);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1992 = 0;
float* x1993 = (float*)myMalloc(150 * sizeof(float));
for(int x1994=0; x1994 < 150; x1994++) {
float x1995 = 0.0f;
for(int x1996=0; x1996 < 150; x1996++) {
int32_t x1997 = x1992;
float x1998 = x112[x1997];
float x1999 = x527[x1996];
float x2000 = x1998 * x1999;
x1995 += x2000;
x1992 += 1;

}
float x2005 = x1995;
x1993[x1994] = x2005;

}
float* x2009 = (float*)myMalloc(150 * sizeof(float));
for(int x2010=0; x2010 < 150; x2010++) {
x2009[x2010] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2015 = 0;
float* x2016 = (float*)myMalloc(150 * sizeof(float));
for(int x2017=0; x2017 < 150; x2017++) {
float x2018 = 0.0f;
for(int x2019=0; x2019 < 150; x2019++) {
int32_t x2020 = x2015;
float x2021 = x120[x2020];
float x2022 = x536[x2019];
float x2023 = x2021 * x2022;
x2018 += x2023;
x2015 += 1;

}
float x2028 = x2018;
x2016[x2017] = x2028;

}
float* x2032 = (float*)myMalloc(150 * sizeof(float));
for(int x2033=0; x2033 < 150; x2033++) {
x2032[x2033] = 0.0f;

}
float* x2037 = (float*)myMalloc(150 * sizeof(float));
for(int x2038=0; x2038 < 150; x2038++) {
float x2039 = x1993[x2038];
float x2040 = x2016[x2038];
float x2041 = x2039 + x2040;
x2037[x2038] = x2041;

}
float* x2045 = (float*)myMalloc(150 * sizeof(float));
for(int x2046=0; x2046 < 150; x2046++) {
x2045[x2046] = 0.0f;

}
float* x2050 = (float*)myMalloc(150 * sizeof(float));
for(int x2051=0; x2051 < 150; x2051++) {
float x2052 = x2037[x2051];
float x2053 = x144[x2051];
float x2054 = x2052 + x2053;
x2050[x2051] = x2054;

}
float* x2058 = (float*)myMalloc(150 * sizeof(float));
for(int x2059=0; x2059 < 150; x2059++) {
x2058[x2059] = 0.0f;

}
float* x2063 = (float*)myMalloc(150 * sizeof(float));
for(int x2064=0; x2064 < 150; x2064++) {
float x2065 = x2050[x2064];
float x2066 = -1.0f * x2065;
double x2067 = (double)x2066;
double x2068 = exp(x2067);
float x2069 = (float)x2068;
float x2070 = x2069 + 1.0f;
float x2071 = 1.0f / x2070;
x2063[x2064] = x2071;

}
float* x2075 = (float*)myMalloc(150 * sizeof(float));
for(int x2076=0; x2076 < 150; x2076++) {
x2075[x2076] = 0.0f;

}
float** x2080 = (float**)myMalloc(2 * sizeof(float*));
x2080[0] = x2063;
x2080[1] = x2075;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1778 = (float**)myMalloc(2 * sizeof(float*));
x1778[0] = x326;
x1778[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1778);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1784 = 0;
float* x1785 = (float*)myMalloc(150 * sizeof(float));
for(int x1786=0; x1786 < 150; x1786++) {
float x1787 = 0.0f;
for(int x1788=0; x1788 < 150; x1788++) {
int32_t x1789 = x1784;
float x1790 = x128[x1789];
float x1791 = x527[x1788];
float x1792 = x1790 * x1791;
x1787 += x1792;
x1784 += 1;

}
float x1797 = x1787;
x1785[x1786] = x1797;

}
float* x1801 = (float*)myMalloc(150 * sizeof(float));
for(int x1802=0; x1802 < 150; x1802++) {
x1801[x1802] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1807 = 0;
float* x1808 = (float*)myMalloc(150 * sizeof(float));
for(int x1809=0; x1809 < 150; x1809++) {
float x1810 = 0.0f;
for(int x1811=0; x1811 < 150; x1811++) {
int32_t x1812 = x1807;
float x1813 = x136[x1812];
float x1814 = x536[x1811];
float x1815 = x1813 * x1814;
x1810 += x1815;
x1807 += 1;

}
float x1820 = x1810;
x1808[x1809] = x1820;

}
float* x1824 = (float*)myMalloc(150 * sizeof(float));
for(int x1825=0; x1825 < 150; x1825++) {
x1824[x1825] = 0.0f;

}
float* x1829 = (float*)myMalloc(150 * sizeof(float));
for(int x1830=0; x1830 < 150; x1830++) {
float x1831 = x1785[x1830];
float x1832 = x1808[x1830];
float x1833 = x1831 + x1832;
x1829[x1830] = x1833;

}
float* x1837 = (float*)myMalloc(150 * sizeof(float));
for(int x1838=0; x1838 < 150; x1838++) {
x1837[x1838] = 0.0f;

}
float* x1842 = (float*)myMalloc(150 * sizeof(float));
for(int x1843=0; x1843 < 150; x1843++) {
float x1844 = x1829[x1843];
float x1845 = x144[x1843];
float x1846 = x1844 + x1845;
x1842[x1843] = x1846;

}
float* x1850 = (float*)myMalloc(150 * sizeof(float));
for(int x1851=0; x1851 < 150; x1851++) {
x1850[x1851] = 0.0f;

}
float* x1855 = (float*)myMalloc(150 * sizeof(float));
for(int x1856=0; x1856 < 150; x1856++) {
float x1857 = x1842[x1856];
float x1858 = -1.0f * x1857;
double x1859 = (double)x1858;
double x1860 = exp(x1859);
float x1861 = (float)x1860;
float x1862 = x1861 + 1.0f;
float x1863 = 1.0f / x1862;
x1855[x1856] = x1863;

}
float* x1867 = (float*)myMalloc(150 * sizeof(float));
for(int x1868=0; x1868 < 150; x1868++) {
x1867[x1868] = 0.0f;

}
float** x1872 = (float**)myMalloc(2 * sizeof(float*));
x1872[0] = x1855;
x1872[1] = x1867;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1872);
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1850[x1876];
float x1878 = x1855[x1876];
float x1881 = x1867[x1876];
float x1879 = 1.0f - x1878;
float x1880 = x1879 * x1878;
float x1882 = x1880 * x1881;
float x1883 = x1877 + x1882;
x1850[x1876] = x1883;

}
// backpropagate +
for(int x1888=0; x1888 < 150; x1888++) {
float x1889 = x1837[x1888];
float x1890 = x1850[x1888];
float x1891 = x1889 + x1890;
x1837[x1888] = x1891;

}
for(int x1895=0; x1895 < 150; x1895++) {
float x1896 = x271[x1895];
float x1897 = x1850[x1895];
float x1898 = x1896 + x1897;
x271[x1895] = x1898;

}
// backpropagate +
for(int x1903=0; x1903 < 150; x1903++) {
float x1904 = x1801[x1903];
float x1905 = x1837[x1903];
float x1906 = x1904 + x1905;
x1801[x1903] = x1906;

}
for(int x1910=0; x1910 < 150; x1910++) {
float x1911 = x1824[x1910];
float x1912 = x1837[x1910];
float x1913 = x1911 + x1912;
x1824[x1910] = x1913;

}
// add_cartesian
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
int32_t x1921 = x1918;
int32_t x1922 = x1921 + x1920;
float x1923 = x266[x1922];
float x1924 = x536[x1920];
float x1925 = x1824[x1919];
float x1926 = x1924 * x1925;
float x1927 = x1923 + x1926;
x266[x1922] = x1927;

}
x1918 += 150;

}
int32_t x1934 = 0;
for(int x1935=0; x1935 < 150; x1935++) {
for(int x1936=0; x1936 < 150; x1936++) {
float x1937 = x537[x1936];
int32_t x1938 = x1934;
int32_t x1939 = x1938 + x1936;
float x1940 = x136[x1939];
float x1941 = x1824[x1935];
float x1942 = x1940 * x1941;
float x1943 = x1937 + x1942;
x537[x1936] = x1943;

}
x1934 += 150;

}
// add_cartesian
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
int32_t x1954 = x1951;
int32_t x1955 = x1954 + x1953;
float x1956 = x261[x1955];
float x1957 = x527[x1953];
float x1958 = x1801[x1952];
float x1959 = x1957 * x1958;
float x1960 = x1956 + x1959;
x261[x1955] = x1960;

}
x1951 += 150;

}
int32_t x1967 = 0;
for(int x1968=0; x1968 < 150; x1968++) {
for(int x1969=0; x1969 < 150; x1969++) {
float x1970 = x528[x1969];
int32_t x1971 = x1967;
int32_t x1972 = x1971 + x1969;
float x1973 = x128[x1972];
float x1974 = x1801[x1968];
float x1975 = x1973 * x1974;
float x1976 = x1970 + x1975;
x528[x1969] = x1976;

}
x1967 += 150;

}
}
};
x566(x2080);
for(int x2084=0; x2084 < 150; x2084++) {
float x2085 = x2058[x2084];
float x2086 = x2063[x2084];
float x2089 = x2075[x2084];
float x2087 = 1.0f - x2086;
float x2088 = x2087 * x2086;
float x2090 = x2088 * x2089;
float x2091 = x2085 + x2090;
x2058[x2084] = x2091;

}
// backpropagate +
for(int x2096=0; x2096 < 150; x2096++) {
float x2097 = x2045[x2096];
float x2098 = x2058[x2096];
float x2099 = x2097 + x2098;
x2045[x2096] = x2099;

}
for(int x2103=0; x2103 < 150; x2103++) {
float x2104 = x271[x2103];
float x2105 = x2058[x2103];
float x2106 = x2104 + x2105;
x271[x2103] = x2106;

}
// backpropagate +
for(int x2111=0; x2111 < 150; x2111++) {
float x2112 = x2009[x2111];
float x2113 = x2045[x2111];
float x2114 = x2112 + x2113;
x2009[x2111] = x2114;

}
for(int x2118=0; x2118 < 150; x2118++) {
float x2119 = x2032[x2118];
float x2120 = x2045[x2118];
float x2121 = x2119 + x2120;
x2032[x2118] = x2121;

}
// add_cartesian
int32_t x2126 = 0;
for(int x2127=0; x2127 < 150; x2127++) {
for(int x2128=0; x2128 < 150; x2128++) {
int32_t x2129 = x2126;
int32_t x2130 = x2129 + x2128;
float x2131 = x256[x2130];
float x2132 = x536[x2128];
float x2133 = x2032[x2127];
float x2134 = x2132 * x2133;
float x2135 = x2131 + x2134;
x256[x2130] = x2135;

}
x2126 += 150;

}
int32_t x2142 = 0;
for(int x2143=0; x2143 < 150; x2143++) {
for(int x2144=0; x2144 < 150; x2144++) {
float x2145 = x537[x2144];
int32_t x2146 = x2142;
int32_t x2147 = x2146 + x2144;
float x2148 = x120[x2147];
float x2149 = x2032[x2143];
float x2150 = x2148 * x2149;
float x2151 = x2145 + x2150;
x537[x2144] = x2151;

}
x2142 += 150;

}
// add_cartesian
int32_t x2159 = 0;
for(int x2160=0; x2160 < 150; x2160++) {
for(int x2161=0; x2161 < 150; x2161++) {
int32_t x2162 = x2159;
int32_t x2163 = x2162 + x2161;
float x2164 = x251[x2163];
float x2165 = x527[x2161];
float x2166 = x2009[x2160];
float x2167 = x2165 * x2166;
float x2168 = x2164 + x2167;
x251[x2163] = x2168;

}
x2159 += 150;

}
int32_t x2175 = 0;
for(int x2176=0; x2176 < 150; x2176++) {
for(int x2177=0; x2177 < 150; x2177++) {
float x2178 = x528[x2177];
int32_t x2179 = x2175;
int32_t x2180 = x2179 + x2177;
float x2181 = x112[x2180];
float x2182 = x2009[x2176];
float x2183 = x2181 * x2182;
float x2184 = x2178 + x2183;
x528[x2177] = x2184;

}
x2175 += 150;

}
}
};
x560(x2247);
for(int x2251=0; x2251 < 150; x2251++) {
float x2252 = x2225[x2251];
float x2253 = x2230[x2251];
float x2256 = x2242[x2251];
float x2254 = 1.0f - x2253;
float x2255 = x2254 * x2253;
float x2257 = x2255 * x2256;
float x2258 = x2252 + x2257;
x2225[x2251] = x2258;

}
// backpropagate +
for(int x2263=0; x2263 < 150; x2263++) {
float x2264 = x2212[x2263];
float x2265 = x2225[x2263];
float x2266 = x2264 + x2265;
x2212[x2263] = x2266;

}
for(int x2270=0; x2270 < 150; x2270++) {
float x2271 = x211[x2270];
float x2272 = x2225[x2270];
float x2273 = x2271 + x2272;
x211[x2270] = x2273;

}
// add_cartesian
int32_t x2278 = 0;
for(int x2279=0; x2279 < 150; x2279++) {
for(int x2280=0; x2280 < 300; x2280++) {
int32_t x2281 = x2278;
int32_t x2282 = x2281 + x2280;
float x2283 = x206[x2282];
float x2284 = x556[x2280];
float x2285 = x2212[x2279];
float x2286 = x2284 * x2285;
float x2287 = x2283 + x2286;
x206[x2282] = x2287;

}
x2278 += 300;

}
int32_t x2294 = 0;
for(int x2295=0; x2295 < 150; x2295++) {
for(int x2296=0; x2296 < 300; x2296++) {
float x2297 = x557[x2296];
int32_t x2298 = x2294;
int32_t x2299 = x2298 + x2296;
float x2300 = x49[x2299];
float x2301 = x2212[x2295];
float x2302 = x2300 * x2301;
float x2303 = x2297 + x2302;
x557[x2296] = x2303;

}
x2294 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2312 = 0;
float* x2313 = (float*)myMalloc(150 * sizeof(float));
for(int x2314=0; x2314 < 150; x2314++) {
float x2315 = 0.0f;
for(int x2316=0; x2316 < 150; x2316++) {
int32_t x2317 = x2312;
float x2318 = x90[x2317];
float x2319 = x527[x2316];
float x2320 = x2318 * x2319;
x2315 += x2320;
x2312 += 1;

}
float x2325 = x2315;
x2313[x2314] = x2325;

}
float* x2329 = (float*)myMalloc(150 * sizeof(float));
for(int x2330=0; x2330 < 150; x2330++) {
x2329[x2330] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2335 = 0;
float* x2336 = (float*)myMalloc(150 * sizeof(float));
for(int x2337=0; x2337 < 150; x2337++) {
float x2338 = 0.0f;
for(int x2339=0; x2339 < 150; x2339++) {
int32_t x2340 = x2335;
float x2341 = x99[x2340];
float x2342 = x536[x2339];
float x2343 = x2341 * x2342;
x2338 += x2343;
x2335 += 1;

}
float x2348 = x2338;
x2336[x2337] = x2348;

}
float* x2352 = (float*)myMalloc(150 * sizeof(float));
for(int x2353=0; x2353 < 150; x2353++) {
x2352[x2353] = 0.0f;

}
float* x2357 = (float*)myMalloc(150 * sizeof(float));
for(int x2358=0; x2358 < 150; x2358++) {
float x2359 = x2313[x2358];
float x2360 = x2336[x2358];
float x2361 = x2359 + x2360;
x2357[x2358] = x2361;

}
float* x2365 = (float*)myMalloc(150 * sizeof(float));
for(int x2366=0; x2366 < 150; x2366++) {
x2365[x2366] = 0.0f;

}
float* x2370 = (float*)myMalloc(150 * sizeof(float));
for(int x2371=0; x2371 < 150; x2371++) {
float x2372 = x2357[x2371];
float x2373 = x107[x2371];
float x2374 = x2372 + x2373;
x2370[x2371] = x2374;

}
float* x2378 = (float*)myMalloc(150 * sizeof(float));
for(int x2379=0; x2379 < 150; x2379++) {
x2378[x2379] = 0.0f;

}
float* x2383 = (float*)myMalloc(150 * sizeof(float));
for(int x2384=0; x2384 < 150; x2384++) {
float x2385 = x2370[x2384];
float x2386 = -1.0f * x2385;
double x2387 = (double)x2386;
double x2388 = exp(x2387);
float x2389 = (float)x2388;
float x2390 = x2389 + 1.0f;
float x2391 = 1.0f / x2390;
x2383[x2384] = x2391;

}
float* x2395 = (float*)myMalloc(150 * sizeof(float));
for(int x2396=0; x2396 < 150; x2396++) {
x2395[x2396] = 0.0f;

}
float** x2400 = (float**)myMalloc(2 * sizeof(float*));
x2400[0] = x2383;
x2400[1] = x2395;
function<void(float**)> x560 = [&](float** x561) {
float* x562 = x561[0];
float* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
float** x1986 = (float**)myMalloc(2 * sizeof(float*));
x1986[0] = x326;
x1986[1] = x331;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1778 = (float**)myMalloc(2 * sizeof(float*));
x1778[0] = x326;
x1778[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1778);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1784 = 0;
float* x1785 = (float*)myMalloc(150 * sizeof(float));
for(int x1786=0; x1786 < 150; x1786++) {
float x1787 = 0.0f;
for(int x1788=0; x1788 < 150; x1788++) {
int32_t x1789 = x1784;
float x1790 = x128[x1789];
float x1791 = x527[x1788];
float x1792 = x1790 * x1791;
x1787 += x1792;
x1784 += 1;

}
float x1797 = x1787;
x1785[x1786] = x1797;

}
float* x1801 = (float*)myMalloc(150 * sizeof(float));
for(int x1802=0; x1802 < 150; x1802++) {
x1801[x1802] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1807 = 0;
float* x1808 = (float*)myMalloc(150 * sizeof(float));
for(int x1809=0; x1809 < 150; x1809++) {
float x1810 = 0.0f;
for(int x1811=0; x1811 < 150; x1811++) {
int32_t x1812 = x1807;
float x1813 = x136[x1812];
float x1814 = x536[x1811];
float x1815 = x1813 * x1814;
x1810 += x1815;
x1807 += 1;

}
float x1820 = x1810;
x1808[x1809] = x1820;

}
float* x1824 = (float*)myMalloc(150 * sizeof(float));
for(int x1825=0; x1825 < 150; x1825++) {
x1824[x1825] = 0.0f;

}
float* x1829 = (float*)myMalloc(150 * sizeof(float));
for(int x1830=0; x1830 < 150; x1830++) {
float x1831 = x1785[x1830];
float x1832 = x1808[x1830];
float x1833 = x1831 + x1832;
x1829[x1830] = x1833;

}
float* x1837 = (float*)myMalloc(150 * sizeof(float));
for(int x1838=0; x1838 < 150; x1838++) {
x1837[x1838] = 0.0f;

}
float* x1842 = (float*)myMalloc(150 * sizeof(float));
for(int x1843=0; x1843 < 150; x1843++) {
float x1844 = x1829[x1843];
float x1845 = x144[x1843];
float x1846 = x1844 + x1845;
x1842[x1843] = x1846;

}
float* x1850 = (float*)myMalloc(150 * sizeof(float));
for(int x1851=0; x1851 < 150; x1851++) {
x1850[x1851] = 0.0f;

}
float* x1855 = (float*)myMalloc(150 * sizeof(float));
for(int x1856=0; x1856 < 150; x1856++) {
float x1857 = x1842[x1856];
float x1858 = -1.0f * x1857;
double x1859 = (double)x1858;
double x1860 = exp(x1859);
float x1861 = (float)x1860;
float x1862 = x1861 + 1.0f;
float x1863 = 1.0f / x1862;
x1855[x1856] = x1863;

}
float* x1867 = (float*)myMalloc(150 * sizeof(float));
for(int x1868=0; x1868 < 150; x1868++) {
x1867[x1868] = 0.0f;

}
float** x1872 = (float**)myMalloc(2 * sizeof(float*));
x1872[0] = x1855;
x1872[1] = x1867;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1872);
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1850[x1876];
float x1878 = x1855[x1876];
float x1881 = x1867[x1876];
float x1879 = 1.0f - x1878;
float x1880 = x1879 * x1878;
float x1882 = x1880 * x1881;
float x1883 = x1877 + x1882;
x1850[x1876] = x1883;

}
// backpropagate +
for(int x1888=0; x1888 < 150; x1888++) {
float x1889 = x1837[x1888];
float x1890 = x1850[x1888];
float x1891 = x1889 + x1890;
x1837[x1888] = x1891;

}
for(int x1895=0; x1895 < 150; x1895++) {
float x1896 = x271[x1895];
float x1897 = x1850[x1895];
float x1898 = x1896 + x1897;
x271[x1895] = x1898;

}
// backpropagate +
for(int x1903=0; x1903 < 150; x1903++) {
float x1904 = x1801[x1903];
float x1905 = x1837[x1903];
float x1906 = x1904 + x1905;
x1801[x1903] = x1906;

}
for(int x1910=0; x1910 < 150; x1910++) {
float x1911 = x1824[x1910];
float x1912 = x1837[x1910];
float x1913 = x1911 + x1912;
x1824[x1910] = x1913;

}
// add_cartesian
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
int32_t x1921 = x1918;
int32_t x1922 = x1921 + x1920;
float x1923 = x266[x1922];
float x1924 = x536[x1920];
float x1925 = x1824[x1919];
float x1926 = x1924 * x1925;
float x1927 = x1923 + x1926;
x266[x1922] = x1927;

}
x1918 += 150;

}
int32_t x1934 = 0;
for(int x1935=0; x1935 < 150; x1935++) {
for(int x1936=0; x1936 < 150; x1936++) {
float x1937 = x537[x1936];
int32_t x1938 = x1934;
int32_t x1939 = x1938 + x1936;
float x1940 = x136[x1939];
float x1941 = x1824[x1935];
float x1942 = x1940 * x1941;
float x1943 = x1937 + x1942;
x537[x1936] = x1943;

}
x1934 += 150;

}
// add_cartesian
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
int32_t x1954 = x1951;
int32_t x1955 = x1954 + x1953;
float x1956 = x261[x1955];
float x1957 = x527[x1953];
float x1958 = x1801[x1952];
float x1959 = x1957 * x1958;
float x1960 = x1956 + x1959;
x261[x1955] = x1960;

}
x1951 += 150;

}
int32_t x1967 = 0;
for(int x1968=0; x1968 < 150; x1968++) {
for(int x1969=0; x1969 < 150; x1969++) {
float x1970 = x528[x1969];
int32_t x1971 = x1967;
int32_t x1972 = x1971 + x1969;
float x1973 = x128[x1972];
float x1974 = x1801[x1968];
float x1975 = x1973 * x1974;
float x1976 = x1970 + x1975;
x528[x1969] = x1976;

}
x1967 += 150;

}
}
};
x566(x1986);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1992 = 0;
float* x1993 = (float*)myMalloc(150 * sizeof(float));
for(int x1994=0; x1994 < 150; x1994++) {
float x1995 = 0.0f;
for(int x1996=0; x1996 < 150; x1996++) {
int32_t x1997 = x1992;
float x1998 = x112[x1997];
float x1999 = x527[x1996];
float x2000 = x1998 * x1999;
x1995 += x2000;
x1992 += 1;

}
float x2005 = x1995;
x1993[x1994] = x2005;

}
float* x2009 = (float*)myMalloc(150 * sizeof(float));
for(int x2010=0; x2010 < 150; x2010++) {
x2009[x2010] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2015 = 0;
float* x2016 = (float*)myMalloc(150 * sizeof(float));
for(int x2017=0; x2017 < 150; x2017++) {
float x2018 = 0.0f;
for(int x2019=0; x2019 < 150; x2019++) {
int32_t x2020 = x2015;
float x2021 = x120[x2020];
float x2022 = x536[x2019];
float x2023 = x2021 * x2022;
x2018 += x2023;
x2015 += 1;

}
float x2028 = x2018;
x2016[x2017] = x2028;

}
float* x2032 = (float*)myMalloc(150 * sizeof(float));
for(int x2033=0; x2033 < 150; x2033++) {
x2032[x2033] = 0.0f;

}
float* x2037 = (float*)myMalloc(150 * sizeof(float));
for(int x2038=0; x2038 < 150; x2038++) {
float x2039 = x1993[x2038];
float x2040 = x2016[x2038];
float x2041 = x2039 + x2040;
x2037[x2038] = x2041;

}
float* x2045 = (float*)myMalloc(150 * sizeof(float));
for(int x2046=0; x2046 < 150; x2046++) {
x2045[x2046] = 0.0f;

}
float* x2050 = (float*)myMalloc(150 * sizeof(float));
for(int x2051=0; x2051 < 150; x2051++) {
float x2052 = x2037[x2051];
float x2053 = x144[x2051];
float x2054 = x2052 + x2053;
x2050[x2051] = x2054;

}
float* x2058 = (float*)myMalloc(150 * sizeof(float));
for(int x2059=0; x2059 < 150; x2059++) {
x2058[x2059] = 0.0f;

}
float* x2063 = (float*)myMalloc(150 * sizeof(float));
for(int x2064=0; x2064 < 150; x2064++) {
float x2065 = x2050[x2064];
float x2066 = -1.0f * x2065;
double x2067 = (double)x2066;
double x2068 = exp(x2067);
float x2069 = (float)x2068;
float x2070 = x2069 + 1.0f;
float x2071 = 1.0f / x2070;
x2063[x2064] = x2071;

}
float* x2075 = (float*)myMalloc(150 * sizeof(float));
for(int x2076=0; x2076 < 150; x2076++) {
x2075[x2076] = 0.0f;

}
float** x2080 = (float**)myMalloc(2 * sizeof(float*));
x2080[0] = x2063;
x2080[1] = x2075;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1778 = (float**)myMalloc(2 * sizeof(float*));
x1778[0] = x326;
x1778[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1778);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1784 = 0;
float* x1785 = (float*)myMalloc(150 * sizeof(float));
for(int x1786=0; x1786 < 150; x1786++) {
float x1787 = 0.0f;
for(int x1788=0; x1788 < 150; x1788++) {
int32_t x1789 = x1784;
float x1790 = x128[x1789];
float x1791 = x527[x1788];
float x1792 = x1790 * x1791;
x1787 += x1792;
x1784 += 1;

}
float x1797 = x1787;
x1785[x1786] = x1797;

}
float* x1801 = (float*)myMalloc(150 * sizeof(float));
for(int x1802=0; x1802 < 150; x1802++) {
x1801[x1802] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1807 = 0;
float* x1808 = (float*)myMalloc(150 * sizeof(float));
for(int x1809=0; x1809 < 150; x1809++) {
float x1810 = 0.0f;
for(int x1811=0; x1811 < 150; x1811++) {
int32_t x1812 = x1807;
float x1813 = x136[x1812];
float x1814 = x536[x1811];
float x1815 = x1813 * x1814;
x1810 += x1815;
x1807 += 1;

}
float x1820 = x1810;
x1808[x1809] = x1820;

}
float* x1824 = (float*)myMalloc(150 * sizeof(float));
for(int x1825=0; x1825 < 150; x1825++) {
x1824[x1825] = 0.0f;

}
float* x1829 = (float*)myMalloc(150 * sizeof(float));
for(int x1830=0; x1830 < 150; x1830++) {
float x1831 = x1785[x1830];
float x1832 = x1808[x1830];
float x1833 = x1831 + x1832;
x1829[x1830] = x1833;

}
float* x1837 = (float*)myMalloc(150 * sizeof(float));
for(int x1838=0; x1838 < 150; x1838++) {
x1837[x1838] = 0.0f;

}
float* x1842 = (float*)myMalloc(150 * sizeof(float));
for(int x1843=0; x1843 < 150; x1843++) {
float x1844 = x1829[x1843];
float x1845 = x144[x1843];
float x1846 = x1844 + x1845;
x1842[x1843] = x1846;

}
float* x1850 = (float*)myMalloc(150 * sizeof(float));
for(int x1851=0; x1851 < 150; x1851++) {
x1850[x1851] = 0.0f;

}
float* x1855 = (float*)myMalloc(150 * sizeof(float));
for(int x1856=0; x1856 < 150; x1856++) {
float x1857 = x1842[x1856];
float x1858 = -1.0f * x1857;
double x1859 = (double)x1858;
double x1860 = exp(x1859);
float x1861 = (float)x1860;
float x1862 = x1861 + 1.0f;
float x1863 = 1.0f / x1862;
x1855[x1856] = x1863;

}
float* x1867 = (float*)myMalloc(150 * sizeof(float));
for(int x1868=0; x1868 < 150; x1868++) {
x1867[x1868] = 0.0f;

}
float** x1872 = (float**)myMalloc(2 * sizeof(float*));
x1872[0] = x1855;
x1872[1] = x1867;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1459 = 0;
float* x1460 = (float*)myMalloc(150 * sizeof(float));
for(int x1461=0; x1461 < 150; x1461++) {
float x1462 = 0.0f;
for(int x1463=0; x1463 < 300; x1463++) {
int32_t x1464 = x1459;
float x1465 = x64[x1464];
float x1466 = x556[x1463];
float x1467 = x1465 * x1466;
x1462 += x1467;
x1459 += 1;

}
float x1472 = x1462;
x1460[x1461] = x1472;

}
float* x1476 = (float*)myMalloc(150 * sizeof(float));
for(int x1477=0; x1477 < 150; x1477++) {
x1476[x1477] = 0.0f;

}
float* x1481 = (float*)myMalloc(150 * sizeof(float));
for(int x1482=0; x1482 < 150; x1482++) {
float x1483 = x1460[x1482];
float x1484 = x72[x1482];
float x1485 = x1483 + x1484;
x1481[x1482] = x1485;

}
float* x1489 = (float*)myMalloc(150 * sizeof(float));
for(int x1490=0; x1490 < 150; x1490++) {
x1489[x1490] = 0.0f;

}
float* x1494 = (float*)myMalloc(150 * sizeof(float));
for(int x1495=0; x1495 < 150; x1495++) {
float x1496 = x1481[x1495];
float x1497 = -1.0f * x1496;
double x1498 = (double)x1497;
double x1499 = exp(x1498);
float x1500 = (float)x1499;
float x1501 = x1500 + 1.0f;
float x1502 = 1.0f / x1501;
x1494[x1495] = x1502;

}
float* x1506 = (float*)myMalloc(150 * sizeof(float));
for(int x1507=0; x1507 < 150; x1507++) {
x1506[x1507] = 0.0f;

}
float** x1511 = (float**)myMalloc(2 * sizeof(float*));
x1511[0] = x1494;
x1511[1] = x1506;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1511);
for(int x1515=0; x1515 < 150; x1515++) {
float x1516 = x1489[x1515];
float x1517 = x1494[x1515];
float x1520 = x1506[x1515];
float x1518 = 1.0f - x1517;
float x1519 = x1518 * x1517;
float x1521 = x1519 * x1520;
float x1522 = x1516 + x1521;
x1489[x1515] = x1522;

}
// backpropagate +
for(int x1527=0; x1527 < 150; x1527++) {
float x1528 = x1476[x1527];
float x1529 = x1489[x1527];
float x1530 = x1528 + x1529;
x1476[x1527] = x1530;

}
for(int x1534=0; x1534 < 150; x1534++) {
float x1535 = x221[x1534];
float x1536 = x1489[x1534];
float x1537 = x1535 + x1536;
x221[x1534] = x1537;

}
// add_cartesian
int32_t x1542 = 0;
for(int x1543=0; x1543 < 150; x1543++) {
for(int x1544=0; x1544 < 300; x1544++) {
int32_t x1545 = x1542;
int32_t x1546 = x1545 + x1544;
float x1547 = x216[x1546];
float x1548 = x556[x1544];
float x1549 = x1476[x1543];
float x1550 = x1548 * x1549;
float x1551 = x1547 + x1550;
x216[x1546] = x1551;

}
x1542 += 300;

}
int32_t x1558 = 0;
for(int x1559=0; x1559 < 150; x1559++) {
for(int x1560=0; x1560 < 300; x1560++) {
float x1561 = x557[x1560];
int32_t x1562 = x1558;
int32_t x1563 = x1562 + x1560;
float x1564 = x64[x1563];
float x1565 = x1476[x1559];
float x1566 = x1564 * x1565;
float x1567 = x1561 + x1566;
x557[x1560] = x1567;

}
x1558 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1576 = 0;
float* x1577 = (float*)myMalloc(150 * sizeof(float));
for(int x1578=0; x1578 < 150; x1578++) {
float x1579 = 0.0f;
for(int x1580=0; x1580 < 150; x1580++) {
int32_t x1581 = x1576;
float x1582 = x149[x1581];
float x1583 = x527[x1580];
float x1584 = x1582 * x1583;
x1579 += x1584;
x1576 += 1;

}
float x1589 = x1579;
x1577[x1578] = x1589;

}
float* x1593 = (float*)myMalloc(150 * sizeof(float));
for(int x1594=0; x1594 < 150; x1594++) {
x1593[x1594] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1599 = 0;
float* x1600 = (float*)myMalloc(150 * sizeof(float));
for(int x1601=0; x1601 < 150; x1601++) {
float x1602 = 0.0f;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1599;
float x1605 = x157[x1604];
float x1606 = x536[x1603];
float x1607 = x1605 * x1606;
x1602 += x1607;
x1599 += 1;

}
float x1612 = x1602;
x1600[x1601] = x1612;

}
float* x1616 = (float*)myMalloc(150 * sizeof(float));
for(int x1617=0; x1617 < 150; x1617++) {
x1616[x1617] = 0.0f;

}
float* x1621 = (float*)myMalloc(150 * sizeof(float));
for(int x1622=0; x1622 < 150; x1622++) {
float x1623 = x1577[x1622];
float x1624 = x1600[x1622];
float x1625 = x1623 + x1624;
x1621[x1622] = x1625;

}
float* x1629 = (float*)myMalloc(150 * sizeof(float));
for(int x1630=0; x1630 < 150; x1630++) {
x1629[x1630] = 0.0f;

}
float* x1634 = (float*)myMalloc(150 * sizeof(float));
for(int x1635=0; x1635 < 150; x1635++) {
float x1636 = x1621[x1635];
float x1637 = x165[x1635];
float x1638 = x1636 + x1637;
x1634[x1635] = x1638;

}
float* x1642 = (float*)myMalloc(150 * sizeof(float));
for(int x1643=0; x1643 < 150; x1643++) {
x1642[x1643] = 0.0f;

}
float* x1647 = (float*)myMalloc(150 * sizeof(float));
for(int x1648=0; x1648 < 150; x1648++) {
float x1649 = x1634[x1648];
float x1650 = -1.0f * x1649;
double x1651 = (double)x1650;
double x1652 = exp(x1651);
float x1653 = (float)x1652;
float x1654 = x1653 + 1.0f;
float x1655 = 1.0f / x1654;
x1647[x1648] = x1655;

}
float* x1659 = (float*)myMalloc(150 * sizeof(float));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0f;

}
float** x1664 = (float**)myMalloc(2 * sizeof(float*));
x1664[0] = x1647;
x1664[1] = x1659;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1143 = 0;
float* x1144 = (float*)myMalloc(150 * sizeof(float));
for(int x1145=0; x1145 < 150; x1145++) {
float x1146 = 0.0f;
for(int x1147=0; x1147 < 300; x1147++) {
int32_t x1148 = x1143;
float x1149 = x77[x1148];
float x1150 = x556[x1147];
float x1151 = x1149 * x1150;
x1146 += x1151;
x1143 += 1;

}
float x1156 = x1146;
x1144[x1145] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float* x1165 = (float*)myMalloc(150 * sizeof(float));
for(int x1166=0; x1166 < 150; x1166++) {
float x1167 = x1144[x1166];
float x1168 = x85[x1166];
float x1169 = x1167 + x1168;
x1165[x1166] = x1169;

}
float* x1173 = (float*)myMalloc(150 * sizeof(float));
for(int x1174=0; x1174 < 150; x1174++) {
x1173[x1174] = 0.0f;

}
float* x1178 = (float*)myMalloc(150 * sizeof(float));
for(int x1179=0; x1179 < 150; x1179++) {
float x1180 = x1165[x1179];
double x1181 = (double)x1180;
double x1182 = tanh(x1181);
float x1183 = (float)x1182;
x1178[x1179] = x1183;

}
float* x1187 = (float*)myMalloc(150 * sizeof(float));
for(int x1188=0; x1188 < 150; x1188++) {
x1187[x1188] = 0.0f;

}
float** x1192 = (float**)myMalloc(2 * sizeof(float*));
x1192[0] = x1178;
x1192[1] = x1187;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1192);
// backpropagate tanh
for(int x1197=0; x1197 < 150; x1197++) {
float x1198 = x1173[x1197];
float x1199 = x1178[x1197];
float x1202 = x1187[x1197];
float x1200 = x1199 * x1199;
float x1201 = 1.0f - x1200;
float x1203 = x1201 * x1202;
float x1204 = x1198 + x1203;
x1173[x1197] = x1204;

}
// backpropagate +
for(int x1209=0; x1209 < 150; x1209++) {
float x1210 = x1160[x1209];
float x1211 = x1173[x1209];
float x1212 = x1210 + x1211;
x1160[x1209] = x1212;

}
for(int x1216=0; x1216 < 150; x1216++) {
float x1217 = x231[x1216];
float x1218 = x1173[x1216];
float x1219 = x1217 + x1218;
x231[x1216] = x1219;

}
// add_cartesian
int32_t x1224 = 0;
for(int x1225=0; x1225 < 150; x1225++) {
for(int x1226=0; x1226 < 300; x1226++) {
int32_t x1227 = x1224;
int32_t x1228 = x1227 + x1226;
float x1229 = x226[x1228];
float x1230 = x556[x1226];
float x1231 = x1160[x1225];
float x1232 = x1230 * x1231;
float x1233 = x1229 + x1232;
x226[x1228] = x1233;

}
x1224 += 300;

}
int32_t x1240 = 0;
for(int x1241=0; x1241 < 150; x1241++) {
for(int x1242=0; x1242 < 300; x1242++) {
float x1243 = x557[x1242];
int32_t x1244 = x1240;
int32_t x1245 = x1244 + x1242;
float x1246 = x77[x1245];
float x1247 = x1160[x1241];
float x1248 = x1246 * x1247;
float x1249 = x1243 + x1248;
x557[x1242] = x1249;

}
x1240 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1258 = 0;
float* x1259 = (float*)myMalloc(150 * sizeof(float));
for(int x1260=0; x1260 < 150; x1260++) {
float x1261 = 0.0f;
for(int x1262=0; x1262 < 150; x1262++) {
int32_t x1263 = x1258;
float x1264 = x170[x1263];
float x1265 = x527[x1262];
float x1266 = x1264 * x1265;
x1261 += x1266;
x1258 += 1;

}
float x1271 = x1261;
x1259[x1260] = x1271;

}
float* x1275 = (float*)myMalloc(150 * sizeof(float));
for(int x1276=0; x1276 < 150; x1276++) {
x1275[x1276] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1281 = 0;
float* x1282 = (float*)myMalloc(150 * sizeof(float));
for(int x1283=0; x1283 < 150; x1283++) {
float x1284 = 0.0f;
for(int x1285=0; x1285 < 150; x1285++) {
int32_t x1286 = x1281;
float x1287 = x178[x1286];
float x1288 = x536[x1285];
float x1289 = x1287 * x1288;
x1284 += x1289;
x1281 += 1;

}
float x1294 = x1284;
x1282[x1283] = x1294;

}
float* x1298 = (float*)myMalloc(150 * sizeof(float));
for(int x1299=0; x1299 < 150; x1299++) {
x1298[x1299] = 0.0f;

}
float* x1303 = (float*)myMalloc(150 * sizeof(float));
for(int x1304=0; x1304 < 150; x1304++) {
float x1305 = x1259[x1304];
float x1306 = x1282[x1304];
float x1307 = x1305 + x1306;
x1303[x1304] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float* x1316 = (float*)myMalloc(150 * sizeof(float));
for(int x1317=0; x1317 < 150; x1317++) {
float x1318 = x1303[x1317];
float x1319 = x186[x1317];
float x1320 = x1318 + x1319;
x1316[x1317] = x1320;

}
float* x1324 = (float*)myMalloc(150 * sizeof(float));
for(int x1325=0; x1325 < 150; x1325++) {
x1324[x1325] = 0.0f;

}
float* x1329 = (float*)myMalloc(150 * sizeof(float));
for(int x1330=0; x1330 < 150; x1330++) {
float x1331 = x1316[x1330];
double x1332 = (double)x1331;
double x1333 = tanh(x1332);
float x1334 = (float)x1333;
x1329[x1330] = x1334;

}
float* x1338 = (float*)myMalloc(150 * sizeof(float));
for(int x1339=0; x1339 < 150; x1339++) {
x1338[x1339] = 0.0f;

}
float** x1343 = (float**)myMalloc(2 * sizeof(float*));
x1343[0] = x1329;
x1343[1] = x1338;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
for(int x702=0; x702 < 1; x702++) {
float x703 = x534[x702];
float x704 = x703 + x700;
x701[x702] = x704;

}
float* x708 = (float*)myMalloc(1 * sizeof(float));
for(int x709=0; x709 < 1; x709++) {
x708[x709] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x714 = 0;
float* x715 = (float*)myMalloc(1 * sizeof(float));
for(int x716=0; x716 < 1; x716++) {
float x717 = 0.0f;
for(int x718=0; x718 < 5; x718++) {
int32_t x719 = x714;
float x720 = x688[x719];
float x721 = x540[x718];
float x722 = x720 * x721;
x717 += x722;
x714 += 1;

}
float x727 = x717;
x715[x716] = x727;

}
float* x731 = (float*)myMalloc(1 * sizeof(float));
for(int x732=0; x732 < 1; x732++) {
x731[x732] = 0.0f;

}
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
float x738 = x715[x737];
double x739 = (double)x738;
double x740 = log(x739);
float x741 = (float)x740;
x736[x737] = x741;

}
float* x745 = (float*)myMalloc(1 * sizeof(float));
for(int x746=0; x746 < 1; x746++) {
x745[x746] = 0.0f;

}
float* x750 = (float*)myMalloc(1 * sizeof(float));
for(int x751=0; x751 < 1; x751++) {
float x752 = x736[x751];
float x753 = x701[0];
float x754 = x753 - x752;
x750[x751] = x754;

}
float* x758 = (float*)myMalloc(1 * sizeof(float));
for(int x759=0; x759 < 1; x759++) {
x758[x759] = 0.0f;

}
float** x763 = (float**)myMalloc(6 * sizeof(float*));
x763[0] = x750;
x763[1] = x758;
x763[2] = x608;
x763[3] = x616;
x763[4] = x592;
x763[5] = x593;
x513(x763);
// += tensor of dim 0
float x772 = x758[0];
for(int x773=0; x773 < 1; x773++) {
float x774 = x708[x773];
float x775 = x774 + x772;
x708[x773] = x775;

}
float x779 = x758[0];
for(int x780=0; x780 < 1; x780++) {
float x781 = x745[x780];
float x782 = x781 - x779;
x745[x780] = x782;

}
for(int x786=0; x786 < 1; x786++) {
float x787 = x731[0];
float x788 = x745[0];
float x789 = x715[0];
float x790 = x788 / x789;
float x791 = x787 + x790;
x731[0] = x791;

}
float x795 = x731[0];
// Generate code for addMul
for(int x797=0; x797 < 5; x797++) {
float x798 = x695[x797];
float x799 = x540[x797];
float x800 = x795 * x799;
float x801 = x798 + x800;
x695[x797] = x801;

}
float x805 = x731[0];
// Generate code for addMul
for(int x807=0; x807 < 5; x807++) {
float x808 = x547[x807];
float x809 = x688[x807];
float x810 = x805 * x809;
float x811 = x808 + x810;
x547[x807] = x811;

}
// backpropagate +
// += tensor of dim 0
float x817 = x708[0];
for(int x818=0; x818 < 1; x818++) {
float x819 = x526[x818];
float x820 = x819 + x817;
x526[x818] = x820;

}
// += tensor of dim 0
float x825 = x708[0];
for(int x826=0; x826 < 1; x826++) {
float x827 = x535[x826];
float x828 = x827 + x825;
x535[x826] = x828;

}
for(int x832=0; x832 < 5; x832++) {
float x833 = x666[x832];
float x834 = x695[x832];
float x835 = x680[0];
float x836 = x834 / x835;
float x837 = x833 + x836;
x666[x832] = x837;

}
for(int x841=0; x841 < 5; x841++) {
float x842 = x682[0];
float x843 = x657[x841];
float x844 = x695[x841];
float x846 = x680[0];
float x845 = x843 * x844;
float x847 = x846 * x846;
float x848 = x845 / x847;
float x849 = x842 - x848;
x682[0] = x849;

}
// += tensor of dim 0
float x854 = x682[0];
for(int x855=0; x855 < 5; x855++) {
float x856 = x666[x855];
float x857 = x856 + x854;
x666[x855] = x857;

}
// backpropage exp
for(int x862=0; x862 < 5; x862++) {
float x863 = x652[x862];
float x864 = x657[x862];
float x865 = x666[x862];
float x866 = x864 * x865;
float x867 = x863 + x866;
x652[x862] = x867;

}
// backpropagate +
for(int x872=0; x872 < 5; x872++) {
float x873 = x639[x872];
float x874 = x652[x872];
float x875 = x873 + x874;
x639[x872] = x875;

}
for(int x879=0; x879 < 5; x879++) {
float x880 = x311[x879];
float x881 = x652[x879];
float x882 = x880 + x881;
x311[x879] = x882;

}
// add_cartesian
int32_t x887 = 0;
for(int x888=0; x888 < 5; x888++) {
for(int x889=0; x889 < 150; x889++) {
int32_t x890 = x887;
int32_t x891 = x890 + x889;
float x892 = x306[x891];
float x893 = x608[x889];
float x894 = x639[x888];
float x895 = x893 * x894;
float x896 = x892 + x895;
x306[x891] = x896;

}
x887 += 150;

}
int32_t x903 = 0;
for(int x904=0; x904 < 5; x904++) {
for(int x905=0; x905 < 150; x905++) {
float x906 = x616[x905];
int32_t x907 = x903;
int32_t x908 = x907 + x905;
float x909 = x191[x908];
float x910 = x639[x904];
float x911 = x909 * x910;
float x912 = x906 + x911;
x616[x905] = x912;

}
x903 += 150;

}
for(int x919=0; x919 < 150; x919++) {
float x920 = x581[x919];
float x921 = x594[x919];
float x922 = x616[x919];
float x923 = x921 * x922;
float x924 = x920 + x923;
x581[x919] = x924;

}
for(int x928=0; x928 < 150; x928++) {
float x929 = x603[x928];
float x930 = x580[x928];
float x931 = x616[x928];
float x932 = x930 * x931;
float x933 = x929 + x932;
x603[x928] = x933;

}
// backpropagate tanh
for(int x938=0; x938 < 150; x938++) {
float x939 = x593[x938];
float x940 = x594[x938];
float x943 = x603[x938];
float x941 = x940 * x940;
float x942 = 1.0f - x941;
float x944 = x942 * x943;
float x945 = x939 + x944;
x593[x938] = x945;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x950 = (float*)myMalloc(150 * sizeof(float));
for(int x951=0; x951 < 150; x951++) {
float x952 = x562[x951];
float x953 = x586[x951];
float x954 = x952 * x953;
x950[x951] = x954;

}
float* x958 = (float*)myMalloc(150 * sizeof(float));
for(int x959=0; x959 < 150; x959++) {
x958[x959] = 0.0f;

}
float** x963 = (float**)myMalloc(2 * sizeof(float*));
x963[0] = x950;
x963[1] = x958;
x590(x963);
for(int x967=0; x967 < 150; x967++) {
float x968 = x563[x967];
float x969 = x586[x967];
float x970 = x958[x967];
float x971 = x969 * x970;
float x972 = x968 + x971;
x563[x967] = x972;

}
for(int x976=0; x976 < 150; x976++) {
float x977 = x587[x976];
float x978 = x562[x976];
float x979 = x958[x976];
float x980 = x978 * x979;
float x981 = x977 + x980;
x587[x976] = x981;

}
} else {
float* x986 = (float*)myMalloc(150 * sizeof(float));
for(int x987=0; x987 < 150; x987++) {
float x988 = x562[x987];
float x989 = x586[x987];
float x990 = x988 * x989;
x986[x987] = x990;

}
float* x994 = (float*)myMalloc(150 * sizeof(float));
for(int x995=0; x995 < 150; x995++) {
x994[x995] = 0.0f;

}
float* x999 = (float*)myMalloc(150 * sizeof(float));
for(int x1000=0; x1000 < 150; x1000++) {
float x1001 = x568[x1000];
float x1002 = x529[x1000];
float x1003 = x1001 * x1002;
x999[x1000] = x1003;

}
float* x1007 = (float*)myMalloc(150 * sizeof(float));
for(int x1008=0; x1008 < 150; x1008++) {
x1007[x1008] = 0.0f;

}
float* x1012 = (float*)myMalloc(150 * sizeof(float));
for(int x1013=0; x1013 < 150; x1013++) {
float x1014 = x986[x1013];
float x1015 = x999[x1013];
float x1016 = x1014 + x1015;
x1012[x1013] = x1016;

}
float* x1020 = (float*)myMalloc(150 * sizeof(float));
for(int x1021=0; x1021 < 150; x1021++) {
x1020[x1021] = 0.0f;

}
float* x1025 = (float*)myMalloc(150 * sizeof(float));
for(int x1026=0; x1026 < 150; x1026++) {
float x1027 = x574[x1026];
float x1028 = x538[x1026];
float x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
float* x1033 = (float*)myMalloc(150 * sizeof(float));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0f;

}
float* x1038 = (float*)myMalloc(150 * sizeof(float));
for(int x1039=0; x1039 < 150; x1039++) {
float x1040 = x1012[x1039];
float x1041 = x1025[x1039];
float x1042 = x1040 + x1041;
x1038[x1039] = x1042;

}
float* x1046 = (float*)myMalloc(150 * sizeof(float));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0f;

}
float** x1051 = (float**)myMalloc(2 * sizeof(float*));
x1051[0] = x1038;
x1051[1] = x1046;
x590(x1051);
// backpropagate +
for(int x1056=0; x1056 < 150; x1056++) {
float x1057 = x1020[x1056];
float x1058 = x1046[x1056];
float x1059 = x1057 + x1058;
x1020[x1056] = x1059;

}
for(int x1063=0; x1063 < 150; x1063++) {
float x1064 = x1033[x1063];
float x1065 = x1046[x1063];
float x1066 = x1064 + x1065;
x1033[x1063] = x1066;

}
for(int x1070=0; x1070 < 150; x1070++) {
float x1071 = x575[x1070];
float x1072 = x538[x1070];
float x1073 = x1033[x1070];
float x1074 = x1072 * x1073;
float x1075 = x1071 + x1074;
x575[x1070] = x1075;

}
for(int x1079=0; x1079 < 150; x1079++) {
float x1080 = x539[x1079];
float x1081 = x574[x1079];
float x1082 = x1033[x1079];
float x1083 = x1081 * x1082;
float x1084 = x1080 + x1083;
x539[x1079] = x1084;

}
// backpropagate +
for(int x1089=0; x1089 < 150; x1089++) {
float x1090 = x994[x1089];
float x1091 = x1020[x1089];
float x1092 = x1090 + x1091;
x994[x1089] = x1092;

}
for(int x1096=0; x1096 < 150; x1096++) {
float x1097 = x1007[x1096];
float x1098 = x1020[x1096];
float x1099 = x1097 + x1098;
x1007[x1096] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x569[x1103];
float x1105 = x529[x1103];
float x1106 = x1007[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x569[x1103] = x1108;

}
for(int x1112=0; x1112 < 150; x1112++) {
float x1113 = x530[x1112];
float x1114 = x568[x1112];
float x1115 = x1007[x1112];
float x1116 = x1114 * x1115;
float x1117 = x1113 + x1116;
x530[x1112] = x1117;

}
for(int x1121=0; x1121 < 150; x1121++) {
float x1122 = x563[x1121];
float x1123 = x586[x1121];
float x1124 = x994[x1121];
float x1125 = x1123 * x1124;
float x1126 = x1122 + x1125;
x563[x1121] = x1126;

}
for(int x1130=0; x1130 < 150; x1130++) {
float x1131 = x587[x1130];
float x1132 = x562[x1130];
float x1133 = x994[x1130];
float x1134 = x1132 * x1133;
float x1135 = x1131 + x1134;
x587[x1130] = x1135;

}
}
};
x584(x1343);
// backpropagate tanh
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1324[x1348];
float x1350 = x1329[x1348];
float x1353 = x1338[x1348];
float x1351 = x1350 * x1350;
float x1352 = 1.0f - x1351;
float x1354 = x1352 * x1353;
float x1355 = x1349 + x1354;
x1324[x1348] = x1355;

}
// backpropagate +
for(int x1360=0; x1360 < 150; x1360++) {
float x1361 = x1311[x1360];
float x1362 = x1324[x1360];
float x1363 = x1361 + x1362;
x1311[x1360] = x1363;

}
for(int x1367=0; x1367 < 150; x1367++) {
float x1368 = x301[x1367];
float x1369 = x1324[x1367];
float x1370 = x1368 + x1369;
x301[x1367] = x1370;

}
// backpropagate +
for(int x1375=0; x1375 < 150; x1375++) {
float x1376 = x1275[x1375];
float x1377 = x1311[x1375];
float x1378 = x1376 + x1377;
x1275[x1375] = x1378;

}
for(int x1382=0; x1382 < 150; x1382++) {
float x1383 = x1298[x1382];
float x1384 = x1311[x1382];
float x1385 = x1383 + x1384;
x1298[x1382] = x1385;

}
// add_cartesian
int32_t x1390 = 0;
for(int x1391=0; x1391 < 150; x1391++) {
for(int x1392=0; x1392 < 150; x1392++) {
int32_t x1393 = x1390;
int32_t x1394 = x1393 + x1392;
float x1395 = x296[x1394];
float x1396 = x536[x1392];
float x1397 = x1298[x1391];
float x1398 = x1396 * x1397;
float x1399 = x1395 + x1398;
x296[x1394] = x1399;

}
x1390 += 150;

}
int32_t x1406 = 0;
for(int x1407=0; x1407 < 150; x1407++) {
for(int x1408=0; x1408 < 150; x1408++) {
float x1409 = x537[x1408];
int32_t x1410 = x1406;
int32_t x1411 = x1410 + x1408;
float x1412 = x178[x1411];
float x1413 = x1298[x1407];
float x1414 = x1412 * x1413;
float x1415 = x1409 + x1414;
x537[x1408] = x1415;

}
x1406 += 150;

}
// add_cartesian
int32_t x1423 = 0;
for(int x1424=0; x1424 < 150; x1424++) {
for(int x1425=0; x1425 < 150; x1425++) {
int32_t x1426 = x1423;
int32_t x1427 = x1426 + x1425;
float x1428 = x291[x1427];
float x1429 = x527[x1425];
float x1430 = x1275[x1424];
float x1431 = x1429 * x1430;
float x1432 = x1428 + x1431;
x291[x1427] = x1432;

}
x1423 += 150;

}
int32_t x1439 = 0;
for(int x1440=0; x1440 < 150; x1440++) {
for(int x1441=0; x1441 < 150; x1441++) {
float x1442 = x528[x1441];
int32_t x1443 = x1439;
int32_t x1444 = x1443 + x1441;
float x1445 = x170[x1444];
float x1446 = x1275[x1440];
float x1447 = x1445 * x1446;
float x1448 = x1442 + x1447;
x528[x1441] = x1448;

}
x1439 += 150;

}
}
};
x578(x1664);
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1642[x1668];
float x1670 = x1647[x1668];
float x1673 = x1659[x1668];
float x1671 = 1.0f - x1670;
float x1672 = x1671 * x1670;
float x1674 = x1672 * x1673;
float x1675 = x1669 + x1674;
x1642[x1668] = x1675;

}
// backpropagate +
for(int x1680=0; x1680 < 150; x1680++) {
float x1681 = x1629[x1680];
float x1682 = x1642[x1680];
float x1683 = x1681 + x1682;
x1629[x1680] = x1683;

}
for(int x1687=0; x1687 < 150; x1687++) {
float x1688 = x286[x1687];
float x1689 = x1642[x1687];
float x1690 = x1688 + x1689;
x286[x1687] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
float x1696 = x1593[x1695];
float x1697 = x1629[x1695];
float x1698 = x1696 + x1697;
x1593[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
float x1703 = x1616[x1702];
float x1704 = x1629[x1702];
float x1705 = x1703 + x1704;
x1616[x1702] = x1705;

}
// add_cartesian
int32_t x1710 = 0;
for(int x1711=0; x1711 < 150; x1711++) {
for(int x1712=0; x1712 < 150; x1712++) {
int32_t x1713 = x1710;
int32_t x1714 = x1713 + x1712;
float x1715 = x281[x1714];
float x1716 = x536[x1712];
float x1717 = x1616[x1711];
float x1718 = x1716 * x1717;
float x1719 = x1715 + x1718;
x281[x1714] = x1719;

}
x1710 += 150;

}
int32_t x1726 = 0;
for(int x1727=0; x1727 < 150; x1727++) {
for(int x1728=0; x1728 < 150; x1728++) {
float x1729 = x537[x1728];
int32_t x1730 = x1726;
int32_t x1731 = x1730 + x1728;
float x1732 = x157[x1731];
float x1733 = x1616[x1727];
float x1734 = x1732 * x1733;
float x1735 = x1729 + x1734;
x537[x1728] = x1735;

}
x1726 += 150;

}
// add_cartesian
int32_t x1743 = 0;
for(int x1744=0; x1744 < 150; x1744++) {
for(int x1745=0; x1745 < 150; x1745++) {
int32_t x1746 = x1743;
int32_t x1747 = x1746 + x1745;
float x1748 = x276[x1747];
float x1749 = x527[x1745];
float x1750 = x1593[x1744];
float x1751 = x1749 * x1750;
float x1752 = x1748 + x1751;
x276[x1747] = x1752;

}
x1743 += 150;

}
int32_t x1759 = 0;
for(int x1760=0; x1760 < 150; x1760++) {
for(int x1761=0; x1761 < 150; x1761++) {
float x1762 = x528[x1761];
int32_t x1763 = x1759;
int32_t x1764 = x1763 + x1761;
float x1765 = x149[x1764];
float x1766 = x1593[x1760];
float x1767 = x1765 * x1766;
float x1768 = x1762 + x1767;
x528[x1761] = x1768;

}
x1759 += 150;

}
}
};
x572(x1872);
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1850[x1876];
float x1878 = x1855[x1876];
float x1881 = x1867[x1876];
float x1879 = 1.0f - x1878;
float x1880 = x1879 * x1878;
float x1882 = x1880 * x1881;
float x1883 = x1877 + x1882;
x1850[x1876] = x1883;

}
// backpropagate +
for(int x1888=0; x1888 < 150; x1888++) {
float x1889 = x1837[x1888];
float x1890 = x1850[x1888];
float x1891 = x1889 + x1890;
x1837[x1888] = x1891;

}
for(int x1895=0; x1895 < 150; x1895++) {
float x1896 = x271[x1895];
float x1897 = x1850[x1895];
float x1898 = x1896 + x1897;
x271[x1895] = x1898;

}
// backpropagate +
for(int x1903=0; x1903 < 150; x1903++) {
float x1904 = x1801[x1903];
float x1905 = x1837[x1903];
float x1906 = x1904 + x1905;
x1801[x1903] = x1906;

}
for(int x1910=0; x1910 < 150; x1910++) {
float x1911 = x1824[x1910];
float x1912 = x1837[x1910];
float x1913 = x1911 + x1912;
x1824[x1910] = x1913;

}
// add_cartesian
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
int32_t x1921 = x1918;
int32_t x1922 = x1921 + x1920;
float x1923 = x266[x1922];
float x1924 = x536[x1920];
float x1925 = x1824[x1919];
float x1926 = x1924 * x1925;
float x1927 = x1923 + x1926;
x266[x1922] = x1927;

}
x1918 += 150;

}
int32_t x1934 = 0;
for(int x1935=0; x1935 < 150; x1935++) {
for(int x1936=0; x1936 < 150; x1936++) {
float x1937 = x537[x1936];
int32_t x1938 = x1934;
int32_t x1939 = x1938 + x1936;
float x1940 = x136[x1939];
float x1941 = x1824[x1935];
float x1942 = x1940 * x1941;
float x1943 = x1937 + x1942;
x537[x1936] = x1943;

}
x1934 += 150;

}
// add_cartesian
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
int32_t x1954 = x1951;
int32_t x1955 = x1954 + x1953;
float x1956 = x261[x1955];
float x1957 = x527[x1953];
float x1958 = x1801[x1952];
float x1959 = x1957 * x1958;
float x1960 = x1956 + x1959;
x261[x1955] = x1960;

}
x1951 += 150;

}
int32_t x1967 = 0;
for(int x1968=0; x1968 < 150; x1968++) {
for(int x1969=0; x1969 < 150; x1969++) {
float x1970 = x528[x1969];
int32_t x1971 = x1967;
int32_t x1972 = x1971 + x1969;
float x1973 = x128[x1972];
float x1974 = x1801[x1968];
float x1975 = x1973 * x1974;
float x1976 = x1970 + x1975;
x528[x1969] = x1976;

}
x1967 += 150;

}
}
};
x566(x2080);
for(int x2084=0; x2084 < 150; x2084++) {
float x2085 = x2058[x2084];
float x2086 = x2063[x2084];
float x2089 = x2075[x2084];
float x2087 = 1.0f - x2086;
float x2088 = x2087 * x2086;
float x2090 = x2088 * x2089;
float x2091 = x2085 + x2090;
x2058[x2084] = x2091;

}
// backpropagate +
for(int x2096=0; x2096 < 150; x2096++) {
float x2097 = x2045[x2096];
float x2098 = x2058[x2096];
float x2099 = x2097 + x2098;
x2045[x2096] = x2099;

}
for(int x2103=0; x2103 < 150; x2103++) {
float x2104 = x271[x2103];
float x2105 = x2058[x2103];
float x2106 = x2104 + x2105;
x271[x2103] = x2106;

}
// backpropagate +
for(int x2111=0; x2111 < 150; x2111++) {
float x2112 = x2009[x2111];
float x2113 = x2045[x2111];
float x2114 = x2112 + x2113;
x2009[x2111] = x2114;

}
for(int x2118=0; x2118 < 150; x2118++) {
float x2119 = x2032[x2118];
float x2120 = x2045[x2118];
float x2121 = x2119 + x2120;
x2032[x2118] = x2121;

}
// add_cartesian
int32_t x2126 = 0;
for(int x2127=0; x2127 < 150; x2127++) {
for(int x2128=0; x2128 < 150; x2128++) {
int32_t x2129 = x2126;
int32_t x2130 = x2129 + x2128;
float x2131 = x256[x2130];
float x2132 = x536[x2128];
float x2133 = x2032[x2127];
float x2134 = x2132 * x2133;
float x2135 = x2131 + x2134;
x256[x2130] = x2135;

}
x2126 += 150;

}
int32_t x2142 = 0;
for(int x2143=0; x2143 < 150; x2143++) {
for(int x2144=0; x2144 < 150; x2144++) {
float x2145 = x537[x2144];
int32_t x2146 = x2142;
int32_t x2147 = x2146 + x2144;
float x2148 = x120[x2147];
float x2149 = x2032[x2143];
float x2150 = x2148 * x2149;
float x2151 = x2145 + x2150;
x537[x2144] = x2151;

}
x2142 += 150;

}
// add_cartesian
int32_t x2159 = 0;
for(int x2160=0; x2160 < 150; x2160++) {
for(int x2161=0; x2161 < 150; x2161++) {
int32_t x2162 = x2159;
int32_t x2163 = x2162 + x2161;
float x2164 = x251[x2163];
float x2165 = x527[x2161];
float x2166 = x2009[x2160];
float x2167 = x2165 * x2166;
float x2168 = x2164 + x2167;
x251[x2163] = x2168;

}
x2159 += 150;

}
int32_t x2175 = 0;
for(int x2176=0; x2176 < 150; x2176++) {
for(int x2177=0; x2177 < 150; x2177++) {
float x2178 = x528[x2177];
int32_t x2179 = x2175;
int32_t x2180 = x2179 + x2177;
float x2181 = x112[x2180];
float x2182 = x2009[x2176];
float x2183 = x2181 * x2182;
float x2184 = x2178 + x2183;
x528[x2177] = x2184;

}
x2175 += 150;

}
}
};
x560(x2400);
for(int x2404=0; x2404 < 150; x2404++) {
float x2405 = x2378[x2404];
float x2406 = x2383[x2404];
float x2409 = x2395[x2404];
float x2407 = 1.0f - x2406;
float x2408 = x2407 * x2406;
float x2410 = x2408 * x2409;
float x2411 = x2405 + x2410;
x2378[x2404] = x2411;

}
// backpropagate +
for(int x2416=0; x2416 < 150; x2416++) {
float x2417 = x2365[x2416];
float x2418 = x2378[x2416];
float x2419 = x2417 + x2418;
x2365[x2416] = x2419;

}
for(int x2423=0; x2423 < 150; x2423++) {
float x2424 = x246[x2423];
float x2425 = x2378[x2423];
float x2426 = x2424 + x2425;
x246[x2423] = x2426;

}
// backpropagate +
for(int x2431=0; x2431 < 150; x2431++) {
float x2432 = x2329[x2431];
float x2433 = x2365[x2431];
float x2434 = x2432 + x2433;
x2329[x2431] = x2434;

}
for(int x2438=0; x2438 < 150; x2438++) {
float x2439 = x2352[x2438];
float x2440 = x2365[x2438];
float x2441 = x2439 + x2440;
x2352[x2438] = x2441;

}
// add_cartesian
int32_t x2446 = 0;
for(int x2447=0; x2447 < 150; x2447++) {
for(int x2448=0; x2448 < 150; x2448++) {
int32_t x2449 = x2446;
int32_t x2450 = x2449 + x2448;
float x2451 = x241[x2450];
float x2452 = x536[x2448];
float x2453 = x2352[x2447];
float x2454 = x2452 * x2453;
float x2455 = x2451 + x2454;
x241[x2450] = x2455;

}
x2446 += 150;

}
int32_t x2462 = 0;
for(int x2463=0; x2463 < 150; x2463++) {
for(int x2464=0; x2464 < 150; x2464++) {
float x2465 = x537[x2464];
int32_t x2466 = x2462;
int32_t x2467 = x2466 + x2464;
float x2468 = x99[x2467];
float x2469 = x2352[x2463];
float x2470 = x2468 * x2469;
float x2471 = x2465 + x2470;
x537[x2464] = x2471;

}
x2462 += 150;

}
// add_cartesian
int32_t x2479 = 0;
for(int x2480=0; x2480 < 150; x2480++) {
for(int x2481=0; x2481 < 150; x2481++) {
int32_t x2482 = x2479;
int32_t x2483 = x2482 + x2481;
float x2484 = x236[x2483];
float x2485 = x527[x2481];
float x2486 = x2329[x2480];
float x2487 = x2485 * x2486;
float x2488 = x2484 + x2487;
x236[x2483] = x2488;

}
x2479 += 150;

}
int32_t x2495 = 0;
for(int x2496=0; x2496 < 150; x2496++) {
for(int x2497=0; x2497 < 150; x2497++) {
float x2498 = x528[x2497];
int32_t x2499 = x2495;
int32_t x2500 = x2499 + x2497;
float x2501 = x90[x2500];
float x2502 = x2329[x2496];
float x2503 = x2501 * x2502;
float x2504 = x2498 + x2503;
x528[x2497] = x2504;

}
x2495 += 150;

}
}
};
x554(x2526);
}
};
x508(x531,x532,x2533);
};
x508(x522,x523,x2543);
} else {
float** x2553 = (float**)myMalloc(6 * sizeof(float*));
x2553[0] = x515;
x2553[1] = x516;
x2553[2] = x517;
x2553[3] = x518;
x2553[4] = x519;
x2553[5] = x520;
function<void(float**)> x513 = x510;
x513(x2553);
}
};
float* x462 = (float*)myMalloc(1 * sizeof(float));
for(int x464=0; x464 < 1; x464++) {
x462[x464] = 0.0f;

}
float* x468 = (float*)myMalloc(1 * sizeof(float));
for(int x469=0; x469 < 1; x469++) {
x468[x469] = 0.0f;

}
float* x473 = (float*)myMalloc(1 * sizeof(float));
for(int x474=0; x474 < 1; x474++) {
x473[x474] = 0.0f;

}
float* x478 = (float*)myMalloc(1 * sizeof(float));
for(int x479=0; x479 < 1; x479++) {
x478[x479] = 0.0f;

}
float* x483 = (float*)myMalloc(1 * sizeof(float));
for(int x484=0; x484 < 1; x484++) {
x483[x484] = 0.0f;

}
float* x488 = (float*)myMalloc(150 * sizeof(float));
for(int x489=0; x489 < 150; x489++) {
x488[x489] = 0.0f;

}
float* x493 = (float*)myMalloc(150 * sizeof(float));
for(int x494=0; x494 < 150; x494++) {
x493[x494] = 0.0f;

}
float* x498 = (float*)myMalloc(150 * sizeof(float));
for(int x499=0; x499 < 150; x499++) {
x498[x499] = 0.0f;

}
float* x503 = (float*)myMalloc(150 * sizeof(float));
for(int x504=0; x504 < 150; x504++) {
x503[x504] = 0.0f;

}
float** x2583 = (float**)myMalloc(6 * sizeof(float*));
x2583[0] = x478;
x2583[1] = x483;
x2583[2] = x488;
x2583[3] = x493;
x2583[4] = x498;
x2583[5] = x503;
function<void(float**)> x2564 = [&](float** x2565) {
float* x2566 = x2565[0];
float* x2567 = x2565[1];
float* x2568 = x2565[2];
float* x2569 = x2565[3];
float* x2570 = x2565[4];
float* x2571 = x2565[5];
for(int x2572=0; x2572 < 1; x2572++) {
float x2573 = x2567[x2572];
x2567[x2572] = 1.0f;

}
for(int x2577=0; x2577 < 1; x2577++) {
float x2578 = x2566[x2577];
x473[x2577] = x2578;

}
};
x508(0,x2564,x2583);
float x2592 = x473[0];
float x2593 = x451;
float x2594 = (float)x452;
float x2595 = x2593 * x2594;
int32_t x2596 = x452 + 1;
float x2597 = (float)x2596;
float x2598 = x2595 / x2597;
float x2599 = x2592 / x2597;
float x2600 = x2598 + x2599;
x451 = x2600;
for(int x2602=0; x2602 < 45000; x2602++) {
float x2603 = x206[x2602];
bool x2604 = x2603 > 5.0f;
if (x2604) {
x206[x2602] = 5.0f;
} else {
}
float x2608 = x206[x2602];
bool x2609 = x2608 < -5.0f;
if (x2609) {
x206[x2602] = -5.0f;
} else {
}

}
float* x2615 = (float*)myMalloc(45000 * sizeof(float));
for(int x2616=0; x2616 < 45000; x2616++) {
float x2617 = x206[x2616];
float x2618 = x206[x2616];
float x2619 = x2617 * x2618;
x2615[x2616] = x2619;

}
for(int x2623=0; x2623 < 45000; x2623++) {
float x2624 = x336[x2623];
float x2625 = x2615[x2623];
float x2626 = x2624 + x2625;
x336[x2623] = x2626;

}
float* x2630 = (float*)myMalloc(45000 * sizeof(float));
for(int x2631=0; x2631 < 45000; x2631++) {
float x2632 = x206[x2631];
float x2633 = x2632 * 0.05f;
x2630[x2631] = x2633;

}
float* x2637 = (float*)myMalloc(45000 * sizeof(float));
for(int x2638=0; x2638 < 45000; x2638++) {
float x2639 = x336[x2638];
float x2640 = x2639 + 1.0E-8f;
x2637[x2638] = x2640;

}
float* x2644 = (float*)myMalloc(45000 * sizeof(float));
for(int x2645=0; x2645 < 45000; x2645++) {
float x2646 = x2637[x2645];
double x2647 = (double)x2646;
double x2648 = sqrt(x2647);
float x2649 = (float)x2648;
x2644[x2645] = x2649;

}
float* x2653 = (float*)myMalloc(45000 * sizeof(float));
for(int x2654=0; x2654 < 45000; x2654++) {
float x2655 = x2630[x2654];
float x2656 = x2644[x2654];
float x2657 = x2655 / x2656;
x2653[x2654] = x2657;

}
for(int x2661=0; x2661 < 45000; x2661++) {
float x2662 = x49[x2661];
float x2663 = x2653[x2661];
float x2664 = x2662 - x2663;
x49[x2661] = x2664;

}
for(int x2668=0; x2668 < 45000; x2668++) {
float x2669 = x206[x2668];
x206[x2668] = 0.0f;

}
for(int x2673=0; x2673 < 150; x2673++) {
float x2674 = x211[x2673];
bool x2675 = x2674 > 5.0f;
if (x2675) {
x211[x2673] = 5.0f;
} else {
}
float x2679 = x211[x2673];
bool x2680 = x2679 < -5.0f;
if (x2680) {
x211[x2673] = -5.0f;
} else {
}

}
float* x2686 = (float*)myMalloc(150 * sizeof(float));
for(int x2687=0; x2687 < 150; x2687++) {
float x2688 = x211[x2687];
float x2689 = x211[x2687];
float x2690 = x2688 * x2689;
x2686[x2687] = x2690;

}
for(int x2694=0; x2694 < 150; x2694++) {
float x2695 = x341[x2694];
float x2696 = x2686[x2694];
float x2697 = x2695 + x2696;
x341[x2694] = x2697;

}
float* x2701 = (float*)myMalloc(150 * sizeof(float));
for(int x2702=0; x2702 < 150; x2702++) {
float x2703 = x211[x2702];
float x2704 = x2703 * 0.05f;
x2701[x2702] = x2704;

}
float* x2708 = (float*)myMalloc(150 * sizeof(float));
for(int x2709=0; x2709 < 150; x2709++) {
float x2710 = x341[x2709];
float x2711 = x2710 + 1.0E-8f;
x2708[x2709] = x2711;

}
float* x2715 = (float*)myMalloc(150 * sizeof(float));
for(int x2716=0; x2716 < 150; x2716++) {
float x2717 = x2708[x2716];
double x2718 = (double)x2717;
double x2719 = sqrt(x2718);
float x2720 = (float)x2719;
x2715[x2716] = x2720;

}
float* x2724 = (float*)myMalloc(150 * sizeof(float));
for(int x2725=0; x2725 < 150; x2725++) {
float x2726 = x2701[x2725];
float x2727 = x2715[x2725];
float x2728 = x2726 / x2727;
x2724[x2725] = x2728;

}
for(int x2732=0; x2732 < 150; x2732++) {
float x2733 = x58[x2732];
float x2734 = x2724[x2732];
float x2735 = x2733 - x2734;
x58[x2732] = x2735;

}
for(int x2739=0; x2739 < 150; x2739++) {
float x2740 = x211[x2739];
x211[x2739] = 0.0f;

}
for(int x2744=0; x2744 < 45000; x2744++) {
float x2745 = x216[x2744];
bool x2746 = x2745 > 5.0f;
if (x2746) {
x216[x2744] = 5.0f;
} else {
}
float x2750 = x216[x2744];
bool x2751 = x2750 < -5.0f;
if (x2751) {
x216[x2744] = -5.0f;
} else {
}

}
float* x2757 = (float*)myMalloc(45000 * sizeof(float));
for(int x2758=0; x2758 < 45000; x2758++) {
float x2759 = x216[x2758];
float x2760 = x216[x2758];
float x2761 = x2759 * x2760;
x2757[x2758] = x2761;

}
for(int x2765=0; x2765 < 45000; x2765++) {
float x2766 = x346[x2765];
float x2767 = x2757[x2765];
float x2768 = x2766 + x2767;
x346[x2765] = x2768;

}
float* x2772 = (float*)myMalloc(45000 * sizeof(float));
for(int x2773=0; x2773 < 45000; x2773++) {
float x2774 = x216[x2773];
float x2775 = x2774 * 0.05f;
x2772[x2773] = x2775;

}
float* x2779 = (float*)myMalloc(45000 * sizeof(float));
for(int x2780=0; x2780 < 45000; x2780++) {
float x2781 = x346[x2780];
float x2782 = x2781 + 1.0E-8f;
x2779[x2780] = x2782;

}
float* x2786 = (float*)myMalloc(45000 * sizeof(float));
for(int x2787=0; x2787 < 45000; x2787++) {
float x2788 = x2779[x2787];
double x2789 = (double)x2788;
double x2790 = sqrt(x2789);
float x2791 = (float)x2790;
x2786[x2787] = x2791;

}
float* x2795 = (float*)myMalloc(45000 * sizeof(float));
for(int x2796=0; x2796 < 45000; x2796++) {
float x2797 = x2772[x2796];
float x2798 = x2786[x2796];
float x2799 = x2797 / x2798;
x2795[x2796] = x2799;

}
for(int x2803=0; x2803 < 45000; x2803++) {
float x2804 = x64[x2803];
float x2805 = x2795[x2803];
float x2806 = x2804 - x2805;
x64[x2803] = x2806;

}
for(int x2810=0; x2810 < 45000; x2810++) {
float x2811 = x216[x2810];
x216[x2810] = 0.0f;

}
for(int x2815=0; x2815 < 150; x2815++) {
float x2816 = x221[x2815];
bool x2817 = x2816 > 5.0f;
if (x2817) {
x221[x2815] = 5.0f;
} else {
}
float x2821 = x221[x2815];
bool x2822 = x2821 < -5.0f;
if (x2822) {
x221[x2815] = -5.0f;
} else {
}

}
float* x2828 = (float*)myMalloc(150 * sizeof(float));
for(int x2829=0; x2829 < 150; x2829++) {
float x2830 = x221[x2829];
float x2831 = x221[x2829];
float x2832 = x2830 * x2831;
x2828[x2829] = x2832;

}
for(int x2836=0; x2836 < 150; x2836++) {
float x2837 = x351[x2836];
float x2838 = x2828[x2836];
float x2839 = x2837 + x2838;
x351[x2836] = x2839;

}
float* x2843 = (float*)myMalloc(150 * sizeof(float));
for(int x2844=0; x2844 < 150; x2844++) {
float x2845 = x221[x2844];
float x2846 = x2845 * 0.05f;
x2843[x2844] = x2846;

}
float* x2850 = (float*)myMalloc(150 * sizeof(float));
for(int x2851=0; x2851 < 150; x2851++) {
float x2852 = x351[x2851];
float x2853 = x2852 + 1.0E-8f;
x2850[x2851] = x2853;

}
float* x2857 = (float*)myMalloc(150 * sizeof(float));
for(int x2858=0; x2858 < 150; x2858++) {
float x2859 = x2850[x2858];
double x2860 = (double)x2859;
double x2861 = sqrt(x2860);
float x2862 = (float)x2861;
x2857[x2858] = x2862;

}
float* x2866 = (float*)myMalloc(150 * sizeof(float));
for(int x2867=0; x2867 < 150; x2867++) {
float x2868 = x2843[x2867];
float x2869 = x2857[x2867];
float x2870 = x2868 / x2869;
x2866[x2867] = x2870;

}
for(int x2874=0; x2874 < 150; x2874++) {
float x2875 = x72[x2874];
float x2876 = x2866[x2874];
float x2877 = x2875 - x2876;
x72[x2874] = x2877;

}
for(int x2881=0; x2881 < 150; x2881++) {
float x2882 = x221[x2881];
x221[x2881] = 0.0f;

}
for(int x2886=0; x2886 < 45000; x2886++) {
float x2887 = x226[x2886];
bool x2888 = x2887 > 5.0f;
if (x2888) {
x226[x2886] = 5.0f;
} else {
}
float x2892 = x226[x2886];
bool x2893 = x2892 < -5.0f;
if (x2893) {
x226[x2886] = -5.0f;
} else {
}

}
float* x2899 = (float*)myMalloc(45000 * sizeof(float));
for(int x2900=0; x2900 < 45000; x2900++) {
float x2901 = x226[x2900];
float x2902 = x226[x2900];
float x2903 = x2901 * x2902;
x2899[x2900] = x2903;

}
for(int x2907=0; x2907 < 45000; x2907++) {
float x2908 = x356[x2907];
float x2909 = x2899[x2907];
float x2910 = x2908 + x2909;
x356[x2907] = x2910;

}
float* x2914 = (float*)myMalloc(45000 * sizeof(float));
for(int x2915=0; x2915 < 45000; x2915++) {
float x2916 = x226[x2915];
float x2917 = x2916 * 0.05f;
x2914[x2915] = x2917;

}
float* x2921 = (float*)myMalloc(45000 * sizeof(float));
for(int x2922=0; x2922 < 45000; x2922++) {
float x2923 = x356[x2922];
float x2924 = x2923 + 1.0E-8f;
x2921[x2922] = x2924;

}
float* x2928 = (float*)myMalloc(45000 * sizeof(float));
for(int x2929=0; x2929 < 45000; x2929++) {
float x2930 = x2921[x2929];
double x2931 = (double)x2930;
double x2932 = sqrt(x2931);
float x2933 = (float)x2932;
x2928[x2929] = x2933;

}
float* x2937 = (float*)myMalloc(45000 * sizeof(float));
for(int x2938=0; x2938 < 45000; x2938++) {
float x2939 = x2914[x2938];
float x2940 = x2928[x2938];
float x2941 = x2939 / x2940;
x2937[x2938] = x2941;

}
for(int x2945=0; x2945 < 45000; x2945++) {
float x2946 = x77[x2945];
float x2947 = x2937[x2945];
float x2948 = x2946 - x2947;
x77[x2945] = x2948;

}
for(int x2952=0; x2952 < 45000; x2952++) {
float x2953 = x226[x2952];
x226[x2952] = 0.0f;

}
for(int x2957=0; x2957 < 150; x2957++) {
float x2958 = x231[x2957];
bool x2959 = x2958 > 5.0f;
if (x2959) {
x231[x2957] = 5.0f;
} else {
}
float x2963 = x231[x2957];
bool x2964 = x2963 < -5.0f;
if (x2964) {
x231[x2957] = -5.0f;
} else {
}

}
float* x2970 = (float*)myMalloc(150 * sizeof(float));
for(int x2971=0; x2971 < 150; x2971++) {
float x2972 = x231[x2971];
float x2973 = x231[x2971];
float x2974 = x2972 * x2973;
x2970[x2971] = x2974;

}
for(int x2978=0; x2978 < 150; x2978++) {
float x2979 = x361[x2978];
float x2980 = x2970[x2978];
float x2981 = x2979 + x2980;
x361[x2978] = x2981;

}
float* x2985 = (float*)myMalloc(150 * sizeof(float));
for(int x2986=0; x2986 < 150; x2986++) {
float x2987 = x231[x2986];
float x2988 = x2987 * 0.05f;
x2985[x2986] = x2988;

}
float* x2992 = (float*)myMalloc(150 * sizeof(float));
for(int x2993=0; x2993 < 150; x2993++) {
float x2994 = x361[x2993];
float x2995 = x2994 + 1.0E-8f;
x2992[x2993] = x2995;

}
float* x2999 = (float*)myMalloc(150 * sizeof(float));
for(int x3000=0; x3000 < 150; x3000++) {
float x3001 = x2992[x3000];
double x3002 = (double)x3001;
double x3003 = sqrt(x3002);
float x3004 = (float)x3003;
x2999[x3000] = x3004;

}
float* x3008 = (float*)myMalloc(150 * sizeof(float));
for(int x3009=0; x3009 < 150; x3009++) {
float x3010 = x2985[x3009];
float x3011 = x2999[x3009];
float x3012 = x3010 / x3011;
x3008[x3009] = x3012;

}
for(int x3016=0; x3016 < 150; x3016++) {
float x3017 = x85[x3016];
float x3018 = x3008[x3016];
float x3019 = x3017 - x3018;
x85[x3016] = x3019;

}
for(int x3023=0; x3023 < 150; x3023++) {
float x3024 = x231[x3023];
x231[x3023] = 0.0f;

}
for(int x3028=0; x3028 < 22500; x3028++) {
float x3029 = x236[x3028];
bool x3030 = x3029 > 5.0f;
if (x3030) {
x236[x3028] = 5.0f;
} else {
}
float x3034 = x236[x3028];
bool x3035 = x3034 < -5.0f;
if (x3035) {
x236[x3028] = -5.0f;
} else {
}

}
float* x3041 = (float*)myMalloc(22500 * sizeof(float));
for(int x3042=0; x3042 < 22500; x3042++) {
float x3043 = x236[x3042];
float x3044 = x236[x3042];
float x3045 = x3043 * x3044;
x3041[x3042] = x3045;

}
for(int x3049=0; x3049 < 22500; x3049++) {
float x3050 = x366[x3049];
float x3051 = x3041[x3049];
float x3052 = x3050 + x3051;
x366[x3049] = x3052;

}
float* x3056 = (float*)myMalloc(22500 * sizeof(float));
for(int x3057=0; x3057 < 22500; x3057++) {
float x3058 = x236[x3057];
float x3059 = x3058 * 0.05f;
x3056[x3057] = x3059;

}
float* x3063 = (float*)myMalloc(22500 * sizeof(float));
for(int x3064=0; x3064 < 22500; x3064++) {
float x3065 = x366[x3064];
float x3066 = x3065 + 1.0E-8f;
x3063[x3064] = x3066;

}
float* x3070 = (float*)myMalloc(22500 * sizeof(float));
for(int x3071=0; x3071 < 22500; x3071++) {
float x3072 = x3063[x3071];
double x3073 = (double)x3072;
double x3074 = sqrt(x3073);
float x3075 = (float)x3074;
x3070[x3071] = x3075;

}
float* x3079 = (float*)myMalloc(22500 * sizeof(float));
for(int x3080=0; x3080 < 22500; x3080++) {
float x3081 = x3056[x3080];
float x3082 = x3070[x3080];
float x3083 = x3081 / x3082;
x3079[x3080] = x3083;

}
for(int x3087=0; x3087 < 22500; x3087++) {
float x3088 = x90[x3087];
float x3089 = x3079[x3087];
float x3090 = x3088 - x3089;
x90[x3087] = x3090;

}
for(int x3094=0; x3094 < 22500; x3094++) {
float x3095 = x236[x3094];
x236[x3094] = 0.0f;

}
for(int x3099=0; x3099 < 22500; x3099++) {
float x3100 = x241[x3099];
bool x3101 = x3100 > 5.0f;
if (x3101) {
x241[x3099] = 5.0f;
} else {
}
float x3105 = x241[x3099];
bool x3106 = x3105 < -5.0f;
if (x3106) {
x241[x3099] = -5.0f;
} else {
}

}
float* x3112 = (float*)myMalloc(22500 * sizeof(float));
for(int x3113=0; x3113 < 22500; x3113++) {
float x3114 = x241[x3113];
float x3115 = x241[x3113];
float x3116 = x3114 * x3115;
x3112[x3113] = x3116;

}
for(int x3120=0; x3120 < 22500; x3120++) {
float x3121 = x371[x3120];
float x3122 = x3112[x3120];
float x3123 = x3121 + x3122;
x371[x3120] = x3123;

}
float* x3127 = (float*)myMalloc(22500 * sizeof(float));
for(int x3128=0; x3128 < 22500; x3128++) {
float x3129 = x241[x3128];
float x3130 = x3129 * 0.05f;
x3127[x3128] = x3130;

}
float* x3134 = (float*)myMalloc(22500 * sizeof(float));
for(int x3135=0; x3135 < 22500; x3135++) {
float x3136 = x371[x3135];
float x3137 = x3136 + 1.0E-8f;
x3134[x3135] = x3137;

}
float* x3141 = (float*)myMalloc(22500 * sizeof(float));
for(int x3142=0; x3142 < 22500; x3142++) {
float x3143 = x3134[x3142];
double x3144 = (double)x3143;
double x3145 = sqrt(x3144);
float x3146 = (float)x3145;
x3141[x3142] = x3146;

}
float* x3150 = (float*)myMalloc(22500 * sizeof(float));
for(int x3151=0; x3151 < 22500; x3151++) {
float x3152 = x3127[x3151];
float x3153 = x3141[x3151];
float x3154 = x3152 / x3153;
x3150[x3151] = x3154;

}
for(int x3158=0; x3158 < 22500; x3158++) {
float x3159 = x99[x3158];
float x3160 = x3150[x3158];
float x3161 = x3159 - x3160;
x99[x3158] = x3161;

}
for(int x3165=0; x3165 < 22500; x3165++) {
float x3166 = x241[x3165];
x241[x3165] = 0.0f;

}
for(int x3170=0; x3170 < 150; x3170++) {
float x3171 = x246[x3170];
bool x3172 = x3171 > 5.0f;
if (x3172) {
x246[x3170] = 5.0f;
} else {
}
float x3176 = x246[x3170];
bool x3177 = x3176 < -5.0f;
if (x3177) {
x246[x3170] = -5.0f;
} else {
}

}
float* x3183 = (float*)myMalloc(150 * sizeof(float));
for(int x3184=0; x3184 < 150; x3184++) {
float x3185 = x246[x3184];
float x3186 = x246[x3184];
float x3187 = x3185 * x3186;
x3183[x3184] = x3187;

}
for(int x3191=0; x3191 < 150; x3191++) {
float x3192 = x376[x3191];
float x3193 = x3183[x3191];
float x3194 = x3192 + x3193;
x376[x3191] = x3194;

}
float* x3198 = (float*)myMalloc(150 * sizeof(float));
for(int x3199=0; x3199 < 150; x3199++) {
float x3200 = x246[x3199];
float x3201 = x3200 * 0.05f;
x3198[x3199] = x3201;

}
float* x3205 = (float*)myMalloc(150 * sizeof(float));
for(int x3206=0; x3206 < 150; x3206++) {
float x3207 = x376[x3206];
float x3208 = x3207 + 1.0E-8f;
x3205[x3206] = x3208;

}
float* x3212 = (float*)myMalloc(150 * sizeof(float));
for(int x3213=0; x3213 < 150; x3213++) {
float x3214 = x3205[x3213];
double x3215 = (double)x3214;
double x3216 = sqrt(x3215);
float x3217 = (float)x3216;
x3212[x3213] = x3217;

}
float* x3221 = (float*)myMalloc(150 * sizeof(float));
for(int x3222=0; x3222 < 150; x3222++) {
float x3223 = x3198[x3222];
float x3224 = x3212[x3222];
float x3225 = x3223 / x3224;
x3221[x3222] = x3225;

}
for(int x3229=0; x3229 < 150; x3229++) {
float x3230 = x107[x3229];
float x3231 = x3221[x3229];
float x3232 = x3230 - x3231;
x107[x3229] = x3232;

}
for(int x3236=0; x3236 < 150; x3236++) {
float x3237 = x246[x3236];
x246[x3236] = 0.0f;

}
for(int x3241=0; x3241 < 22500; x3241++) {
float x3242 = x251[x3241];
bool x3243 = x3242 > 5.0f;
if (x3243) {
x251[x3241] = 5.0f;
} else {
}
float x3247 = x251[x3241];
bool x3248 = x3247 < -5.0f;
if (x3248) {
x251[x3241] = -5.0f;
} else {
}

}
float* x3254 = (float*)myMalloc(22500 * sizeof(float));
for(int x3255=0; x3255 < 22500; x3255++) {
float x3256 = x251[x3255];
float x3257 = x251[x3255];
float x3258 = x3256 * x3257;
x3254[x3255] = x3258;

}
for(int x3262=0; x3262 < 22500; x3262++) {
float x3263 = x381[x3262];
float x3264 = x3254[x3262];
float x3265 = x3263 + x3264;
x381[x3262] = x3265;

}
float* x3269 = (float*)myMalloc(22500 * sizeof(float));
for(int x3270=0; x3270 < 22500; x3270++) {
float x3271 = x251[x3270];
float x3272 = x3271 * 0.05f;
x3269[x3270] = x3272;

}
float* x3276 = (float*)myMalloc(22500 * sizeof(float));
for(int x3277=0; x3277 < 22500; x3277++) {
float x3278 = x381[x3277];
float x3279 = x3278 + 1.0E-8f;
x3276[x3277] = x3279;

}
float* x3283 = (float*)myMalloc(22500 * sizeof(float));
for(int x3284=0; x3284 < 22500; x3284++) {
float x3285 = x3276[x3284];
double x3286 = (double)x3285;
double x3287 = sqrt(x3286);
float x3288 = (float)x3287;
x3283[x3284] = x3288;

}
float* x3292 = (float*)myMalloc(22500 * sizeof(float));
for(int x3293=0; x3293 < 22500; x3293++) {
float x3294 = x3269[x3293];
float x3295 = x3283[x3293];
float x3296 = x3294 / x3295;
x3292[x3293] = x3296;

}
for(int x3300=0; x3300 < 22500; x3300++) {
float x3301 = x112[x3300];
float x3302 = x3292[x3300];
float x3303 = x3301 - x3302;
x112[x3300] = x3303;

}
for(int x3307=0; x3307 < 22500; x3307++) {
float x3308 = x251[x3307];
x251[x3307] = 0.0f;

}
for(int x3312=0; x3312 < 22500; x3312++) {
float x3313 = x256[x3312];
bool x3314 = x3313 > 5.0f;
if (x3314) {
x256[x3312] = 5.0f;
} else {
}
float x3318 = x256[x3312];
bool x3319 = x3318 < -5.0f;
if (x3319) {
x256[x3312] = -5.0f;
} else {
}

}
float* x3325 = (float*)myMalloc(22500 * sizeof(float));
for(int x3326=0; x3326 < 22500; x3326++) {
float x3327 = x256[x3326];
float x3328 = x256[x3326];
float x3329 = x3327 * x3328;
x3325[x3326] = x3329;

}
for(int x3333=0; x3333 < 22500; x3333++) {
float x3334 = x386[x3333];
float x3335 = x3325[x3333];
float x3336 = x3334 + x3335;
x386[x3333] = x3336;

}
float* x3340 = (float*)myMalloc(22500 * sizeof(float));
for(int x3341=0; x3341 < 22500; x3341++) {
float x3342 = x256[x3341];
float x3343 = x3342 * 0.05f;
x3340[x3341] = x3343;

}
float* x3347 = (float*)myMalloc(22500 * sizeof(float));
for(int x3348=0; x3348 < 22500; x3348++) {
float x3349 = x386[x3348];
float x3350 = x3349 + 1.0E-8f;
x3347[x3348] = x3350;

}
float* x3354 = (float*)myMalloc(22500 * sizeof(float));
for(int x3355=0; x3355 < 22500; x3355++) {
float x3356 = x3347[x3355];
double x3357 = (double)x3356;
double x3358 = sqrt(x3357);
float x3359 = (float)x3358;
x3354[x3355] = x3359;

}
float* x3363 = (float*)myMalloc(22500 * sizeof(float));
for(int x3364=0; x3364 < 22500; x3364++) {
float x3365 = x3340[x3364];
float x3366 = x3354[x3364];
float x3367 = x3365 / x3366;
x3363[x3364] = x3367;

}
for(int x3371=0; x3371 < 22500; x3371++) {
float x3372 = x120[x3371];
float x3373 = x3363[x3371];
float x3374 = x3372 - x3373;
x120[x3371] = x3374;

}
for(int x3378=0; x3378 < 22500; x3378++) {
float x3379 = x256[x3378];
x256[x3378] = 0.0f;

}
for(int x3383=0; x3383 < 22500; x3383++) {
float x3384 = x261[x3383];
bool x3385 = x3384 > 5.0f;
if (x3385) {
x261[x3383] = 5.0f;
} else {
}
float x3389 = x261[x3383];
bool x3390 = x3389 < -5.0f;
if (x3390) {
x261[x3383] = -5.0f;
} else {
}

}
float* x3396 = (float*)myMalloc(22500 * sizeof(float));
for(int x3397=0; x3397 < 22500; x3397++) {
float x3398 = x261[x3397];
float x3399 = x261[x3397];
float x3400 = x3398 * x3399;
x3396[x3397] = x3400;

}
for(int x3404=0; x3404 < 22500; x3404++) {
float x3405 = x391[x3404];
float x3406 = x3396[x3404];
float x3407 = x3405 + x3406;
x391[x3404] = x3407;

}
float* x3411 = (float*)myMalloc(22500 * sizeof(float));
for(int x3412=0; x3412 < 22500; x3412++) {
float x3413 = x261[x3412];
float x3414 = x3413 * 0.05f;
x3411[x3412] = x3414;

}
float* x3418 = (float*)myMalloc(22500 * sizeof(float));
for(int x3419=0; x3419 < 22500; x3419++) {
float x3420 = x391[x3419];
float x3421 = x3420 + 1.0E-8f;
x3418[x3419] = x3421;

}
float* x3425 = (float*)myMalloc(22500 * sizeof(float));
for(int x3426=0; x3426 < 22500; x3426++) {
float x3427 = x3418[x3426];
double x3428 = (double)x3427;
double x3429 = sqrt(x3428);
float x3430 = (float)x3429;
x3425[x3426] = x3430;

}
float* x3434 = (float*)myMalloc(22500 * sizeof(float));
for(int x3435=0; x3435 < 22500; x3435++) {
float x3436 = x3411[x3435];
float x3437 = x3425[x3435];
float x3438 = x3436 / x3437;
x3434[x3435] = x3438;

}
for(int x3442=0; x3442 < 22500; x3442++) {
float x3443 = x128[x3442];
float x3444 = x3434[x3442];
float x3445 = x3443 - x3444;
x128[x3442] = x3445;

}
for(int x3449=0; x3449 < 22500; x3449++) {
float x3450 = x261[x3449];
x261[x3449] = 0.0f;

}
for(int x3454=0; x3454 < 22500; x3454++) {
float x3455 = x266[x3454];
bool x3456 = x3455 > 5.0f;
if (x3456) {
x266[x3454] = 5.0f;
} else {
}
float x3460 = x266[x3454];
bool x3461 = x3460 < -5.0f;
if (x3461) {
x266[x3454] = -5.0f;
} else {
}

}
float* x3467 = (float*)myMalloc(22500 * sizeof(float));
for(int x3468=0; x3468 < 22500; x3468++) {
float x3469 = x266[x3468];
float x3470 = x266[x3468];
float x3471 = x3469 * x3470;
x3467[x3468] = x3471;

}
for(int x3475=0; x3475 < 22500; x3475++) {
float x3476 = x396[x3475];
float x3477 = x3467[x3475];
float x3478 = x3476 + x3477;
x396[x3475] = x3478;

}
float* x3482 = (float*)myMalloc(22500 * sizeof(float));
for(int x3483=0; x3483 < 22500; x3483++) {
float x3484 = x266[x3483];
float x3485 = x3484 * 0.05f;
x3482[x3483] = x3485;

}
float* x3489 = (float*)myMalloc(22500 * sizeof(float));
for(int x3490=0; x3490 < 22500; x3490++) {
float x3491 = x396[x3490];
float x3492 = x3491 + 1.0E-8f;
x3489[x3490] = x3492;

}
float* x3496 = (float*)myMalloc(22500 * sizeof(float));
for(int x3497=0; x3497 < 22500; x3497++) {
float x3498 = x3489[x3497];
double x3499 = (double)x3498;
double x3500 = sqrt(x3499);
float x3501 = (float)x3500;
x3496[x3497] = x3501;

}
float* x3505 = (float*)myMalloc(22500 * sizeof(float));
for(int x3506=0; x3506 < 22500; x3506++) {
float x3507 = x3482[x3506];
float x3508 = x3496[x3506];
float x3509 = x3507 / x3508;
x3505[x3506] = x3509;

}
for(int x3513=0; x3513 < 22500; x3513++) {
float x3514 = x136[x3513];
float x3515 = x3505[x3513];
float x3516 = x3514 - x3515;
x136[x3513] = x3516;

}
for(int x3520=0; x3520 < 22500; x3520++) {
float x3521 = x266[x3520];
x266[x3520] = 0.0f;

}
for(int x3525=0; x3525 < 150; x3525++) {
float x3526 = x271[x3525];
bool x3527 = x3526 > 5.0f;
if (x3527) {
x271[x3525] = 5.0f;
} else {
}
float x3531 = x271[x3525];
bool x3532 = x3531 < -5.0f;
if (x3532) {
x271[x3525] = -5.0f;
} else {
}

}
float* x3538 = (float*)myMalloc(150 * sizeof(float));
for(int x3539=0; x3539 < 150; x3539++) {
float x3540 = x271[x3539];
float x3541 = x271[x3539];
float x3542 = x3540 * x3541;
x3538[x3539] = x3542;

}
for(int x3546=0; x3546 < 150; x3546++) {
float x3547 = x401[x3546];
float x3548 = x3538[x3546];
float x3549 = x3547 + x3548;
x401[x3546] = x3549;

}
float* x3553 = (float*)myMalloc(150 * sizeof(float));
for(int x3554=0; x3554 < 150; x3554++) {
float x3555 = x271[x3554];
float x3556 = x3555 * 0.05f;
x3553[x3554] = x3556;

}
float* x3560 = (float*)myMalloc(150 * sizeof(float));
for(int x3561=0; x3561 < 150; x3561++) {
float x3562 = x401[x3561];
float x3563 = x3562 + 1.0E-8f;
x3560[x3561] = x3563;

}
float* x3567 = (float*)myMalloc(150 * sizeof(float));
for(int x3568=0; x3568 < 150; x3568++) {
float x3569 = x3560[x3568];
double x3570 = (double)x3569;
double x3571 = sqrt(x3570);
float x3572 = (float)x3571;
x3567[x3568] = x3572;

}
float* x3576 = (float*)myMalloc(150 * sizeof(float));
for(int x3577=0; x3577 < 150; x3577++) {
float x3578 = x3553[x3577];
float x3579 = x3567[x3577];
float x3580 = x3578 / x3579;
x3576[x3577] = x3580;

}
for(int x3584=0; x3584 < 150; x3584++) {
float x3585 = x144[x3584];
float x3586 = x3576[x3584];
float x3587 = x3585 - x3586;
x144[x3584] = x3587;

}
for(int x3591=0; x3591 < 150; x3591++) {
float x3592 = x271[x3591];
x271[x3591] = 0.0f;

}
for(int x3596=0; x3596 < 22500; x3596++) {
float x3597 = x276[x3596];
bool x3598 = x3597 > 5.0f;
if (x3598) {
x276[x3596] = 5.0f;
} else {
}
float x3602 = x276[x3596];
bool x3603 = x3602 < -5.0f;
if (x3603) {
x276[x3596] = -5.0f;
} else {
}

}
float* x3609 = (float*)myMalloc(22500 * sizeof(float));
for(int x3610=0; x3610 < 22500; x3610++) {
float x3611 = x276[x3610];
float x3612 = x276[x3610];
float x3613 = x3611 * x3612;
x3609[x3610] = x3613;

}
for(int x3617=0; x3617 < 22500; x3617++) {
float x3618 = x406[x3617];
float x3619 = x3609[x3617];
float x3620 = x3618 + x3619;
x406[x3617] = x3620;

}
float* x3624 = (float*)myMalloc(22500 * sizeof(float));
for(int x3625=0; x3625 < 22500; x3625++) {
float x3626 = x276[x3625];
float x3627 = x3626 * 0.05f;
x3624[x3625] = x3627;

}
float* x3631 = (float*)myMalloc(22500 * sizeof(float));
for(int x3632=0; x3632 < 22500; x3632++) {
float x3633 = x406[x3632];
float x3634 = x3633 + 1.0E-8f;
x3631[x3632] = x3634;

}
float* x3638 = (float*)myMalloc(22500 * sizeof(float));
for(int x3639=0; x3639 < 22500; x3639++) {
float x3640 = x3631[x3639];
double x3641 = (double)x3640;
double x3642 = sqrt(x3641);
float x3643 = (float)x3642;
x3638[x3639] = x3643;

}
float* x3647 = (float*)myMalloc(22500 * sizeof(float));
for(int x3648=0; x3648 < 22500; x3648++) {
float x3649 = x3624[x3648];
float x3650 = x3638[x3648];
float x3651 = x3649 / x3650;
x3647[x3648] = x3651;

}
for(int x3655=0; x3655 < 22500; x3655++) {
float x3656 = x149[x3655];
float x3657 = x3647[x3655];
float x3658 = x3656 - x3657;
x149[x3655] = x3658;

}
for(int x3662=0; x3662 < 22500; x3662++) {
float x3663 = x276[x3662];
x276[x3662] = 0.0f;

}
for(int x3667=0; x3667 < 22500; x3667++) {
float x3668 = x281[x3667];
bool x3669 = x3668 > 5.0f;
if (x3669) {
x281[x3667] = 5.0f;
} else {
}
float x3673 = x281[x3667];
bool x3674 = x3673 < -5.0f;
if (x3674) {
x281[x3667] = -5.0f;
} else {
}

}
float* x3680 = (float*)myMalloc(22500 * sizeof(float));
for(int x3681=0; x3681 < 22500; x3681++) {
float x3682 = x281[x3681];
float x3683 = x281[x3681];
float x3684 = x3682 * x3683;
x3680[x3681] = x3684;

}
for(int x3688=0; x3688 < 22500; x3688++) {
float x3689 = x411[x3688];
float x3690 = x3680[x3688];
float x3691 = x3689 + x3690;
x411[x3688] = x3691;

}
float* x3695 = (float*)myMalloc(22500 * sizeof(float));
for(int x3696=0; x3696 < 22500; x3696++) {
float x3697 = x281[x3696];
float x3698 = x3697 * 0.05f;
x3695[x3696] = x3698;

}
float* x3702 = (float*)myMalloc(22500 * sizeof(float));
for(int x3703=0; x3703 < 22500; x3703++) {
float x3704 = x411[x3703];
float x3705 = x3704 + 1.0E-8f;
x3702[x3703] = x3705;

}
float* x3709 = (float*)myMalloc(22500 * sizeof(float));
for(int x3710=0; x3710 < 22500; x3710++) {
float x3711 = x3702[x3710];
double x3712 = (double)x3711;
double x3713 = sqrt(x3712);
float x3714 = (float)x3713;
x3709[x3710] = x3714;

}
float* x3718 = (float*)myMalloc(22500 * sizeof(float));
for(int x3719=0; x3719 < 22500; x3719++) {
float x3720 = x3695[x3719];
float x3721 = x3709[x3719];
float x3722 = x3720 / x3721;
x3718[x3719] = x3722;

}
for(int x3726=0; x3726 < 22500; x3726++) {
float x3727 = x157[x3726];
float x3728 = x3718[x3726];
float x3729 = x3727 - x3728;
x157[x3726] = x3729;

}
for(int x3733=0; x3733 < 22500; x3733++) {
float x3734 = x281[x3733];
x281[x3733] = 0.0f;

}
for(int x3738=0; x3738 < 150; x3738++) {
float x3739 = x286[x3738];
bool x3740 = x3739 > 5.0f;
if (x3740) {
x286[x3738] = 5.0f;
} else {
}
float x3744 = x286[x3738];
bool x3745 = x3744 < -5.0f;
if (x3745) {
x286[x3738] = -5.0f;
} else {
}

}
float* x3751 = (float*)myMalloc(150 * sizeof(float));
for(int x3752=0; x3752 < 150; x3752++) {
float x3753 = x286[x3752];
float x3754 = x286[x3752];
float x3755 = x3753 * x3754;
x3751[x3752] = x3755;

}
for(int x3759=0; x3759 < 150; x3759++) {
float x3760 = x416[x3759];
float x3761 = x3751[x3759];
float x3762 = x3760 + x3761;
x416[x3759] = x3762;

}
float* x3766 = (float*)myMalloc(150 * sizeof(float));
for(int x3767=0; x3767 < 150; x3767++) {
float x3768 = x286[x3767];
float x3769 = x3768 * 0.05f;
x3766[x3767] = x3769;

}
float* x3773 = (float*)myMalloc(150 * sizeof(float));
for(int x3774=0; x3774 < 150; x3774++) {
float x3775 = x416[x3774];
float x3776 = x3775 + 1.0E-8f;
x3773[x3774] = x3776;

}
float* x3780 = (float*)myMalloc(150 * sizeof(float));
for(int x3781=0; x3781 < 150; x3781++) {
float x3782 = x3773[x3781];
double x3783 = (double)x3782;
double x3784 = sqrt(x3783);
float x3785 = (float)x3784;
x3780[x3781] = x3785;

}
float* x3789 = (float*)myMalloc(150 * sizeof(float));
for(int x3790=0; x3790 < 150; x3790++) {
float x3791 = x3766[x3790];
float x3792 = x3780[x3790];
float x3793 = x3791 / x3792;
x3789[x3790] = x3793;

}
for(int x3797=0; x3797 < 150; x3797++) {
float x3798 = x165[x3797];
float x3799 = x3789[x3797];
float x3800 = x3798 - x3799;
x165[x3797] = x3800;

}
for(int x3804=0; x3804 < 150; x3804++) {
float x3805 = x286[x3804];
x286[x3804] = 0.0f;

}
for(int x3809=0; x3809 < 22500; x3809++) {
float x3810 = x291[x3809];
bool x3811 = x3810 > 5.0f;
if (x3811) {
x291[x3809] = 5.0f;
} else {
}
float x3815 = x291[x3809];
bool x3816 = x3815 < -5.0f;
if (x3816) {
x291[x3809] = -5.0f;
} else {
}

}
float* x3822 = (float*)myMalloc(22500 * sizeof(float));
for(int x3823=0; x3823 < 22500; x3823++) {
float x3824 = x291[x3823];
float x3825 = x291[x3823];
float x3826 = x3824 * x3825;
x3822[x3823] = x3826;

}
for(int x3830=0; x3830 < 22500; x3830++) {
float x3831 = x421[x3830];
float x3832 = x3822[x3830];
float x3833 = x3831 + x3832;
x421[x3830] = x3833;

}
float* x3837 = (float*)myMalloc(22500 * sizeof(float));
for(int x3838=0; x3838 < 22500; x3838++) {
float x3839 = x291[x3838];
float x3840 = x3839 * 0.05f;
x3837[x3838] = x3840;

}
float* x3844 = (float*)myMalloc(22500 * sizeof(float));
for(int x3845=0; x3845 < 22500; x3845++) {
float x3846 = x421[x3845];
float x3847 = x3846 + 1.0E-8f;
x3844[x3845] = x3847;

}
float* x3851 = (float*)myMalloc(22500 * sizeof(float));
for(int x3852=0; x3852 < 22500; x3852++) {
float x3853 = x3844[x3852];
double x3854 = (double)x3853;
double x3855 = sqrt(x3854);
float x3856 = (float)x3855;
x3851[x3852] = x3856;

}
float* x3860 = (float*)myMalloc(22500 * sizeof(float));
for(int x3861=0; x3861 < 22500; x3861++) {
float x3862 = x3837[x3861];
float x3863 = x3851[x3861];
float x3864 = x3862 / x3863;
x3860[x3861] = x3864;

}
for(int x3868=0; x3868 < 22500; x3868++) {
float x3869 = x170[x3868];
float x3870 = x3860[x3868];
float x3871 = x3869 - x3870;
x170[x3868] = x3871;

}
for(int x3875=0; x3875 < 22500; x3875++) {
float x3876 = x291[x3875];
x291[x3875] = 0.0f;

}
for(int x3880=0; x3880 < 22500; x3880++) {
float x3881 = x296[x3880];
bool x3882 = x3881 > 5.0f;
if (x3882) {
x296[x3880] = 5.0f;
} else {
}
float x3886 = x296[x3880];
bool x3887 = x3886 < -5.0f;
if (x3887) {
x296[x3880] = -5.0f;
} else {
}

}
float* x3893 = (float*)myMalloc(22500 * sizeof(float));
for(int x3894=0; x3894 < 22500; x3894++) {
float x3895 = x296[x3894];
float x3896 = x296[x3894];
float x3897 = x3895 * x3896;
x3893[x3894] = x3897;

}
for(int x3901=0; x3901 < 22500; x3901++) {
float x3902 = x426[x3901];
float x3903 = x3893[x3901];
float x3904 = x3902 + x3903;
x426[x3901] = x3904;

}
float* x3908 = (float*)myMalloc(22500 * sizeof(float));
for(int x3909=0; x3909 < 22500; x3909++) {
float x3910 = x296[x3909];
float x3911 = x3910 * 0.05f;
x3908[x3909] = x3911;

}
float* x3915 = (float*)myMalloc(22500 * sizeof(float));
for(int x3916=0; x3916 < 22500; x3916++) {
float x3917 = x426[x3916];
float x3918 = x3917 + 1.0E-8f;
x3915[x3916] = x3918;

}
float* x3922 = (float*)myMalloc(22500 * sizeof(float));
for(int x3923=0; x3923 < 22500; x3923++) {
float x3924 = x3915[x3923];
double x3925 = (double)x3924;
double x3926 = sqrt(x3925);
float x3927 = (float)x3926;
x3922[x3923] = x3927;

}
float* x3931 = (float*)myMalloc(22500 * sizeof(float));
for(int x3932=0; x3932 < 22500; x3932++) {
float x3933 = x3908[x3932];
float x3934 = x3922[x3932];
float x3935 = x3933 / x3934;
x3931[x3932] = x3935;

}
for(int x3939=0; x3939 < 22500; x3939++) {
float x3940 = x178[x3939];
float x3941 = x3931[x3939];
float x3942 = x3940 - x3941;
x178[x3939] = x3942;

}
for(int x3946=0; x3946 < 22500; x3946++) {
float x3947 = x296[x3946];
x296[x3946] = 0.0f;

}
for(int x3951=0; x3951 < 150; x3951++) {
float x3952 = x301[x3951];
bool x3953 = x3952 > 5.0f;
if (x3953) {
x301[x3951] = 5.0f;
} else {
}
float x3957 = x301[x3951];
bool x3958 = x3957 < -5.0f;
if (x3958) {
x301[x3951] = -5.0f;
} else {
}

}
float* x3964 = (float*)myMalloc(150 * sizeof(float));
for(int x3965=0; x3965 < 150; x3965++) {
float x3966 = x301[x3965];
float x3967 = x301[x3965];
float x3968 = x3966 * x3967;
x3964[x3965] = x3968;

}
for(int x3972=0; x3972 < 150; x3972++) {
float x3973 = x431[x3972];
float x3974 = x3964[x3972];
float x3975 = x3973 + x3974;
x431[x3972] = x3975;

}
float* x3979 = (float*)myMalloc(150 * sizeof(float));
for(int x3980=0; x3980 < 150; x3980++) {
float x3981 = x301[x3980];
float x3982 = x3981 * 0.05f;
x3979[x3980] = x3982;

}
float* x3986 = (float*)myMalloc(150 * sizeof(float));
for(int x3987=0; x3987 < 150; x3987++) {
float x3988 = x431[x3987];
float x3989 = x3988 + 1.0E-8f;
x3986[x3987] = x3989;

}
float* x3993 = (float*)myMalloc(150 * sizeof(float));
for(int x3994=0; x3994 < 150; x3994++) {
float x3995 = x3986[x3994];
double x3996 = (double)x3995;
double x3997 = sqrt(x3996);
float x3998 = (float)x3997;
x3993[x3994] = x3998;

}
float* x4002 = (float*)myMalloc(150 * sizeof(float));
for(int x4003=0; x4003 < 150; x4003++) {
float x4004 = x3979[x4003];
float x4005 = x3993[x4003];
float x4006 = x4004 / x4005;
x4002[x4003] = x4006;

}
for(int x4010=0; x4010 < 150; x4010++) {
float x4011 = x186[x4010];
float x4012 = x4002[x4010];
float x4013 = x4011 - x4012;
x186[x4010] = x4013;

}
for(int x4017=0; x4017 < 150; x4017++) {
float x4018 = x301[x4017];
x301[x4017] = 0.0f;

}
for(int x4022=0; x4022 < 750; x4022++) {
float x4023 = x306[x4022];
bool x4024 = x4023 > 5.0f;
if (x4024) {
x306[x4022] = 5.0f;
} else {
}
float x4028 = x306[x4022];
bool x4029 = x4028 < -5.0f;
if (x4029) {
x306[x4022] = -5.0f;
} else {
}

}
float* x4035 = (float*)myMalloc(750 * sizeof(float));
for(int x4036=0; x4036 < 750; x4036++) {
float x4037 = x306[x4036];
float x4038 = x306[x4036];
float x4039 = x4037 * x4038;
x4035[x4036] = x4039;

}
for(int x4043=0; x4043 < 750; x4043++) {
float x4044 = x436[x4043];
float x4045 = x4035[x4043];
float x4046 = x4044 + x4045;
x436[x4043] = x4046;

}
float* x4050 = (float*)myMalloc(750 * sizeof(float));
for(int x4051=0; x4051 < 750; x4051++) {
float x4052 = x306[x4051];
float x4053 = x4052 * 0.05f;
x4050[x4051] = x4053;

}
float* x4057 = (float*)myMalloc(750 * sizeof(float));
for(int x4058=0; x4058 < 750; x4058++) {
float x4059 = x436[x4058];
float x4060 = x4059 + 1.0E-8f;
x4057[x4058] = x4060;

}
float* x4064 = (float*)myMalloc(750 * sizeof(float));
for(int x4065=0; x4065 < 750; x4065++) {
float x4066 = x4057[x4065];
double x4067 = (double)x4066;
double x4068 = sqrt(x4067);
float x4069 = (float)x4068;
x4064[x4065] = x4069;

}
float* x4073 = (float*)myMalloc(750 * sizeof(float));
for(int x4074=0; x4074 < 750; x4074++) {
float x4075 = x4050[x4074];
float x4076 = x4064[x4074];
float x4077 = x4075 / x4076;
x4073[x4074] = x4077;

}
for(int x4081=0; x4081 < 750; x4081++) {
float x4082 = x191[x4081];
float x4083 = x4073[x4081];
float x4084 = x4082 - x4083;
x191[x4081] = x4084;

}
for(int x4088=0; x4088 < 750; x4088++) {
float x4089 = x306[x4088];
x306[x4088] = 0.0f;

}
for(int x4093=0; x4093 < 5; x4093++) {
float x4094 = x311[x4093];
bool x4095 = x4094 > 5.0f;
if (x4095) {
x311[x4093] = 5.0f;
} else {
}
float x4099 = x311[x4093];
bool x4100 = x4099 < -5.0f;
if (x4100) {
x311[x4093] = -5.0f;
} else {
}

}
float* x4106 = (float*)myMalloc(5 * sizeof(float));
for(int x4107=0; x4107 < 5; x4107++) {
float x4108 = x311[x4107];
float x4109 = x311[x4107];
float x4110 = x4108 * x4109;
x4106[x4107] = x4110;

}
for(int x4114=0; x4114 < 5; x4114++) {
float x4115 = x441[x4114];
float x4116 = x4106[x4114];
float x4117 = x4115 + x4116;
x441[x4114] = x4117;

}
float* x4121 = (float*)myMalloc(5 * sizeof(float));
for(int x4122=0; x4122 < 5; x4122++) {
float x4123 = x311[x4122];
float x4124 = x4123 * 0.05f;
x4121[x4122] = x4124;

}
float* x4128 = (float*)myMalloc(5 * sizeof(float));
for(int x4129=0; x4129 < 5; x4129++) {
float x4130 = x441[x4129];
float x4131 = x4130 + 1.0E-8f;
x4128[x4129] = x4131;

}
float* x4135 = (float*)myMalloc(5 * sizeof(float));
for(int x4136=0; x4136 < 5; x4136++) {
float x4137 = x4128[x4136];
double x4138 = (double)x4137;
double x4139 = sqrt(x4138);
float x4140 = (float)x4139;
x4135[x4136] = x4140;

}
float* x4144 = (float*)myMalloc(5 * sizeof(float));
for(int x4145=0; x4145 < 5; x4145++) {
float x4146 = x4121[x4145];
float x4147 = x4135[x4145];
float x4148 = x4146 / x4147;
x4144[x4145] = x4148;

}
for(int x4152=0; x4152 < 5; x4152++) {
float x4153 = x200[x4152];
float x4154 = x4144[x4152];
float x4155 = x4153 - x4154;
x200[x4152] = x4155;

}
for(int x4159=0; x4159 < 5; x4159++) {
float x4160 = x311[x4159];
x311[x4159] = 0.0f;

}
mallocAddr = (void*)x447;

}
float x4167 = x451;
double x4168 = (double)x4167;
x446[x450] = x4168;
double x4170 = ((double)clock() / CLOCKS_PER_SEC);
double x4171 = x4170 - x448;
printf("epoc %d, average_loss %f, time %lf\n",x450,x4167,x4171);

}
double x4175 = ((double)clock() / CLOCKS_PER_SEC);
int64_t x4179 = (long)fopen(x0, "w");
fprintf((FILE *)x4179, "unit: %s\n", "1 epoch");
for(int x4181=0; x4181 < 30; x4181++) {
double x4182 = x446[x4181];
fprintf((FILE *)x4179, "%lf\n", x4182);

}
double x4176 = x448 - x1;
double x4177 = x4175 - x448;
double x4178 = x4177 / 30.0;
fprintf((FILE *)x4179, "run time: %lf %lf\n", x4176, x4178);
fclose((FILE*)x4179);
}
/*****************************************
  End of C Generated Code                  
*******************************************/

