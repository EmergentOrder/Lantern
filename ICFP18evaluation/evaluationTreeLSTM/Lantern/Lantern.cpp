
      #include <fcntl.h>
      #include <errno.h>
      #include <err.h>
      #include <sys/mman.h>
      #include <sys/stat.h>
      #include <sys/time.h>
      #include <stdio.h>
      #include <stdint.h>
      #include <unistd.h>
      #include <time.h>
      #include <functional>
      #include <memory>
      #include <math.h>
      #include <random>

      using namespace std;
      #ifndef MAP_FILE
      #define MAP_FILE MAP_SHARED
      #endif
      int fsize(int fd) {
        struct stat stat;
        int res = fstat(fd,&stat);
        return stat.st_size;
      }
      int printll(char* s) {
        while (*s != '\n' && *s != ',' && *s != '\t') {
          putchar(*s++);
        }
        return 0;
      }
      long hash(char *str0, int len)
      {
        unsigned char* str = (unsigned char*)str0;
        unsigned long hash = 5381;
        int c;

        while ((c = *str++) && len--)
          hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

        return hash;
      }
      int HEAP_SIZE = 1073741826; // 1048576;  //2147483652; //536870912; // 268435456; //2097152;
      void *mallocBase = malloc(HEAP_SIZE);
      void *mallocAddr = mallocBase;
      void *waterMark  = mallocBase;
      void* myMalloc(size_t bytes) {
        void* res = mallocAddr;
        mallocAddr += bytes;
        return res;
      }

      int timeval_subtract(struct timeval *result, struct timeval *t2, struct timeval *t1) {
        long int diff = (t2->tv_usec + 1000000 * t2->tv_sec) - (t1->tv_usec + 1000000 * t1->tv_sec);
        result->tv_sec = diff / 1000000;
        result->tv_usec = diff % 1000000;
        return (diff<0);
      }



      void Snippet(char*);

      std::random_device rd{};
      std::mt19937 gen{rd()};
      std::normal_distribution<> d{0,1};

      int main(int argc, char *argv[])
      {

        if (argc != 2) {
          printf("usage: query <filename>\n");
          return 0;
        }
        Snippet(argv[1]);
        return 0;
      }

      
/*****************************************
  Emitting C Generated Code                  
*******************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
void Snippet(char*  x0) {
double x1 = ((double)clock() / CLOCKS_PER_SEC);
int32_t* x2 = (int32_t*)myMalloc(1 * sizeof(int32_t));
int64_t x3 = (long)fopen("small_glove.txt", "r");
if (fscanf((FILE *)x3,"%d", &x2[0])!=1) perror("Error reading file");
int32_t x5 = x2[0];
double** x6 = (double**)myMalloc(x5 * sizeof(double*));
for(int x8=0; x8 < x5; x8++) {
double* x9 = (double*)myMalloc(300 * sizeof(double));
x6[x8] = x9;
for(int x12=0; x12 < 300; x12++) {
double* x13 = x6[x8];
if (fscanf((FILE *)x3,"%lf", &x13[x12])!=1) perror("Error reading file");

}

}
fclose((FILE*)x3);
int32_t* x20 = (int32_t*)myMalloc(1 * sizeof(int32_t));
int64_t x21 = (long)fopen("array_tree.txt", "r");
if (fscanf((FILE *)x21,"%d", &x20[0])!=1) perror("Error reading file");
int32_t x23 = x20[0];
int32_t x24 = x23 * 4;
int** x25 = (int**)myMalloc(x24 * sizeof(int*));
int32_t* x26 = (int32_t*)myMalloc(1 * sizeof(int32_t));
for(int x28=0; x28 < x23; x28++) {
if (fscanf((FILE *)x21,"%d", &x26[0])!=1) perror("Error reading file");
int32_t x32 = x28 * 4;
for(int x31=0; x31 < 4; x31++) {
int32_t x34 = x26[0];
int32_t* x35 = (int32_t*)myMalloc(x34 * sizeof(int32_t));
int32_t x33 = x32 + x31;
x25[x33] = x35;
int32_t x37 = x26[0];
for(int x39=0; x39 < x37; x39++) {
int* x40 = x25[x33];
if (fscanf((FILE *)x21,"%d", &x40[x39])!=1) perror("Error reading file");

}

}

}
fclose((FILE*)x21);
double* x49 = (double*)myMalloc(45000 * sizeof(double));
for(int x51=0; x51 < 45000; x51++) {
double x52 = (double)rand()/RAND_MAX;
double x53 = x52 - 0.5;
double x54 = x53 * 0.01;
x49[x51] = x54;

}
double* x58 = (double*)myMalloc(150 * sizeof(double));
for(int x60=0; x60 < 150; x60++) {
x58[x60] = 0.0;

}
double* x64 = (double*)myMalloc(45000 * sizeof(double));
for(int x65=0; x65 < 45000; x65++) {
double x66 = (double)rand()/RAND_MAX;
double x67 = x66 - 0.5;
double x68 = x67 * 0.01;
x64[x65] = x68;

}
double* x72 = (double*)myMalloc(150 * sizeof(double));
for(int x73=0; x73 < 150; x73++) {
x72[x73] = 0.0;

}
double* x77 = (double*)myMalloc(45000 * sizeof(double));
for(int x78=0; x78 < 45000; x78++) {
double x79 = (double)rand()/RAND_MAX;
double x80 = x79 - 0.5;
double x81 = x80 * 0.01;
x77[x78] = x81;

}
double* x85 = (double*)myMalloc(150 * sizeof(double));
for(int x86=0; x86 < 150; x86++) {
x85[x86] = 0.0;

}
double* x90 = (double*)myMalloc(22500 * sizeof(double));
for(int x92=0; x92 < 22500; x92++) {
double x93 = (double)rand()/RAND_MAX;
double x94 = x93 - 0.5;
double x95 = x94 * 0.01;
x90[x92] = x95;

}
double* x99 = (double*)myMalloc(22500 * sizeof(double));
for(int x100=0; x100 < 22500; x100++) {
double x101 = (double)rand()/RAND_MAX;
double x102 = x101 - 0.5;
double x103 = x102 * 0.01;
x99[x100] = x103;

}
double* x107 = (double*)myMalloc(150 * sizeof(double));
for(int x108=0; x108 < 150; x108++) {
x107[x108] = 0.0;

}
double* x112 = (double*)myMalloc(22500 * sizeof(double));
for(int x113=0; x113 < 22500; x113++) {
double x114 = (double)rand()/RAND_MAX;
double x115 = x114 - 0.5;
double x116 = x115 * 0.01;
x112[x113] = x116;

}
double* x120 = (double*)myMalloc(22500 * sizeof(double));
for(int x121=0; x121 < 22500; x121++) {
double x122 = (double)rand()/RAND_MAX;
double x123 = x122 - 0.5;
double x124 = x123 * 0.01;
x120[x121] = x124;

}
double* x128 = (double*)myMalloc(22500 * sizeof(double));
for(int x129=0; x129 < 22500; x129++) {
double x130 = (double)rand()/RAND_MAX;
double x131 = x130 - 0.5;
double x132 = x131 * 0.01;
x128[x129] = x132;

}
double* x136 = (double*)myMalloc(22500 * sizeof(double));
for(int x137=0; x137 < 22500; x137++) {
double x138 = (double)rand()/RAND_MAX;
double x139 = x138 - 0.5;
double x140 = x139 * 0.01;
x136[x137] = x140;

}
double* x144 = (double*)myMalloc(150 * sizeof(double));
for(int x145=0; x145 < 150; x145++) {
x144[x145] = 0.0;

}
double* x149 = (double*)myMalloc(22500 * sizeof(double));
for(int x150=0; x150 < 22500; x150++) {
double x151 = (double)rand()/RAND_MAX;
double x152 = x151 - 0.5;
double x153 = x152 * 0.01;
x149[x150] = x153;

}
double* x157 = (double*)myMalloc(22500 * sizeof(double));
for(int x158=0; x158 < 22500; x158++) {
double x159 = (double)rand()/RAND_MAX;
double x160 = x159 - 0.5;
double x161 = x160 * 0.01;
x157[x158] = x161;

}
double* x165 = (double*)myMalloc(150 * sizeof(double));
for(int x166=0; x166 < 150; x166++) {
x165[x166] = 0.0;

}
double* x170 = (double*)myMalloc(22500 * sizeof(double));
for(int x171=0; x171 < 22500; x171++) {
double x172 = (double)rand()/RAND_MAX;
double x173 = x172 - 0.5;
double x174 = x173 * 0.01;
x170[x171] = x174;

}
double* x178 = (double*)myMalloc(22500 * sizeof(double));
for(int x179=0; x179 < 22500; x179++) {
double x180 = (double)rand()/RAND_MAX;
double x181 = x180 - 0.5;
double x182 = x181 * 0.01;
x178[x179] = x182;

}
double* x186 = (double*)myMalloc(150 * sizeof(double));
for(int x187=0; x187 < 150; x187++) {
x186[x187] = 0.0;

}
double* x191 = (double*)myMalloc(750 * sizeof(double));
for(int x193=0; x193 < 750; x193++) {
double x194 = (double)rand()/RAND_MAX;
double x195 = x194 - 0.5;
double x196 = x195 * 0.01;
x191[x193] = x196;

}
double* x200 = (double*)myMalloc(5 * sizeof(double));
for(int x202=0; x202 < 5; x202++) {
x200[x202] = 0.0;

}
double* x206 = (double*)myMalloc(45000 * sizeof(double));
for(int x207=0; x207 < 45000; x207++) {
x206[x207] = 0.0;

}
double* x211 = (double*)myMalloc(150 * sizeof(double));
for(int x212=0; x212 < 150; x212++) {
x211[x212] = 0.0;

}
double* x216 = (double*)myMalloc(45000 * sizeof(double));
for(int x217=0; x217 < 45000; x217++) {
x216[x217] = 0.0;

}
double* x221 = (double*)myMalloc(150 * sizeof(double));
for(int x222=0; x222 < 150; x222++) {
x221[x222] = 0.0;

}
double* x226 = (double*)myMalloc(45000 * sizeof(double));
for(int x227=0; x227 < 45000; x227++) {
x226[x227] = 0.0;

}
double* x231 = (double*)myMalloc(150 * sizeof(double));
for(int x232=0; x232 < 150; x232++) {
x231[x232] = 0.0;

}
double* x236 = (double*)myMalloc(22500 * sizeof(double));
for(int x237=0; x237 < 22500; x237++) {
x236[x237] = 0.0;

}
double* x241 = (double*)myMalloc(22500 * sizeof(double));
for(int x242=0; x242 < 22500; x242++) {
x241[x242] = 0.0;

}
double* x246 = (double*)myMalloc(150 * sizeof(double));
for(int x247=0; x247 < 150; x247++) {
x246[x247] = 0.0;

}
double* x251 = (double*)myMalloc(22500 * sizeof(double));
for(int x252=0; x252 < 22500; x252++) {
x251[x252] = 0.0;

}
double* x256 = (double*)myMalloc(22500 * sizeof(double));
for(int x257=0; x257 < 22500; x257++) {
x256[x257] = 0.0;

}
double* x261 = (double*)myMalloc(22500 * sizeof(double));
for(int x262=0; x262 < 22500; x262++) {
x261[x262] = 0.0;

}
double* x266 = (double*)myMalloc(22500 * sizeof(double));
for(int x267=0; x267 < 22500; x267++) {
x266[x267] = 0.0;

}
double* x271 = (double*)myMalloc(150 * sizeof(double));
for(int x272=0; x272 < 150; x272++) {
x271[x272] = 0.0;

}
double* x276 = (double*)myMalloc(22500 * sizeof(double));
for(int x277=0; x277 < 22500; x277++) {
x276[x277] = 0.0;

}
double* x281 = (double*)myMalloc(22500 * sizeof(double));
for(int x282=0; x282 < 22500; x282++) {
x281[x282] = 0.0;

}
double* x286 = (double*)myMalloc(150 * sizeof(double));
for(int x287=0; x287 < 150; x287++) {
x286[x287] = 0.0;

}
double* x291 = (double*)myMalloc(22500 * sizeof(double));
for(int x292=0; x292 < 22500; x292++) {
x291[x292] = 0.0;

}
double* x296 = (double*)myMalloc(22500 * sizeof(double));
for(int x297=0; x297 < 22500; x297++) {
x296[x297] = 0.0;

}
double* x301 = (double*)myMalloc(150 * sizeof(double));
for(int x302=0; x302 < 150; x302++) {
x301[x302] = 0.0;

}
double* x306 = (double*)myMalloc(750 * sizeof(double));
for(int x307=0; x307 < 750; x307++) {
x306[x307] = 0.0;

}
double* x311 = (double*)myMalloc(5 * sizeof(double));
for(int x312=0; x312 < 5; x312++) {
x311[x312] = 0.0;

}
double* x316 = (double*)myMalloc(300 * sizeof(double));
for(int x317=0; x317 < 300; x317++) {
x316[x317] = 0.0;

}
double* x321 = (double*)myMalloc(300 * sizeof(double));
for(int x322=0; x322 < 300; x322++) {
x321[x322] = 0.0;

}
double* x326 = (double*)myMalloc(150 * sizeof(double));
for(int x327=0; x327 < 150; x327++) {
x326[x327] = 0.0;

}
double* x331 = (double*)myMalloc(150 * sizeof(double));
for(int x332=0; x332 < 150; x332++) {
x331[x332] = 0.0;

}
double* x336 = (double*)myMalloc(45000 * sizeof(double));
for(int x337=0; x337 < 45000; x337++) {
x336[x337] = 0.0;

}
double* x341 = (double*)myMalloc(150 * sizeof(double));
for(int x342=0; x342 < 150; x342++) {
x341[x342] = 0.0;

}
double* x346 = (double*)myMalloc(45000 * sizeof(double));
for(int x347=0; x347 < 45000; x347++) {
x346[x347] = 0.0;

}
double* x351 = (double*)myMalloc(150 * sizeof(double));
for(int x352=0; x352 < 150; x352++) {
x351[x352] = 0.0;

}
double* x356 = (double*)myMalloc(45000 * sizeof(double));
for(int x357=0; x357 < 45000; x357++) {
x356[x357] = 0.0;

}
double* x361 = (double*)myMalloc(150 * sizeof(double));
for(int x362=0; x362 < 150; x362++) {
x361[x362] = 0.0;

}
double* x366 = (double*)myMalloc(22500 * sizeof(double));
for(int x367=0; x367 < 22500; x367++) {
x366[x367] = 0.0;

}
double* x371 = (double*)myMalloc(22500 * sizeof(double));
for(int x372=0; x372 < 22500; x372++) {
x371[x372] = 0.0;

}
double* x376 = (double*)myMalloc(150 * sizeof(double));
for(int x377=0; x377 < 150; x377++) {
x376[x377] = 0.0;

}
double* x381 = (double*)myMalloc(22500 * sizeof(double));
for(int x382=0; x382 < 22500; x382++) {
x381[x382] = 0.0;

}
double* x386 = (double*)myMalloc(22500 * sizeof(double));
for(int x387=0; x387 < 22500; x387++) {
x386[x387] = 0.0;

}
double* x391 = (double*)myMalloc(22500 * sizeof(double));
for(int x392=0; x392 < 22500; x392++) {
x391[x392] = 0.0;

}
double* x396 = (double*)myMalloc(22500 * sizeof(double));
for(int x397=0; x397 < 22500; x397++) {
x396[x397] = 0.0;

}
double* x401 = (double*)myMalloc(150 * sizeof(double));
for(int x402=0; x402 < 150; x402++) {
x401[x402] = 0.0;

}
double* x406 = (double*)myMalloc(22500 * sizeof(double));
for(int x407=0; x407 < 22500; x407++) {
x406[x407] = 0.0;

}
double* x411 = (double*)myMalloc(22500 * sizeof(double));
for(int x412=0; x412 < 22500; x412++) {
x411[x412] = 0.0;

}
double* x416 = (double*)myMalloc(150 * sizeof(double));
for(int x417=0; x417 < 150; x417++) {
x416[x417] = 0.0;

}
double* x421 = (double*)myMalloc(22500 * sizeof(double));
for(int x422=0; x422 < 22500; x422++) {
x421[x422] = 0.0;

}
double* x426 = (double*)myMalloc(22500 * sizeof(double));
for(int x427=0; x427 < 22500; x427++) {
x426[x427] = 0.0;

}
double* x431 = (double*)myMalloc(150 * sizeof(double));
for(int x432=0; x432 < 150; x432++) {
x431[x432] = 0.0;

}
double* x436 = (double*)myMalloc(750 * sizeof(double));
for(int x437=0; x437 < 750; x437++) {
x436[x437] = 0.0;

}
double* x441 = (double*)myMalloc(5 * sizeof(double));
for(int x442=0; x442 < 5; x442++) {
x441[x442] = 0.0;

}
double* x446 = (double*)myMalloc(30 * sizeof(double));
int64_t x447 = (long)mallocAddr;
double x448 = ((double)clock() / CLOCKS_PER_SEC);
for(int x450=0; x450 < 30; x450++) {
double x451 = 0.0;
for(int x452=0; x452 < x23; x452++) {
int32_t x453 = x452 % x23;
int32_t x454 = x453 * 4;
int* x455 = x25[x454];
int32_t x456 = x454 + 1;
int* x457 = x25[x456];
int32_t x458 = x454 + 2;
int* x459 = x25[x458];
int32_t x460 = x454 + 3;
int* x461 = x25[x460];
function<void(int32_t,function<void(double**)>,double**)> x508 = [&](int32_t x509,function<void(double**)> x510,double** x511) {
double** x514 = x511;
double* x515 = x514[0];
double* x516 = x514[1];
double* x517 = x514[2];
double* x518 = x514[3];
double* x519 = x514[4];
double* x520 = x514[5];
int32_t x512 = x509;
bool x521 = x512 >= 0;
if (x521) {
int32_t x522 = x459[x512];
double** x2521 = (double**)myMalloc(6 * sizeof(double*));
x2521[0] = x515;
x2521[1] = x516;
x2521[2] = x517;
x2521[3] = x518;
x2521[4] = x519;
x2521[5] = x520;
function<void(double**)> x513 = x510;
function<void(double**)> x523 = [&](double** x524) {
double* x525 = x524[0];
double* x526 = x524[1];
double* x527 = x524[2];
double* x528 = x524[3];
double* x529 = x524[4];
double* x530 = x524[5];
int32_t x531 = x461[x512];
double** x2511 = (double**)myMalloc(6 * sizeof(double*));
x2511[0] = x515;
x2511[1] = x516;
x2511[2] = x517;
x2511[3] = x518;
x2511[4] = x519;
x2511[5] = x520;
function<void(double**)> x532 = [&](double** x533) {
double* x534 = x533[0];
double* x535 = x533[1];
double* x536 = x533[2];
double* x537 = x533[3];
double* x538 = x533[4];
double* x539 = x533[5];
double* x540 = (double*)myMalloc(5 * sizeof(double));
for(int x541=0; x541 < 5; x541++) {
x540[x541] = 0.0;

}
int32_t x545 = x455[x512];
x540[x545] = 1.0;
double* x547 = (double*)myMalloc(5 * sizeof(double));
for(int x548=0; x548 < 5; x548++) {
x547[x548] = 0.0;

}
int32_t x552 = x459[x512];
bool x553 = x552 < 0;
if (x553) {
int32_t x2492 = x457[x512];
double* x2493 = x6[x2492];
double* x2494 = (double*)myMalloc(300 * sizeof(double));
for(int x2495=0; x2495 < 300; x2495++) {
x2494[x2495] = 0.0;

}
double** x2499 = (double**)myMalloc(2 * sizeof(double*));
x2499[0] = x2493;
x2499[1] = x2494;
function<void(double**)> x554 = [&](double** x555) {
double* x556 = x555[0];
double* x557 = x555[1];
int32_t x558 = x459[x512];
bool x559 = x558 < 0;
if (x559) {
// dot List(150, 300) - WrappedArray(300)
int32_t x2177 = 0;
double* x2178 = (double*)myMalloc(150 * sizeof(double));
for(int x2179=0; x2179 < 150; x2179++) {
double x2180 = 0.0;
for(int x2181=0; x2181 < 300; x2181++) {
int32_t x2182 = x2177;
double x2183 = x49[x2182];
double x2184 = x556[x2181];
double x2185 = x2183 * x2184;
x2180 += x2185;
x2177 += 1;

}
double x2190 = x2180;
x2178[x2179] = x2190;

}
double* x2194 = (double*)myMalloc(150 * sizeof(double));
for(int x2195=0; x2195 < 150; x2195++) {
x2194[x2195] = 0.0;

}
double* x2199 = (double*)myMalloc(150 * sizeof(double));
for(int x2200=0; x2200 < 150; x2200++) {
double x2201 = x2178[x2200];
double x2202 = x58[x2200];
double x2203 = x2201 + x2202;
x2199[x2200] = x2203;

}
double* x2207 = (double*)myMalloc(150 * sizeof(double));
for(int x2208=0; x2208 < 150; x2208++) {
x2207[x2208] = 0.0;

}
double* x2212 = (double*)myMalloc(150 * sizeof(double));
for(int x2213=0; x2213 < 150; x2213++) {
double x2214 = x2199[x2213];
double x2215 = -1.0 * x2214;
double x2216 = exp(x2215);
double x2217 = x2216 + 1.0;
double x2218 = 1.0 / x2217;
x2212[x2213] = x2218;

}
double* x2222 = (double*)myMalloc(150 * sizeof(double));
for(int x2223=0; x2223 < 150; x2223++) {
x2222[x2223] = 0.0;

}
double** x2227 = (double**)myMalloc(2 * sizeof(double*));
x2227[0] = x2212;
x2227[1] = x2222;
function<void(double**)> x560 = [&](double** x561) {
double* x562 = x561[0];
double* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
double** x1970 = (double**)myMalloc(2 * sizeof(double*));
x1970[0] = x326;
x1970[1] = x331;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x1764 = (double**)myMalloc(2 * sizeof(double*));
x1764[0] = x326;
x1764[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1764);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1770 = 0;
double* x1771 = (double*)myMalloc(150 * sizeof(double));
for(int x1772=0; x1772 < 150; x1772++) {
double x1773 = 0.0;
for(int x1774=0; x1774 < 150; x1774++) {
int32_t x1775 = x1770;
double x1776 = x128[x1775];
double x1777 = x527[x1774];
double x1778 = x1776 * x1777;
x1773 += x1778;
x1770 += 1;

}
double x1783 = x1773;
x1771[x1772] = x1783;

}
double* x1787 = (double*)myMalloc(150 * sizeof(double));
for(int x1788=0; x1788 < 150; x1788++) {
x1787[x1788] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1793 = 0;
double* x1794 = (double*)myMalloc(150 * sizeof(double));
for(int x1795=0; x1795 < 150; x1795++) {
double x1796 = 0.0;
for(int x1797=0; x1797 < 150; x1797++) {
int32_t x1798 = x1793;
double x1799 = x136[x1798];
double x1800 = x536[x1797];
double x1801 = x1799 * x1800;
x1796 += x1801;
x1793 += 1;

}
double x1806 = x1796;
x1794[x1795] = x1806;

}
double* x1810 = (double*)myMalloc(150 * sizeof(double));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0;

}
double* x1815 = (double*)myMalloc(150 * sizeof(double));
for(int x1816=0; x1816 < 150; x1816++) {
double x1817 = x1771[x1816];
double x1818 = x1794[x1816];
double x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
double* x1823 = (double*)myMalloc(150 * sizeof(double));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0;

}
double* x1828 = (double*)myMalloc(150 * sizeof(double));
for(int x1829=0; x1829 < 150; x1829++) {
double x1830 = x1815[x1829];
double x1831 = x144[x1829];
double x1832 = x1830 + x1831;
x1828[x1829] = x1832;

}
double* x1836 = (double*)myMalloc(150 * sizeof(double));
for(int x1837=0; x1837 < 150; x1837++) {
x1836[x1837] = 0.0;

}
double* x1841 = (double*)myMalloc(150 * sizeof(double));
for(int x1842=0; x1842 < 150; x1842++) {
double x1843 = x1828[x1842];
double x1844 = -1.0 * x1843;
double x1845 = exp(x1844);
double x1846 = x1845 + 1.0;
double x1847 = 1.0 / x1846;
x1841[x1842] = x1847;

}
double* x1851 = (double*)myMalloc(150 * sizeof(double));
for(int x1852=0; x1852 < 150; x1852++) {
x1851[x1852] = 0.0;

}
double** x1856 = (double**)myMalloc(2 * sizeof(double*));
x1856[0] = x1841;
x1856[1] = x1851;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1856);
for(int x1860=0; x1860 < 150; x1860++) {
double x1861 = x1836[x1860];
double x1862 = x1841[x1860];
double x1865 = x1851[x1860];
double x1863 = 1.0 - x1862;
double x1864 = x1863 * x1862;
double x1866 = x1864 * x1865;
double x1867 = x1861 + x1866;
x1836[x1860] = x1867;

}
// backpropagate +
for(int x1872=0; x1872 < 150; x1872++) {
double x1873 = x1823[x1872];
double x1874 = x1836[x1872];
double x1875 = x1873 + x1874;
x1823[x1872] = x1875;

}
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x271[x1879];
double x1881 = x1836[x1879];
double x1882 = x1880 + x1881;
x271[x1879] = x1882;

}
// backpropagate +
for(int x1887=0; x1887 < 150; x1887++) {
double x1888 = x1787[x1887];
double x1889 = x1823[x1887];
double x1890 = x1888 + x1889;
x1787[x1887] = x1890;

}
for(int x1894=0; x1894 < 150; x1894++) {
double x1895 = x1810[x1894];
double x1896 = x1823[x1894];
double x1897 = x1895 + x1896;
x1810[x1894] = x1897;

}
// add_cartesian
int32_t x1902 = 0;
for(int x1903=0; x1903 < 150; x1903++) {
for(int x1904=0; x1904 < 150; x1904++) {
int32_t x1905 = x1902;
int32_t x1906 = x1905 + x1904;
double x1907 = x266[x1906];
double x1908 = x536[x1904];
double x1909 = x1810[x1903];
double x1910 = x1908 * x1909;
double x1911 = x1907 + x1910;
x266[x1906] = x1911;

}
x1902 += 150;

}
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
double x1921 = x537[x1920];
int32_t x1922 = x1918;
int32_t x1923 = x1922 + x1920;
double x1924 = x136[x1923];
double x1925 = x1810[x1919];
double x1926 = x1924 * x1925;
double x1927 = x1921 + x1926;
x537[x1920] = x1927;

}
x1918 += 150;

}
// add_cartesian
int32_t x1935 = 0;
for(int x1936=0; x1936 < 150; x1936++) {
for(int x1937=0; x1937 < 150; x1937++) {
int32_t x1938 = x1935;
int32_t x1939 = x1938 + x1937;
double x1940 = x261[x1939];
double x1941 = x527[x1937];
double x1942 = x1787[x1936];
double x1943 = x1941 * x1942;
double x1944 = x1940 + x1943;
x261[x1939] = x1944;

}
x1935 += 150;

}
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
double x1954 = x528[x1953];
int32_t x1955 = x1951;
int32_t x1956 = x1955 + x1953;
double x1957 = x128[x1956];
double x1958 = x1787[x1952];
double x1959 = x1957 * x1958;
double x1960 = x1954 + x1959;
x528[x1953] = x1960;

}
x1951 += 150;

}
}
};
x566(x1970);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1976 = 0;
double* x1977 = (double*)myMalloc(150 * sizeof(double));
for(int x1978=0; x1978 < 150; x1978++) {
double x1979 = 0.0;
for(int x1980=0; x1980 < 150; x1980++) {
int32_t x1981 = x1976;
double x1982 = x112[x1981];
double x1983 = x527[x1980];
double x1984 = x1982 * x1983;
x1979 += x1984;
x1976 += 1;

}
double x1989 = x1979;
x1977[x1978] = x1989;

}
double* x1993 = (double*)myMalloc(150 * sizeof(double));
for(int x1994=0; x1994 < 150; x1994++) {
x1993[x1994] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1999 = 0;
double* x2000 = (double*)myMalloc(150 * sizeof(double));
for(int x2001=0; x2001 < 150; x2001++) {
double x2002 = 0.0;
for(int x2003=0; x2003 < 150; x2003++) {
int32_t x2004 = x1999;
double x2005 = x120[x2004];
double x2006 = x536[x2003];
double x2007 = x2005 * x2006;
x2002 += x2007;
x1999 += 1;

}
double x2012 = x2002;
x2000[x2001] = x2012;

}
double* x2016 = (double*)myMalloc(150 * sizeof(double));
for(int x2017=0; x2017 < 150; x2017++) {
x2016[x2017] = 0.0;

}
double* x2021 = (double*)myMalloc(150 * sizeof(double));
for(int x2022=0; x2022 < 150; x2022++) {
double x2023 = x1977[x2022];
double x2024 = x2000[x2022];
double x2025 = x2023 + x2024;
x2021[x2022] = x2025;

}
double* x2029 = (double*)myMalloc(150 * sizeof(double));
for(int x2030=0; x2030 < 150; x2030++) {
x2029[x2030] = 0.0;

}
double* x2034 = (double*)myMalloc(150 * sizeof(double));
for(int x2035=0; x2035 < 150; x2035++) {
double x2036 = x2021[x2035];
double x2037 = x144[x2035];
double x2038 = x2036 + x2037;
x2034[x2035] = x2038;

}
double* x2042 = (double*)myMalloc(150 * sizeof(double));
for(int x2043=0; x2043 < 150; x2043++) {
x2042[x2043] = 0.0;

}
double* x2047 = (double*)myMalloc(150 * sizeof(double));
for(int x2048=0; x2048 < 150; x2048++) {
double x2049 = x2034[x2048];
double x2050 = -1.0 * x2049;
double x2051 = exp(x2050);
double x2052 = x2051 + 1.0;
double x2053 = 1.0 / x2052;
x2047[x2048] = x2053;

}
double* x2057 = (double*)myMalloc(150 * sizeof(double));
for(int x2058=0; x2058 < 150; x2058++) {
x2057[x2058] = 0.0;

}
double** x2062 = (double**)myMalloc(2 * sizeof(double*));
x2062[0] = x2047;
x2062[1] = x2057;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x1764 = (double**)myMalloc(2 * sizeof(double*));
x1764[0] = x326;
x1764[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1764);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1770 = 0;
double* x1771 = (double*)myMalloc(150 * sizeof(double));
for(int x1772=0; x1772 < 150; x1772++) {
double x1773 = 0.0;
for(int x1774=0; x1774 < 150; x1774++) {
int32_t x1775 = x1770;
double x1776 = x128[x1775];
double x1777 = x527[x1774];
double x1778 = x1776 * x1777;
x1773 += x1778;
x1770 += 1;

}
double x1783 = x1773;
x1771[x1772] = x1783;

}
double* x1787 = (double*)myMalloc(150 * sizeof(double));
for(int x1788=0; x1788 < 150; x1788++) {
x1787[x1788] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1793 = 0;
double* x1794 = (double*)myMalloc(150 * sizeof(double));
for(int x1795=0; x1795 < 150; x1795++) {
double x1796 = 0.0;
for(int x1797=0; x1797 < 150; x1797++) {
int32_t x1798 = x1793;
double x1799 = x136[x1798];
double x1800 = x536[x1797];
double x1801 = x1799 * x1800;
x1796 += x1801;
x1793 += 1;

}
double x1806 = x1796;
x1794[x1795] = x1806;

}
double* x1810 = (double*)myMalloc(150 * sizeof(double));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0;

}
double* x1815 = (double*)myMalloc(150 * sizeof(double));
for(int x1816=0; x1816 < 150; x1816++) {
double x1817 = x1771[x1816];
double x1818 = x1794[x1816];
double x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
double* x1823 = (double*)myMalloc(150 * sizeof(double));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0;

}
double* x1828 = (double*)myMalloc(150 * sizeof(double));
for(int x1829=0; x1829 < 150; x1829++) {
double x1830 = x1815[x1829];
double x1831 = x144[x1829];
double x1832 = x1830 + x1831;
x1828[x1829] = x1832;

}
double* x1836 = (double*)myMalloc(150 * sizeof(double));
for(int x1837=0; x1837 < 150; x1837++) {
x1836[x1837] = 0.0;

}
double* x1841 = (double*)myMalloc(150 * sizeof(double));
for(int x1842=0; x1842 < 150; x1842++) {
double x1843 = x1828[x1842];
double x1844 = -1.0 * x1843;
double x1845 = exp(x1844);
double x1846 = x1845 + 1.0;
double x1847 = 1.0 / x1846;
x1841[x1842] = x1847;

}
double* x1851 = (double*)myMalloc(150 * sizeof(double));
for(int x1852=0; x1852 < 150; x1852++) {
x1851[x1852] = 0.0;

}
double** x1856 = (double**)myMalloc(2 * sizeof(double*));
x1856[0] = x1841;
x1856[1] = x1851;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1856);
for(int x1860=0; x1860 < 150; x1860++) {
double x1861 = x1836[x1860];
double x1862 = x1841[x1860];
double x1865 = x1851[x1860];
double x1863 = 1.0 - x1862;
double x1864 = x1863 * x1862;
double x1866 = x1864 * x1865;
double x1867 = x1861 + x1866;
x1836[x1860] = x1867;

}
// backpropagate +
for(int x1872=0; x1872 < 150; x1872++) {
double x1873 = x1823[x1872];
double x1874 = x1836[x1872];
double x1875 = x1873 + x1874;
x1823[x1872] = x1875;

}
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x271[x1879];
double x1881 = x1836[x1879];
double x1882 = x1880 + x1881;
x271[x1879] = x1882;

}
// backpropagate +
for(int x1887=0; x1887 < 150; x1887++) {
double x1888 = x1787[x1887];
double x1889 = x1823[x1887];
double x1890 = x1888 + x1889;
x1787[x1887] = x1890;

}
for(int x1894=0; x1894 < 150; x1894++) {
double x1895 = x1810[x1894];
double x1896 = x1823[x1894];
double x1897 = x1895 + x1896;
x1810[x1894] = x1897;

}
// add_cartesian
int32_t x1902 = 0;
for(int x1903=0; x1903 < 150; x1903++) {
for(int x1904=0; x1904 < 150; x1904++) {
int32_t x1905 = x1902;
int32_t x1906 = x1905 + x1904;
double x1907 = x266[x1906];
double x1908 = x536[x1904];
double x1909 = x1810[x1903];
double x1910 = x1908 * x1909;
double x1911 = x1907 + x1910;
x266[x1906] = x1911;

}
x1902 += 150;

}
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
double x1921 = x537[x1920];
int32_t x1922 = x1918;
int32_t x1923 = x1922 + x1920;
double x1924 = x136[x1923];
double x1925 = x1810[x1919];
double x1926 = x1924 * x1925;
double x1927 = x1921 + x1926;
x537[x1920] = x1927;

}
x1918 += 150;

}
// add_cartesian
int32_t x1935 = 0;
for(int x1936=0; x1936 < 150; x1936++) {
for(int x1937=0; x1937 < 150; x1937++) {
int32_t x1938 = x1935;
int32_t x1939 = x1938 + x1937;
double x1940 = x261[x1939];
double x1941 = x527[x1937];
double x1942 = x1787[x1936];
double x1943 = x1941 * x1942;
double x1944 = x1940 + x1943;
x261[x1939] = x1944;

}
x1935 += 150;

}
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
double x1954 = x528[x1953];
int32_t x1955 = x1951;
int32_t x1956 = x1955 + x1953;
double x1957 = x128[x1956];
double x1958 = x1787[x1952];
double x1959 = x1957 * x1958;
double x1960 = x1954 + x1959;
x528[x1953] = x1960;

}
x1951 += 150;

}
}
};
x566(x2062);
for(int x2066=0; x2066 < 150; x2066++) {
double x2067 = x2042[x2066];
double x2068 = x2047[x2066];
double x2071 = x2057[x2066];
double x2069 = 1.0 - x2068;
double x2070 = x2069 * x2068;
double x2072 = x2070 * x2071;
double x2073 = x2067 + x2072;
x2042[x2066] = x2073;

}
// backpropagate +
for(int x2078=0; x2078 < 150; x2078++) {
double x2079 = x2029[x2078];
double x2080 = x2042[x2078];
double x2081 = x2079 + x2080;
x2029[x2078] = x2081;

}
for(int x2085=0; x2085 < 150; x2085++) {
double x2086 = x271[x2085];
double x2087 = x2042[x2085];
double x2088 = x2086 + x2087;
x271[x2085] = x2088;

}
// backpropagate +
for(int x2093=0; x2093 < 150; x2093++) {
double x2094 = x1993[x2093];
double x2095 = x2029[x2093];
double x2096 = x2094 + x2095;
x1993[x2093] = x2096;

}
for(int x2100=0; x2100 < 150; x2100++) {
double x2101 = x2016[x2100];
double x2102 = x2029[x2100];
double x2103 = x2101 + x2102;
x2016[x2100] = x2103;

}
// add_cartesian
int32_t x2108 = 0;
for(int x2109=0; x2109 < 150; x2109++) {
for(int x2110=0; x2110 < 150; x2110++) {
int32_t x2111 = x2108;
int32_t x2112 = x2111 + x2110;
double x2113 = x256[x2112];
double x2114 = x536[x2110];
double x2115 = x2016[x2109];
double x2116 = x2114 * x2115;
double x2117 = x2113 + x2116;
x256[x2112] = x2117;

}
x2108 += 150;

}
int32_t x2124 = 0;
for(int x2125=0; x2125 < 150; x2125++) {
for(int x2126=0; x2126 < 150; x2126++) {
double x2127 = x537[x2126];
int32_t x2128 = x2124;
int32_t x2129 = x2128 + x2126;
double x2130 = x120[x2129];
double x2131 = x2016[x2125];
double x2132 = x2130 * x2131;
double x2133 = x2127 + x2132;
x537[x2126] = x2133;

}
x2124 += 150;

}
// add_cartesian
int32_t x2141 = 0;
for(int x2142=0; x2142 < 150; x2142++) {
for(int x2143=0; x2143 < 150; x2143++) {
int32_t x2144 = x2141;
int32_t x2145 = x2144 + x2143;
double x2146 = x251[x2145];
double x2147 = x527[x2143];
double x2148 = x1993[x2142];
double x2149 = x2147 * x2148;
double x2150 = x2146 + x2149;
x251[x2145] = x2150;

}
x2141 += 150;

}
int32_t x2157 = 0;
for(int x2158=0; x2158 < 150; x2158++) {
for(int x2159=0; x2159 < 150; x2159++) {
double x2160 = x528[x2159];
int32_t x2161 = x2157;
int32_t x2162 = x2161 + x2159;
double x2163 = x112[x2162];
double x2164 = x1993[x2158];
double x2165 = x2163 * x2164;
double x2166 = x2160 + x2165;
x528[x2159] = x2166;

}
x2157 += 150;

}
}
};
x560(x2227);
for(int x2231=0; x2231 < 150; x2231++) {
double x2232 = x2207[x2231];
double x2233 = x2212[x2231];
double x2236 = x2222[x2231];
double x2234 = 1.0 - x2233;
double x2235 = x2234 * x2233;
double x2237 = x2235 * x2236;
double x2238 = x2232 + x2237;
x2207[x2231] = x2238;

}
// backpropagate +
for(int x2243=0; x2243 < 150; x2243++) {
double x2244 = x2194[x2243];
double x2245 = x2207[x2243];
double x2246 = x2244 + x2245;
x2194[x2243] = x2246;

}
for(int x2250=0; x2250 < 150; x2250++) {
double x2251 = x211[x2250];
double x2252 = x2207[x2250];
double x2253 = x2251 + x2252;
x211[x2250] = x2253;

}
// add_cartesian
int32_t x2258 = 0;
for(int x2259=0; x2259 < 150; x2259++) {
for(int x2260=0; x2260 < 300; x2260++) {
int32_t x2261 = x2258;
int32_t x2262 = x2261 + x2260;
double x2263 = x206[x2262];
double x2264 = x556[x2260];
double x2265 = x2194[x2259];
double x2266 = x2264 * x2265;
double x2267 = x2263 + x2266;
x206[x2262] = x2267;

}
x2258 += 300;

}
int32_t x2274 = 0;
for(int x2275=0; x2275 < 150; x2275++) {
for(int x2276=0; x2276 < 300; x2276++) {
double x2277 = x557[x2276];
int32_t x2278 = x2274;
int32_t x2279 = x2278 + x2276;
double x2280 = x49[x2279];
double x2281 = x2194[x2275];
double x2282 = x2280 * x2281;
double x2283 = x2277 + x2282;
x557[x2276] = x2283;

}
x2274 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2292 = 0;
double* x2293 = (double*)myMalloc(150 * sizeof(double));
for(int x2294=0; x2294 < 150; x2294++) {
double x2295 = 0.0;
for(int x2296=0; x2296 < 150; x2296++) {
int32_t x2297 = x2292;
double x2298 = x90[x2297];
double x2299 = x527[x2296];
double x2300 = x2298 * x2299;
x2295 += x2300;
x2292 += 1;

}
double x2305 = x2295;
x2293[x2294] = x2305;

}
double* x2309 = (double*)myMalloc(150 * sizeof(double));
for(int x2310=0; x2310 < 150; x2310++) {
x2309[x2310] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2315 = 0;
double* x2316 = (double*)myMalloc(150 * sizeof(double));
for(int x2317=0; x2317 < 150; x2317++) {
double x2318 = 0.0;
for(int x2319=0; x2319 < 150; x2319++) {
int32_t x2320 = x2315;
double x2321 = x99[x2320];
double x2322 = x536[x2319];
double x2323 = x2321 * x2322;
x2318 += x2323;
x2315 += 1;

}
double x2328 = x2318;
x2316[x2317] = x2328;

}
double* x2332 = (double*)myMalloc(150 * sizeof(double));
for(int x2333=0; x2333 < 150; x2333++) {
x2332[x2333] = 0.0;

}
double* x2337 = (double*)myMalloc(150 * sizeof(double));
for(int x2338=0; x2338 < 150; x2338++) {
double x2339 = x2293[x2338];
double x2340 = x2316[x2338];
double x2341 = x2339 + x2340;
x2337[x2338] = x2341;

}
double* x2345 = (double*)myMalloc(150 * sizeof(double));
for(int x2346=0; x2346 < 150; x2346++) {
x2345[x2346] = 0.0;

}
double* x2350 = (double*)myMalloc(150 * sizeof(double));
for(int x2351=0; x2351 < 150; x2351++) {
double x2352 = x2337[x2351];
double x2353 = x107[x2351];
double x2354 = x2352 + x2353;
x2350[x2351] = x2354;

}
double* x2358 = (double*)myMalloc(150 * sizeof(double));
for(int x2359=0; x2359 < 150; x2359++) {
x2358[x2359] = 0.0;

}
double* x2363 = (double*)myMalloc(150 * sizeof(double));
for(int x2364=0; x2364 < 150; x2364++) {
double x2365 = x2350[x2364];
double x2366 = -1.0 * x2365;
double x2367 = exp(x2366);
double x2368 = x2367 + 1.0;
double x2369 = 1.0 / x2368;
x2363[x2364] = x2369;

}
double* x2373 = (double*)myMalloc(150 * sizeof(double));
for(int x2374=0; x2374 < 150; x2374++) {
x2373[x2374] = 0.0;

}
double** x2378 = (double**)myMalloc(2 * sizeof(double*));
x2378[0] = x2363;
x2378[1] = x2373;
function<void(double**)> x560 = [&](double** x561) {
double* x562 = x561[0];
double* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
double** x1970 = (double**)myMalloc(2 * sizeof(double*));
x1970[0] = x326;
x1970[1] = x331;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x1764 = (double**)myMalloc(2 * sizeof(double*));
x1764[0] = x326;
x1764[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1764);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1770 = 0;
double* x1771 = (double*)myMalloc(150 * sizeof(double));
for(int x1772=0; x1772 < 150; x1772++) {
double x1773 = 0.0;
for(int x1774=0; x1774 < 150; x1774++) {
int32_t x1775 = x1770;
double x1776 = x128[x1775];
double x1777 = x527[x1774];
double x1778 = x1776 * x1777;
x1773 += x1778;
x1770 += 1;

}
double x1783 = x1773;
x1771[x1772] = x1783;

}
double* x1787 = (double*)myMalloc(150 * sizeof(double));
for(int x1788=0; x1788 < 150; x1788++) {
x1787[x1788] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1793 = 0;
double* x1794 = (double*)myMalloc(150 * sizeof(double));
for(int x1795=0; x1795 < 150; x1795++) {
double x1796 = 0.0;
for(int x1797=0; x1797 < 150; x1797++) {
int32_t x1798 = x1793;
double x1799 = x136[x1798];
double x1800 = x536[x1797];
double x1801 = x1799 * x1800;
x1796 += x1801;
x1793 += 1;

}
double x1806 = x1796;
x1794[x1795] = x1806;

}
double* x1810 = (double*)myMalloc(150 * sizeof(double));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0;

}
double* x1815 = (double*)myMalloc(150 * sizeof(double));
for(int x1816=0; x1816 < 150; x1816++) {
double x1817 = x1771[x1816];
double x1818 = x1794[x1816];
double x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
double* x1823 = (double*)myMalloc(150 * sizeof(double));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0;

}
double* x1828 = (double*)myMalloc(150 * sizeof(double));
for(int x1829=0; x1829 < 150; x1829++) {
double x1830 = x1815[x1829];
double x1831 = x144[x1829];
double x1832 = x1830 + x1831;
x1828[x1829] = x1832;

}
double* x1836 = (double*)myMalloc(150 * sizeof(double));
for(int x1837=0; x1837 < 150; x1837++) {
x1836[x1837] = 0.0;

}
double* x1841 = (double*)myMalloc(150 * sizeof(double));
for(int x1842=0; x1842 < 150; x1842++) {
double x1843 = x1828[x1842];
double x1844 = -1.0 * x1843;
double x1845 = exp(x1844);
double x1846 = x1845 + 1.0;
double x1847 = 1.0 / x1846;
x1841[x1842] = x1847;

}
double* x1851 = (double*)myMalloc(150 * sizeof(double));
for(int x1852=0; x1852 < 150; x1852++) {
x1851[x1852] = 0.0;

}
double** x1856 = (double**)myMalloc(2 * sizeof(double*));
x1856[0] = x1841;
x1856[1] = x1851;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1856);
for(int x1860=0; x1860 < 150; x1860++) {
double x1861 = x1836[x1860];
double x1862 = x1841[x1860];
double x1865 = x1851[x1860];
double x1863 = 1.0 - x1862;
double x1864 = x1863 * x1862;
double x1866 = x1864 * x1865;
double x1867 = x1861 + x1866;
x1836[x1860] = x1867;

}
// backpropagate +
for(int x1872=0; x1872 < 150; x1872++) {
double x1873 = x1823[x1872];
double x1874 = x1836[x1872];
double x1875 = x1873 + x1874;
x1823[x1872] = x1875;

}
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x271[x1879];
double x1881 = x1836[x1879];
double x1882 = x1880 + x1881;
x271[x1879] = x1882;

}
// backpropagate +
for(int x1887=0; x1887 < 150; x1887++) {
double x1888 = x1787[x1887];
double x1889 = x1823[x1887];
double x1890 = x1888 + x1889;
x1787[x1887] = x1890;

}
for(int x1894=0; x1894 < 150; x1894++) {
double x1895 = x1810[x1894];
double x1896 = x1823[x1894];
double x1897 = x1895 + x1896;
x1810[x1894] = x1897;

}
// add_cartesian
int32_t x1902 = 0;
for(int x1903=0; x1903 < 150; x1903++) {
for(int x1904=0; x1904 < 150; x1904++) {
int32_t x1905 = x1902;
int32_t x1906 = x1905 + x1904;
double x1907 = x266[x1906];
double x1908 = x536[x1904];
double x1909 = x1810[x1903];
double x1910 = x1908 * x1909;
double x1911 = x1907 + x1910;
x266[x1906] = x1911;

}
x1902 += 150;

}
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
double x1921 = x537[x1920];
int32_t x1922 = x1918;
int32_t x1923 = x1922 + x1920;
double x1924 = x136[x1923];
double x1925 = x1810[x1919];
double x1926 = x1924 * x1925;
double x1927 = x1921 + x1926;
x537[x1920] = x1927;

}
x1918 += 150;

}
// add_cartesian
int32_t x1935 = 0;
for(int x1936=0; x1936 < 150; x1936++) {
for(int x1937=0; x1937 < 150; x1937++) {
int32_t x1938 = x1935;
int32_t x1939 = x1938 + x1937;
double x1940 = x261[x1939];
double x1941 = x527[x1937];
double x1942 = x1787[x1936];
double x1943 = x1941 * x1942;
double x1944 = x1940 + x1943;
x261[x1939] = x1944;

}
x1935 += 150;

}
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
double x1954 = x528[x1953];
int32_t x1955 = x1951;
int32_t x1956 = x1955 + x1953;
double x1957 = x128[x1956];
double x1958 = x1787[x1952];
double x1959 = x1957 * x1958;
double x1960 = x1954 + x1959;
x528[x1953] = x1960;

}
x1951 += 150;

}
}
};
x566(x1970);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1976 = 0;
double* x1977 = (double*)myMalloc(150 * sizeof(double));
for(int x1978=0; x1978 < 150; x1978++) {
double x1979 = 0.0;
for(int x1980=0; x1980 < 150; x1980++) {
int32_t x1981 = x1976;
double x1982 = x112[x1981];
double x1983 = x527[x1980];
double x1984 = x1982 * x1983;
x1979 += x1984;
x1976 += 1;

}
double x1989 = x1979;
x1977[x1978] = x1989;

}
double* x1993 = (double*)myMalloc(150 * sizeof(double));
for(int x1994=0; x1994 < 150; x1994++) {
x1993[x1994] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1999 = 0;
double* x2000 = (double*)myMalloc(150 * sizeof(double));
for(int x2001=0; x2001 < 150; x2001++) {
double x2002 = 0.0;
for(int x2003=0; x2003 < 150; x2003++) {
int32_t x2004 = x1999;
double x2005 = x120[x2004];
double x2006 = x536[x2003];
double x2007 = x2005 * x2006;
x2002 += x2007;
x1999 += 1;

}
double x2012 = x2002;
x2000[x2001] = x2012;

}
double* x2016 = (double*)myMalloc(150 * sizeof(double));
for(int x2017=0; x2017 < 150; x2017++) {
x2016[x2017] = 0.0;

}
double* x2021 = (double*)myMalloc(150 * sizeof(double));
for(int x2022=0; x2022 < 150; x2022++) {
double x2023 = x1977[x2022];
double x2024 = x2000[x2022];
double x2025 = x2023 + x2024;
x2021[x2022] = x2025;

}
double* x2029 = (double*)myMalloc(150 * sizeof(double));
for(int x2030=0; x2030 < 150; x2030++) {
x2029[x2030] = 0.0;

}
double* x2034 = (double*)myMalloc(150 * sizeof(double));
for(int x2035=0; x2035 < 150; x2035++) {
double x2036 = x2021[x2035];
double x2037 = x144[x2035];
double x2038 = x2036 + x2037;
x2034[x2035] = x2038;

}
double* x2042 = (double*)myMalloc(150 * sizeof(double));
for(int x2043=0; x2043 < 150; x2043++) {
x2042[x2043] = 0.0;

}
double* x2047 = (double*)myMalloc(150 * sizeof(double));
for(int x2048=0; x2048 < 150; x2048++) {
double x2049 = x2034[x2048];
double x2050 = -1.0 * x2049;
double x2051 = exp(x2050);
double x2052 = x2051 + 1.0;
double x2053 = 1.0 / x2052;
x2047[x2048] = x2053;

}
double* x2057 = (double*)myMalloc(150 * sizeof(double));
for(int x2058=0; x2058 < 150; x2058++) {
x2057[x2058] = 0.0;

}
double** x2062 = (double**)myMalloc(2 * sizeof(double*));
x2062[0] = x2047;
x2062[1] = x2057;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x1764 = (double**)myMalloc(2 * sizeof(double*));
x1764[0] = x326;
x1764[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1764);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1770 = 0;
double* x1771 = (double*)myMalloc(150 * sizeof(double));
for(int x1772=0; x1772 < 150; x1772++) {
double x1773 = 0.0;
for(int x1774=0; x1774 < 150; x1774++) {
int32_t x1775 = x1770;
double x1776 = x128[x1775];
double x1777 = x527[x1774];
double x1778 = x1776 * x1777;
x1773 += x1778;
x1770 += 1;

}
double x1783 = x1773;
x1771[x1772] = x1783;

}
double* x1787 = (double*)myMalloc(150 * sizeof(double));
for(int x1788=0; x1788 < 150; x1788++) {
x1787[x1788] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1793 = 0;
double* x1794 = (double*)myMalloc(150 * sizeof(double));
for(int x1795=0; x1795 < 150; x1795++) {
double x1796 = 0.0;
for(int x1797=0; x1797 < 150; x1797++) {
int32_t x1798 = x1793;
double x1799 = x136[x1798];
double x1800 = x536[x1797];
double x1801 = x1799 * x1800;
x1796 += x1801;
x1793 += 1;

}
double x1806 = x1796;
x1794[x1795] = x1806;

}
double* x1810 = (double*)myMalloc(150 * sizeof(double));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0;

}
double* x1815 = (double*)myMalloc(150 * sizeof(double));
for(int x1816=0; x1816 < 150; x1816++) {
double x1817 = x1771[x1816];
double x1818 = x1794[x1816];
double x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
double* x1823 = (double*)myMalloc(150 * sizeof(double));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0;

}
double* x1828 = (double*)myMalloc(150 * sizeof(double));
for(int x1829=0; x1829 < 150; x1829++) {
double x1830 = x1815[x1829];
double x1831 = x144[x1829];
double x1832 = x1830 + x1831;
x1828[x1829] = x1832;

}
double* x1836 = (double*)myMalloc(150 * sizeof(double));
for(int x1837=0; x1837 < 150; x1837++) {
x1836[x1837] = 0.0;

}
double* x1841 = (double*)myMalloc(150 * sizeof(double));
for(int x1842=0; x1842 < 150; x1842++) {
double x1843 = x1828[x1842];
double x1844 = -1.0 * x1843;
double x1845 = exp(x1844);
double x1846 = x1845 + 1.0;
double x1847 = 1.0 / x1846;
x1841[x1842] = x1847;

}
double* x1851 = (double*)myMalloc(150 * sizeof(double));
for(int x1852=0; x1852 < 150; x1852++) {
x1851[x1852] = 0.0;

}
double** x1856 = (double**)myMalloc(2 * sizeof(double*));
x1856[0] = x1841;
x1856[1] = x1851;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1856);
for(int x1860=0; x1860 < 150; x1860++) {
double x1861 = x1836[x1860];
double x1862 = x1841[x1860];
double x1865 = x1851[x1860];
double x1863 = 1.0 - x1862;
double x1864 = x1863 * x1862;
double x1866 = x1864 * x1865;
double x1867 = x1861 + x1866;
x1836[x1860] = x1867;

}
// backpropagate +
for(int x1872=0; x1872 < 150; x1872++) {
double x1873 = x1823[x1872];
double x1874 = x1836[x1872];
double x1875 = x1873 + x1874;
x1823[x1872] = x1875;

}
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x271[x1879];
double x1881 = x1836[x1879];
double x1882 = x1880 + x1881;
x271[x1879] = x1882;

}
// backpropagate +
for(int x1887=0; x1887 < 150; x1887++) {
double x1888 = x1787[x1887];
double x1889 = x1823[x1887];
double x1890 = x1888 + x1889;
x1787[x1887] = x1890;

}
for(int x1894=0; x1894 < 150; x1894++) {
double x1895 = x1810[x1894];
double x1896 = x1823[x1894];
double x1897 = x1895 + x1896;
x1810[x1894] = x1897;

}
// add_cartesian
int32_t x1902 = 0;
for(int x1903=0; x1903 < 150; x1903++) {
for(int x1904=0; x1904 < 150; x1904++) {
int32_t x1905 = x1902;
int32_t x1906 = x1905 + x1904;
double x1907 = x266[x1906];
double x1908 = x536[x1904];
double x1909 = x1810[x1903];
double x1910 = x1908 * x1909;
double x1911 = x1907 + x1910;
x266[x1906] = x1911;

}
x1902 += 150;

}
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
double x1921 = x537[x1920];
int32_t x1922 = x1918;
int32_t x1923 = x1922 + x1920;
double x1924 = x136[x1923];
double x1925 = x1810[x1919];
double x1926 = x1924 * x1925;
double x1927 = x1921 + x1926;
x537[x1920] = x1927;

}
x1918 += 150;

}
// add_cartesian
int32_t x1935 = 0;
for(int x1936=0; x1936 < 150; x1936++) {
for(int x1937=0; x1937 < 150; x1937++) {
int32_t x1938 = x1935;
int32_t x1939 = x1938 + x1937;
double x1940 = x261[x1939];
double x1941 = x527[x1937];
double x1942 = x1787[x1936];
double x1943 = x1941 * x1942;
double x1944 = x1940 + x1943;
x261[x1939] = x1944;

}
x1935 += 150;

}
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
double x1954 = x528[x1953];
int32_t x1955 = x1951;
int32_t x1956 = x1955 + x1953;
double x1957 = x128[x1956];
double x1958 = x1787[x1952];
double x1959 = x1957 * x1958;
double x1960 = x1954 + x1959;
x528[x1953] = x1960;

}
x1951 += 150;

}
}
};
x566(x2062);
for(int x2066=0; x2066 < 150; x2066++) {
double x2067 = x2042[x2066];
double x2068 = x2047[x2066];
double x2071 = x2057[x2066];
double x2069 = 1.0 - x2068;
double x2070 = x2069 * x2068;
double x2072 = x2070 * x2071;
double x2073 = x2067 + x2072;
x2042[x2066] = x2073;

}
// backpropagate +
for(int x2078=0; x2078 < 150; x2078++) {
double x2079 = x2029[x2078];
double x2080 = x2042[x2078];
double x2081 = x2079 + x2080;
x2029[x2078] = x2081;

}
for(int x2085=0; x2085 < 150; x2085++) {
double x2086 = x271[x2085];
double x2087 = x2042[x2085];
double x2088 = x2086 + x2087;
x271[x2085] = x2088;

}
// backpropagate +
for(int x2093=0; x2093 < 150; x2093++) {
double x2094 = x1993[x2093];
double x2095 = x2029[x2093];
double x2096 = x2094 + x2095;
x1993[x2093] = x2096;

}
for(int x2100=0; x2100 < 150; x2100++) {
double x2101 = x2016[x2100];
double x2102 = x2029[x2100];
double x2103 = x2101 + x2102;
x2016[x2100] = x2103;

}
// add_cartesian
int32_t x2108 = 0;
for(int x2109=0; x2109 < 150; x2109++) {
for(int x2110=0; x2110 < 150; x2110++) {
int32_t x2111 = x2108;
int32_t x2112 = x2111 + x2110;
double x2113 = x256[x2112];
double x2114 = x536[x2110];
double x2115 = x2016[x2109];
double x2116 = x2114 * x2115;
double x2117 = x2113 + x2116;
x256[x2112] = x2117;

}
x2108 += 150;

}
int32_t x2124 = 0;
for(int x2125=0; x2125 < 150; x2125++) {
for(int x2126=0; x2126 < 150; x2126++) {
double x2127 = x537[x2126];
int32_t x2128 = x2124;
int32_t x2129 = x2128 + x2126;
double x2130 = x120[x2129];
double x2131 = x2016[x2125];
double x2132 = x2130 * x2131;
double x2133 = x2127 + x2132;
x537[x2126] = x2133;

}
x2124 += 150;

}
// add_cartesian
int32_t x2141 = 0;
for(int x2142=0; x2142 < 150; x2142++) {
for(int x2143=0; x2143 < 150; x2143++) {
int32_t x2144 = x2141;
int32_t x2145 = x2144 + x2143;
double x2146 = x251[x2145];
double x2147 = x527[x2143];
double x2148 = x1993[x2142];
double x2149 = x2147 * x2148;
double x2150 = x2146 + x2149;
x251[x2145] = x2150;

}
x2141 += 150;

}
int32_t x2157 = 0;
for(int x2158=0; x2158 < 150; x2158++) {
for(int x2159=0; x2159 < 150; x2159++) {
double x2160 = x528[x2159];
int32_t x2161 = x2157;
int32_t x2162 = x2161 + x2159;
double x2163 = x112[x2162];
double x2164 = x1993[x2158];
double x2165 = x2163 * x2164;
double x2166 = x2160 + x2165;
x528[x2159] = x2166;

}
x2157 += 150;

}
}
};
x560(x2378);
for(int x2382=0; x2382 < 150; x2382++) {
double x2383 = x2358[x2382];
double x2384 = x2363[x2382];
double x2387 = x2373[x2382];
double x2385 = 1.0 - x2384;
double x2386 = x2385 * x2384;
double x2388 = x2386 * x2387;
double x2389 = x2383 + x2388;
x2358[x2382] = x2389;

}
// backpropagate +
for(int x2394=0; x2394 < 150; x2394++) {
double x2395 = x2345[x2394];
double x2396 = x2358[x2394];
double x2397 = x2395 + x2396;
x2345[x2394] = x2397;

}
for(int x2401=0; x2401 < 150; x2401++) {
double x2402 = x246[x2401];
double x2403 = x2358[x2401];
double x2404 = x2402 + x2403;
x246[x2401] = x2404;

}
// backpropagate +
for(int x2409=0; x2409 < 150; x2409++) {
double x2410 = x2309[x2409];
double x2411 = x2345[x2409];
double x2412 = x2410 + x2411;
x2309[x2409] = x2412;

}
for(int x2416=0; x2416 < 150; x2416++) {
double x2417 = x2332[x2416];
double x2418 = x2345[x2416];
double x2419 = x2417 + x2418;
x2332[x2416] = x2419;

}
// add_cartesian
int32_t x2424 = 0;
for(int x2425=0; x2425 < 150; x2425++) {
for(int x2426=0; x2426 < 150; x2426++) {
int32_t x2427 = x2424;
int32_t x2428 = x2427 + x2426;
double x2429 = x241[x2428];
double x2430 = x536[x2426];
double x2431 = x2332[x2425];
double x2432 = x2430 * x2431;
double x2433 = x2429 + x2432;
x241[x2428] = x2433;

}
x2424 += 150;

}
int32_t x2440 = 0;
for(int x2441=0; x2441 < 150; x2441++) {
for(int x2442=0; x2442 < 150; x2442++) {
double x2443 = x537[x2442];
int32_t x2444 = x2440;
int32_t x2445 = x2444 + x2442;
double x2446 = x99[x2445];
double x2447 = x2332[x2441];
double x2448 = x2446 * x2447;
double x2449 = x2443 + x2448;
x537[x2442] = x2449;

}
x2440 += 150;

}
// add_cartesian
int32_t x2457 = 0;
for(int x2458=0; x2458 < 150; x2458++) {
for(int x2459=0; x2459 < 150; x2459++) {
int32_t x2460 = x2457;
int32_t x2461 = x2460 + x2459;
double x2462 = x236[x2461];
double x2463 = x527[x2459];
double x2464 = x2309[x2458];
double x2465 = x2463 * x2464;
double x2466 = x2462 + x2465;
x236[x2461] = x2466;

}
x2457 += 150;

}
int32_t x2473 = 0;
for(int x2474=0; x2474 < 150; x2474++) {
for(int x2475=0; x2475 < 150; x2475++) {
double x2476 = x528[x2475];
int32_t x2477 = x2473;
int32_t x2478 = x2477 + x2475;
double x2479 = x90[x2478];
double x2480 = x2309[x2474];
double x2481 = x2479 * x2480;
double x2482 = x2476 + x2481;
x528[x2475] = x2482;

}
x2473 += 150;

}
}
};
x554(x2499);
} else {
double** x2504 = (double**)myMalloc(2 * sizeof(double*));
x2504[0] = x316;
x2504[1] = x321;
function<void(double**)> x554 = [&](double** x555) {
double* x556 = x555[0];
double* x557 = x555[1];
int32_t x558 = x459[x512];
bool x559 = x558 < 0;
if (x559) {
// dot List(150, 300) - WrappedArray(300)
int32_t x2177 = 0;
double* x2178 = (double*)myMalloc(150 * sizeof(double));
for(int x2179=0; x2179 < 150; x2179++) {
double x2180 = 0.0;
for(int x2181=0; x2181 < 300; x2181++) {
int32_t x2182 = x2177;
double x2183 = x49[x2182];
double x2184 = x556[x2181];
double x2185 = x2183 * x2184;
x2180 += x2185;
x2177 += 1;

}
double x2190 = x2180;
x2178[x2179] = x2190;

}
double* x2194 = (double*)myMalloc(150 * sizeof(double));
for(int x2195=0; x2195 < 150; x2195++) {
x2194[x2195] = 0.0;

}
double* x2199 = (double*)myMalloc(150 * sizeof(double));
for(int x2200=0; x2200 < 150; x2200++) {
double x2201 = x2178[x2200];
double x2202 = x58[x2200];
double x2203 = x2201 + x2202;
x2199[x2200] = x2203;

}
double* x2207 = (double*)myMalloc(150 * sizeof(double));
for(int x2208=0; x2208 < 150; x2208++) {
x2207[x2208] = 0.0;

}
double* x2212 = (double*)myMalloc(150 * sizeof(double));
for(int x2213=0; x2213 < 150; x2213++) {
double x2214 = x2199[x2213];
double x2215 = -1.0 * x2214;
double x2216 = exp(x2215);
double x2217 = x2216 + 1.0;
double x2218 = 1.0 / x2217;
x2212[x2213] = x2218;

}
double* x2222 = (double*)myMalloc(150 * sizeof(double));
for(int x2223=0; x2223 < 150; x2223++) {
x2222[x2223] = 0.0;

}
double** x2227 = (double**)myMalloc(2 * sizeof(double*));
x2227[0] = x2212;
x2227[1] = x2222;
function<void(double**)> x560 = [&](double** x561) {
double* x562 = x561[0];
double* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
double** x1970 = (double**)myMalloc(2 * sizeof(double*));
x1970[0] = x326;
x1970[1] = x331;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x1764 = (double**)myMalloc(2 * sizeof(double*));
x1764[0] = x326;
x1764[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1764);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1770 = 0;
double* x1771 = (double*)myMalloc(150 * sizeof(double));
for(int x1772=0; x1772 < 150; x1772++) {
double x1773 = 0.0;
for(int x1774=0; x1774 < 150; x1774++) {
int32_t x1775 = x1770;
double x1776 = x128[x1775];
double x1777 = x527[x1774];
double x1778 = x1776 * x1777;
x1773 += x1778;
x1770 += 1;

}
double x1783 = x1773;
x1771[x1772] = x1783;

}
double* x1787 = (double*)myMalloc(150 * sizeof(double));
for(int x1788=0; x1788 < 150; x1788++) {
x1787[x1788] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1793 = 0;
double* x1794 = (double*)myMalloc(150 * sizeof(double));
for(int x1795=0; x1795 < 150; x1795++) {
double x1796 = 0.0;
for(int x1797=0; x1797 < 150; x1797++) {
int32_t x1798 = x1793;
double x1799 = x136[x1798];
double x1800 = x536[x1797];
double x1801 = x1799 * x1800;
x1796 += x1801;
x1793 += 1;

}
double x1806 = x1796;
x1794[x1795] = x1806;

}
double* x1810 = (double*)myMalloc(150 * sizeof(double));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0;

}
double* x1815 = (double*)myMalloc(150 * sizeof(double));
for(int x1816=0; x1816 < 150; x1816++) {
double x1817 = x1771[x1816];
double x1818 = x1794[x1816];
double x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
double* x1823 = (double*)myMalloc(150 * sizeof(double));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0;

}
double* x1828 = (double*)myMalloc(150 * sizeof(double));
for(int x1829=0; x1829 < 150; x1829++) {
double x1830 = x1815[x1829];
double x1831 = x144[x1829];
double x1832 = x1830 + x1831;
x1828[x1829] = x1832;

}
double* x1836 = (double*)myMalloc(150 * sizeof(double));
for(int x1837=0; x1837 < 150; x1837++) {
x1836[x1837] = 0.0;

}
double* x1841 = (double*)myMalloc(150 * sizeof(double));
for(int x1842=0; x1842 < 150; x1842++) {
double x1843 = x1828[x1842];
double x1844 = -1.0 * x1843;
double x1845 = exp(x1844);
double x1846 = x1845 + 1.0;
double x1847 = 1.0 / x1846;
x1841[x1842] = x1847;

}
double* x1851 = (double*)myMalloc(150 * sizeof(double));
for(int x1852=0; x1852 < 150; x1852++) {
x1851[x1852] = 0.0;

}
double** x1856 = (double**)myMalloc(2 * sizeof(double*));
x1856[0] = x1841;
x1856[1] = x1851;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1856);
for(int x1860=0; x1860 < 150; x1860++) {
double x1861 = x1836[x1860];
double x1862 = x1841[x1860];
double x1865 = x1851[x1860];
double x1863 = 1.0 - x1862;
double x1864 = x1863 * x1862;
double x1866 = x1864 * x1865;
double x1867 = x1861 + x1866;
x1836[x1860] = x1867;

}
// backpropagate +
for(int x1872=0; x1872 < 150; x1872++) {
double x1873 = x1823[x1872];
double x1874 = x1836[x1872];
double x1875 = x1873 + x1874;
x1823[x1872] = x1875;

}
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x271[x1879];
double x1881 = x1836[x1879];
double x1882 = x1880 + x1881;
x271[x1879] = x1882;

}
// backpropagate +
for(int x1887=0; x1887 < 150; x1887++) {
double x1888 = x1787[x1887];
double x1889 = x1823[x1887];
double x1890 = x1888 + x1889;
x1787[x1887] = x1890;

}
for(int x1894=0; x1894 < 150; x1894++) {
double x1895 = x1810[x1894];
double x1896 = x1823[x1894];
double x1897 = x1895 + x1896;
x1810[x1894] = x1897;

}
// add_cartesian
int32_t x1902 = 0;
for(int x1903=0; x1903 < 150; x1903++) {
for(int x1904=0; x1904 < 150; x1904++) {
int32_t x1905 = x1902;
int32_t x1906 = x1905 + x1904;
double x1907 = x266[x1906];
double x1908 = x536[x1904];
double x1909 = x1810[x1903];
double x1910 = x1908 * x1909;
double x1911 = x1907 + x1910;
x266[x1906] = x1911;

}
x1902 += 150;

}
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
double x1921 = x537[x1920];
int32_t x1922 = x1918;
int32_t x1923 = x1922 + x1920;
double x1924 = x136[x1923];
double x1925 = x1810[x1919];
double x1926 = x1924 * x1925;
double x1927 = x1921 + x1926;
x537[x1920] = x1927;

}
x1918 += 150;

}
// add_cartesian
int32_t x1935 = 0;
for(int x1936=0; x1936 < 150; x1936++) {
for(int x1937=0; x1937 < 150; x1937++) {
int32_t x1938 = x1935;
int32_t x1939 = x1938 + x1937;
double x1940 = x261[x1939];
double x1941 = x527[x1937];
double x1942 = x1787[x1936];
double x1943 = x1941 * x1942;
double x1944 = x1940 + x1943;
x261[x1939] = x1944;

}
x1935 += 150;

}
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
double x1954 = x528[x1953];
int32_t x1955 = x1951;
int32_t x1956 = x1955 + x1953;
double x1957 = x128[x1956];
double x1958 = x1787[x1952];
double x1959 = x1957 * x1958;
double x1960 = x1954 + x1959;
x528[x1953] = x1960;

}
x1951 += 150;

}
}
};
x566(x1970);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1976 = 0;
double* x1977 = (double*)myMalloc(150 * sizeof(double));
for(int x1978=0; x1978 < 150; x1978++) {
double x1979 = 0.0;
for(int x1980=0; x1980 < 150; x1980++) {
int32_t x1981 = x1976;
double x1982 = x112[x1981];
double x1983 = x527[x1980];
double x1984 = x1982 * x1983;
x1979 += x1984;
x1976 += 1;

}
double x1989 = x1979;
x1977[x1978] = x1989;

}
double* x1993 = (double*)myMalloc(150 * sizeof(double));
for(int x1994=0; x1994 < 150; x1994++) {
x1993[x1994] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1999 = 0;
double* x2000 = (double*)myMalloc(150 * sizeof(double));
for(int x2001=0; x2001 < 150; x2001++) {
double x2002 = 0.0;
for(int x2003=0; x2003 < 150; x2003++) {
int32_t x2004 = x1999;
double x2005 = x120[x2004];
double x2006 = x536[x2003];
double x2007 = x2005 * x2006;
x2002 += x2007;
x1999 += 1;

}
double x2012 = x2002;
x2000[x2001] = x2012;

}
double* x2016 = (double*)myMalloc(150 * sizeof(double));
for(int x2017=0; x2017 < 150; x2017++) {
x2016[x2017] = 0.0;

}
double* x2021 = (double*)myMalloc(150 * sizeof(double));
for(int x2022=0; x2022 < 150; x2022++) {
double x2023 = x1977[x2022];
double x2024 = x2000[x2022];
double x2025 = x2023 + x2024;
x2021[x2022] = x2025;

}
double* x2029 = (double*)myMalloc(150 * sizeof(double));
for(int x2030=0; x2030 < 150; x2030++) {
x2029[x2030] = 0.0;

}
double* x2034 = (double*)myMalloc(150 * sizeof(double));
for(int x2035=0; x2035 < 150; x2035++) {
double x2036 = x2021[x2035];
double x2037 = x144[x2035];
double x2038 = x2036 + x2037;
x2034[x2035] = x2038;

}
double* x2042 = (double*)myMalloc(150 * sizeof(double));
for(int x2043=0; x2043 < 150; x2043++) {
x2042[x2043] = 0.0;

}
double* x2047 = (double*)myMalloc(150 * sizeof(double));
for(int x2048=0; x2048 < 150; x2048++) {
double x2049 = x2034[x2048];
double x2050 = -1.0 * x2049;
double x2051 = exp(x2050);
double x2052 = x2051 + 1.0;
double x2053 = 1.0 / x2052;
x2047[x2048] = x2053;

}
double* x2057 = (double*)myMalloc(150 * sizeof(double));
for(int x2058=0; x2058 < 150; x2058++) {
x2057[x2058] = 0.0;

}
double** x2062 = (double**)myMalloc(2 * sizeof(double*));
x2062[0] = x2047;
x2062[1] = x2057;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x1764 = (double**)myMalloc(2 * sizeof(double*));
x1764[0] = x326;
x1764[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1764);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1770 = 0;
double* x1771 = (double*)myMalloc(150 * sizeof(double));
for(int x1772=0; x1772 < 150; x1772++) {
double x1773 = 0.0;
for(int x1774=0; x1774 < 150; x1774++) {
int32_t x1775 = x1770;
double x1776 = x128[x1775];
double x1777 = x527[x1774];
double x1778 = x1776 * x1777;
x1773 += x1778;
x1770 += 1;

}
double x1783 = x1773;
x1771[x1772] = x1783;

}
double* x1787 = (double*)myMalloc(150 * sizeof(double));
for(int x1788=0; x1788 < 150; x1788++) {
x1787[x1788] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1793 = 0;
double* x1794 = (double*)myMalloc(150 * sizeof(double));
for(int x1795=0; x1795 < 150; x1795++) {
double x1796 = 0.0;
for(int x1797=0; x1797 < 150; x1797++) {
int32_t x1798 = x1793;
double x1799 = x136[x1798];
double x1800 = x536[x1797];
double x1801 = x1799 * x1800;
x1796 += x1801;
x1793 += 1;

}
double x1806 = x1796;
x1794[x1795] = x1806;

}
double* x1810 = (double*)myMalloc(150 * sizeof(double));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0;

}
double* x1815 = (double*)myMalloc(150 * sizeof(double));
for(int x1816=0; x1816 < 150; x1816++) {
double x1817 = x1771[x1816];
double x1818 = x1794[x1816];
double x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
double* x1823 = (double*)myMalloc(150 * sizeof(double));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0;

}
double* x1828 = (double*)myMalloc(150 * sizeof(double));
for(int x1829=0; x1829 < 150; x1829++) {
double x1830 = x1815[x1829];
double x1831 = x144[x1829];
double x1832 = x1830 + x1831;
x1828[x1829] = x1832;

}
double* x1836 = (double*)myMalloc(150 * sizeof(double));
for(int x1837=0; x1837 < 150; x1837++) {
x1836[x1837] = 0.0;

}
double* x1841 = (double*)myMalloc(150 * sizeof(double));
for(int x1842=0; x1842 < 150; x1842++) {
double x1843 = x1828[x1842];
double x1844 = -1.0 * x1843;
double x1845 = exp(x1844);
double x1846 = x1845 + 1.0;
double x1847 = 1.0 / x1846;
x1841[x1842] = x1847;

}
double* x1851 = (double*)myMalloc(150 * sizeof(double));
for(int x1852=0; x1852 < 150; x1852++) {
x1851[x1852] = 0.0;

}
double** x1856 = (double**)myMalloc(2 * sizeof(double*));
x1856[0] = x1841;
x1856[1] = x1851;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1856);
for(int x1860=0; x1860 < 150; x1860++) {
double x1861 = x1836[x1860];
double x1862 = x1841[x1860];
double x1865 = x1851[x1860];
double x1863 = 1.0 - x1862;
double x1864 = x1863 * x1862;
double x1866 = x1864 * x1865;
double x1867 = x1861 + x1866;
x1836[x1860] = x1867;

}
// backpropagate +
for(int x1872=0; x1872 < 150; x1872++) {
double x1873 = x1823[x1872];
double x1874 = x1836[x1872];
double x1875 = x1873 + x1874;
x1823[x1872] = x1875;

}
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x271[x1879];
double x1881 = x1836[x1879];
double x1882 = x1880 + x1881;
x271[x1879] = x1882;

}
// backpropagate +
for(int x1887=0; x1887 < 150; x1887++) {
double x1888 = x1787[x1887];
double x1889 = x1823[x1887];
double x1890 = x1888 + x1889;
x1787[x1887] = x1890;

}
for(int x1894=0; x1894 < 150; x1894++) {
double x1895 = x1810[x1894];
double x1896 = x1823[x1894];
double x1897 = x1895 + x1896;
x1810[x1894] = x1897;

}
// add_cartesian
int32_t x1902 = 0;
for(int x1903=0; x1903 < 150; x1903++) {
for(int x1904=0; x1904 < 150; x1904++) {
int32_t x1905 = x1902;
int32_t x1906 = x1905 + x1904;
double x1907 = x266[x1906];
double x1908 = x536[x1904];
double x1909 = x1810[x1903];
double x1910 = x1908 * x1909;
double x1911 = x1907 + x1910;
x266[x1906] = x1911;

}
x1902 += 150;

}
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
double x1921 = x537[x1920];
int32_t x1922 = x1918;
int32_t x1923 = x1922 + x1920;
double x1924 = x136[x1923];
double x1925 = x1810[x1919];
double x1926 = x1924 * x1925;
double x1927 = x1921 + x1926;
x537[x1920] = x1927;

}
x1918 += 150;

}
// add_cartesian
int32_t x1935 = 0;
for(int x1936=0; x1936 < 150; x1936++) {
for(int x1937=0; x1937 < 150; x1937++) {
int32_t x1938 = x1935;
int32_t x1939 = x1938 + x1937;
double x1940 = x261[x1939];
double x1941 = x527[x1937];
double x1942 = x1787[x1936];
double x1943 = x1941 * x1942;
double x1944 = x1940 + x1943;
x261[x1939] = x1944;

}
x1935 += 150;

}
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
double x1954 = x528[x1953];
int32_t x1955 = x1951;
int32_t x1956 = x1955 + x1953;
double x1957 = x128[x1956];
double x1958 = x1787[x1952];
double x1959 = x1957 * x1958;
double x1960 = x1954 + x1959;
x528[x1953] = x1960;

}
x1951 += 150;

}
}
};
x566(x2062);
for(int x2066=0; x2066 < 150; x2066++) {
double x2067 = x2042[x2066];
double x2068 = x2047[x2066];
double x2071 = x2057[x2066];
double x2069 = 1.0 - x2068;
double x2070 = x2069 * x2068;
double x2072 = x2070 * x2071;
double x2073 = x2067 + x2072;
x2042[x2066] = x2073;

}
// backpropagate +
for(int x2078=0; x2078 < 150; x2078++) {
double x2079 = x2029[x2078];
double x2080 = x2042[x2078];
double x2081 = x2079 + x2080;
x2029[x2078] = x2081;

}
for(int x2085=0; x2085 < 150; x2085++) {
double x2086 = x271[x2085];
double x2087 = x2042[x2085];
double x2088 = x2086 + x2087;
x271[x2085] = x2088;

}
// backpropagate +
for(int x2093=0; x2093 < 150; x2093++) {
double x2094 = x1993[x2093];
double x2095 = x2029[x2093];
double x2096 = x2094 + x2095;
x1993[x2093] = x2096;

}
for(int x2100=0; x2100 < 150; x2100++) {
double x2101 = x2016[x2100];
double x2102 = x2029[x2100];
double x2103 = x2101 + x2102;
x2016[x2100] = x2103;

}
// add_cartesian
int32_t x2108 = 0;
for(int x2109=0; x2109 < 150; x2109++) {
for(int x2110=0; x2110 < 150; x2110++) {
int32_t x2111 = x2108;
int32_t x2112 = x2111 + x2110;
double x2113 = x256[x2112];
double x2114 = x536[x2110];
double x2115 = x2016[x2109];
double x2116 = x2114 * x2115;
double x2117 = x2113 + x2116;
x256[x2112] = x2117;

}
x2108 += 150;

}
int32_t x2124 = 0;
for(int x2125=0; x2125 < 150; x2125++) {
for(int x2126=0; x2126 < 150; x2126++) {
double x2127 = x537[x2126];
int32_t x2128 = x2124;
int32_t x2129 = x2128 + x2126;
double x2130 = x120[x2129];
double x2131 = x2016[x2125];
double x2132 = x2130 * x2131;
double x2133 = x2127 + x2132;
x537[x2126] = x2133;

}
x2124 += 150;

}
// add_cartesian
int32_t x2141 = 0;
for(int x2142=0; x2142 < 150; x2142++) {
for(int x2143=0; x2143 < 150; x2143++) {
int32_t x2144 = x2141;
int32_t x2145 = x2144 + x2143;
double x2146 = x251[x2145];
double x2147 = x527[x2143];
double x2148 = x1993[x2142];
double x2149 = x2147 * x2148;
double x2150 = x2146 + x2149;
x251[x2145] = x2150;

}
x2141 += 150;

}
int32_t x2157 = 0;
for(int x2158=0; x2158 < 150; x2158++) {
for(int x2159=0; x2159 < 150; x2159++) {
double x2160 = x528[x2159];
int32_t x2161 = x2157;
int32_t x2162 = x2161 + x2159;
double x2163 = x112[x2162];
double x2164 = x1993[x2158];
double x2165 = x2163 * x2164;
double x2166 = x2160 + x2165;
x528[x2159] = x2166;

}
x2157 += 150;

}
}
};
x560(x2227);
for(int x2231=0; x2231 < 150; x2231++) {
double x2232 = x2207[x2231];
double x2233 = x2212[x2231];
double x2236 = x2222[x2231];
double x2234 = 1.0 - x2233;
double x2235 = x2234 * x2233;
double x2237 = x2235 * x2236;
double x2238 = x2232 + x2237;
x2207[x2231] = x2238;

}
// backpropagate +
for(int x2243=0; x2243 < 150; x2243++) {
double x2244 = x2194[x2243];
double x2245 = x2207[x2243];
double x2246 = x2244 + x2245;
x2194[x2243] = x2246;

}
for(int x2250=0; x2250 < 150; x2250++) {
double x2251 = x211[x2250];
double x2252 = x2207[x2250];
double x2253 = x2251 + x2252;
x211[x2250] = x2253;

}
// add_cartesian
int32_t x2258 = 0;
for(int x2259=0; x2259 < 150; x2259++) {
for(int x2260=0; x2260 < 300; x2260++) {
int32_t x2261 = x2258;
int32_t x2262 = x2261 + x2260;
double x2263 = x206[x2262];
double x2264 = x556[x2260];
double x2265 = x2194[x2259];
double x2266 = x2264 * x2265;
double x2267 = x2263 + x2266;
x206[x2262] = x2267;

}
x2258 += 300;

}
int32_t x2274 = 0;
for(int x2275=0; x2275 < 150; x2275++) {
for(int x2276=0; x2276 < 300; x2276++) {
double x2277 = x557[x2276];
int32_t x2278 = x2274;
int32_t x2279 = x2278 + x2276;
double x2280 = x49[x2279];
double x2281 = x2194[x2275];
double x2282 = x2280 * x2281;
double x2283 = x2277 + x2282;
x557[x2276] = x2283;

}
x2274 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2292 = 0;
double* x2293 = (double*)myMalloc(150 * sizeof(double));
for(int x2294=0; x2294 < 150; x2294++) {
double x2295 = 0.0;
for(int x2296=0; x2296 < 150; x2296++) {
int32_t x2297 = x2292;
double x2298 = x90[x2297];
double x2299 = x527[x2296];
double x2300 = x2298 * x2299;
x2295 += x2300;
x2292 += 1;

}
double x2305 = x2295;
x2293[x2294] = x2305;

}
double* x2309 = (double*)myMalloc(150 * sizeof(double));
for(int x2310=0; x2310 < 150; x2310++) {
x2309[x2310] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2315 = 0;
double* x2316 = (double*)myMalloc(150 * sizeof(double));
for(int x2317=0; x2317 < 150; x2317++) {
double x2318 = 0.0;
for(int x2319=0; x2319 < 150; x2319++) {
int32_t x2320 = x2315;
double x2321 = x99[x2320];
double x2322 = x536[x2319];
double x2323 = x2321 * x2322;
x2318 += x2323;
x2315 += 1;

}
double x2328 = x2318;
x2316[x2317] = x2328;

}
double* x2332 = (double*)myMalloc(150 * sizeof(double));
for(int x2333=0; x2333 < 150; x2333++) {
x2332[x2333] = 0.0;

}
double* x2337 = (double*)myMalloc(150 * sizeof(double));
for(int x2338=0; x2338 < 150; x2338++) {
double x2339 = x2293[x2338];
double x2340 = x2316[x2338];
double x2341 = x2339 + x2340;
x2337[x2338] = x2341;

}
double* x2345 = (double*)myMalloc(150 * sizeof(double));
for(int x2346=0; x2346 < 150; x2346++) {
x2345[x2346] = 0.0;

}
double* x2350 = (double*)myMalloc(150 * sizeof(double));
for(int x2351=0; x2351 < 150; x2351++) {
double x2352 = x2337[x2351];
double x2353 = x107[x2351];
double x2354 = x2352 + x2353;
x2350[x2351] = x2354;

}
double* x2358 = (double*)myMalloc(150 * sizeof(double));
for(int x2359=0; x2359 < 150; x2359++) {
x2358[x2359] = 0.0;

}
double* x2363 = (double*)myMalloc(150 * sizeof(double));
for(int x2364=0; x2364 < 150; x2364++) {
double x2365 = x2350[x2364];
double x2366 = -1.0 * x2365;
double x2367 = exp(x2366);
double x2368 = x2367 + 1.0;
double x2369 = 1.0 / x2368;
x2363[x2364] = x2369;

}
double* x2373 = (double*)myMalloc(150 * sizeof(double));
for(int x2374=0; x2374 < 150; x2374++) {
x2373[x2374] = 0.0;

}
double** x2378 = (double**)myMalloc(2 * sizeof(double*));
x2378[0] = x2363;
x2378[1] = x2373;
function<void(double**)> x560 = [&](double** x561) {
double* x562 = x561[0];
double* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
double** x1970 = (double**)myMalloc(2 * sizeof(double*));
x1970[0] = x326;
x1970[1] = x331;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x1764 = (double**)myMalloc(2 * sizeof(double*));
x1764[0] = x326;
x1764[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1764);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1770 = 0;
double* x1771 = (double*)myMalloc(150 * sizeof(double));
for(int x1772=0; x1772 < 150; x1772++) {
double x1773 = 0.0;
for(int x1774=0; x1774 < 150; x1774++) {
int32_t x1775 = x1770;
double x1776 = x128[x1775];
double x1777 = x527[x1774];
double x1778 = x1776 * x1777;
x1773 += x1778;
x1770 += 1;

}
double x1783 = x1773;
x1771[x1772] = x1783;

}
double* x1787 = (double*)myMalloc(150 * sizeof(double));
for(int x1788=0; x1788 < 150; x1788++) {
x1787[x1788] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1793 = 0;
double* x1794 = (double*)myMalloc(150 * sizeof(double));
for(int x1795=0; x1795 < 150; x1795++) {
double x1796 = 0.0;
for(int x1797=0; x1797 < 150; x1797++) {
int32_t x1798 = x1793;
double x1799 = x136[x1798];
double x1800 = x536[x1797];
double x1801 = x1799 * x1800;
x1796 += x1801;
x1793 += 1;

}
double x1806 = x1796;
x1794[x1795] = x1806;

}
double* x1810 = (double*)myMalloc(150 * sizeof(double));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0;

}
double* x1815 = (double*)myMalloc(150 * sizeof(double));
for(int x1816=0; x1816 < 150; x1816++) {
double x1817 = x1771[x1816];
double x1818 = x1794[x1816];
double x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
double* x1823 = (double*)myMalloc(150 * sizeof(double));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0;

}
double* x1828 = (double*)myMalloc(150 * sizeof(double));
for(int x1829=0; x1829 < 150; x1829++) {
double x1830 = x1815[x1829];
double x1831 = x144[x1829];
double x1832 = x1830 + x1831;
x1828[x1829] = x1832;

}
double* x1836 = (double*)myMalloc(150 * sizeof(double));
for(int x1837=0; x1837 < 150; x1837++) {
x1836[x1837] = 0.0;

}
double* x1841 = (double*)myMalloc(150 * sizeof(double));
for(int x1842=0; x1842 < 150; x1842++) {
double x1843 = x1828[x1842];
double x1844 = -1.0 * x1843;
double x1845 = exp(x1844);
double x1846 = x1845 + 1.0;
double x1847 = 1.0 / x1846;
x1841[x1842] = x1847;

}
double* x1851 = (double*)myMalloc(150 * sizeof(double));
for(int x1852=0; x1852 < 150; x1852++) {
x1851[x1852] = 0.0;

}
double** x1856 = (double**)myMalloc(2 * sizeof(double*));
x1856[0] = x1841;
x1856[1] = x1851;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1856);
for(int x1860=0; x1860 < 150; x1860++) {
double x1861 = x1836[x1860];
double x1862 = x1841[x1860];
double x1865 = x1851[x1860];
double x1863 = 1.0 - x1862;
double x1864 = x1863 * x1862;
double x1866 = x1864 * x1865;
double x1867 = x1861 + x1866;
x1836[x1860] = x1867;

}
// backpropagate +
for(int x1872=0; x1872 < 150; x1872++) {
double x1873 = x1823[x1872];
double x1874 = x1836[x1872];
double x1875 = x1873 + x1874;
x1823[x1872] = x1875;

}
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x271[x1879];
double x1881 = x1836[x1879];
double x1882 = x1880 + x1881;
x271[x1879] = x1882;

}
// backpropagate +
for(int x1887=0; x1887 < 150; x1887++) {
double x1888 = x1787[x1887];
double x1889 = x1823[x1887];
double x1890 = x1888 + x1889;
x1787[x1887] = x1890;

}
for(int x1894=0; x1894 < 150; x1894++) {
double x1895 = x1810[x1894];
double x1896 = x1823[x1894];
double x1897 = x1895 + x1896;
x1810[x1894] = x1897;

}
// add_cartesian
int32_t x1902 = 0;
for(int x1903=0; x1903 < 150; x1903++) {
for(int x1904=0; x1904 < 150; x1904++) {
int32_t x1905 = x1902;
int32_t x1906 = x1905 + x1904;
double x1907 = x266[x1906];
double x1908 = x536[x1904];
double x1909 = x1810[x1903];
double x1910 = x1908 * x1909;
double x1911 = x1907 + x1910;
x266[x1906] = x1911;

}
x1902 += 150;

}
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
double x1921 = x537[x1920];
int32_t x1922 = x1918;
int32_t x1923 = x1922 + x1920;
double x1924 = x136[x1923];
double x1925 = x1810[x1919];
double x1926 = x1924 * x1925;
double x1927 = x1921 + x1926;
x537[x1920] = x1927;

}
x1918 += 150;

}
// add_cartesian
int32_t x1935 = 0;
for(int x1936=0; x1936 < 150; x1936++) {
for(int x1937=0; x1937 < 150; x1937++) {
int32_t x1938 = x1935;
int32_t x1939 = x1938 + x1937;
double x1940 = x261[x1939];
double x1941 = x527[x1937];
double x1942 = x1787[x1936];
double x1943 = x1941 * x1942;
double x1944 = x1940 + x1943;
x261[x1939] = x1944;

}
x1935 += 150;

}
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
double x1954 = x528[x1953];
int32_t x1955 = x1951;
int32_t x1956 = x1955 + x1953;
double x1957 = x128[x1956];
double x1958 = x1787[x1952];
double x1959 = x1957 * x1958;
double x1960 = x1954 + x1959;
x528[x1953] = x1960;

}
x1951 += 150;

}
}
};
x566(x1970);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1976 = 0;
double* x1977 = (double*)myMalloc(150 * sizeof(double));
for(int x1978=0; x1978 < 150; x1978++) {
double x1979 = 0.0;
for(int x1980=0; x1980 < 150; x1980++) {
int32_t x1981 = x1976;
double x1982 = x112[x1981];
double x1983 = x527[x1980];
double x1984 = x1982 * x1983;
x1979 += x1984;
x1976 += 1;

}
double x1989 = x1979;
x1977[x1978] = x1989;

}
double* x1993 = (double*)myMalloc(150 * sizeof(double));
for(int x1994=0; x1994 < 150; x1994++) {
x1993[x1994] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1999 = 0;
double* x2000 = (double*)myMalloc(150 * sizeof(double));
for(int x2001=0; x2001 < 150; x2001++) {
double x2002 = 0.0;
for(int x2003=0; x2003 < 150; x2003++) {
int32_t x2004 = x1999;
double x2005 = x120[x2004];
double x2006 = x536[x2003];
double x2007 = x2005 * x2006;
x2002 += x2007;
x1999 += 1;

}
double x2012 = x2002;
x2000[x2001] = x2012;

}
double* x2016 = (double*)myMalloc(150 * sizeof(double));
for(int x2017=0; x2017 < 150; x2017++) {
x2016[x2017] = 0.0;

}
double* x2021 = (double*)myMalloc(150 * sizeof(double));
for(int x2022=0; x2022 < 150; x2022++) {
double x2023 = x1977[x2022];
double x2024 = x2000[x2022];
double x2025 = x2023 + x2024;
x2021[x2022] = x2025;

}
double* x2029 = (double*)myMalloc(150 * sizeof(double));
for(int x2030=0; x2030 < 150; x2030++) {
x2029[x2030] = 0.0;

}
double* x2034 = (double*)myMalloc(150 * sizeof(double));
for(int x2035=0; x2035 < 150; x2035++) {
double x2036 = x2021[x2035];
double x2037 = x144[x2035];
double x2038 = x2036 + x2037;
x2034[x2035] = x2038;

}
double* x2042 = (double*)myMalloc(150 * sizeof(double));
for(int x2043=0; x2043 < 150; x2043++) {
x2042[x2043] = 0.0;

}
double* x2047 = (double*)myMalloc(150 * sizeof(double));
for(int x2048=0; x2048 < 150; x2048++) {
double x2049 = x2034[x2048];
double x2050 = -1.0 * x2049;
double x2051 = exp(x2050);
double x2052 = x2051 + 1.0;
double x2053 = 1.0 / x2052;
x2047[x2048] = x2053;

}
double* x2057 = (double*)myMalloc(150 * sizeof(double));
for(int x2058=0; x2058 < 150; x2058++) {
x2057[x2058] = 0.0;

}
double** x2062 = (double**)myMalloc(2 * sizeof(double*));
x2062[0] = x2047;
x2062[1] = x2057;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x1764 = (double**)myMalloc(2 * sizeof(double*));
x1764[0] = x326;
x1764[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1764);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1770 = 0;
double* x1771 = (double*)myMalloc(150 * sizeof(double));
for(int x1772=0; x1772 < 150; x1772++) {
double x1773 = 0.0;
for(int x1774=0; x1774 < 150; x1774++) {
int32_t x1775 = x1770;
double x1776 = x128[x1775];
double x1777 = x527[x1774];
double x1778 = x1776 * x1777;
x1773 += x1778;
x1770 += 1;

}
double x1783 = x1773;
x1771[x1772] = x1783;

}
double* x1787 = (double*)myMalloc(150 * sizeof(double));
for(int x1788=0; x1788 < 150; x1788++) {
x1787[x1788] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1793 = 0;
double* x1794 = (double*)myMalloc(150 * sizeof(double));
for(int x1795=0; x1795 < 150; x1795++) {
double x1796 = 0.0;
for(int x1797=0; x1797 < 150; x1797++) {
int32_t x1798 = x1793;
double x1799 = x136[x1798];
double x1800 = x536[x1797];
double x1801 = x1799 * x1800;
x1796 += x1801;
x1793 += 1;

}
double x1806 = x1796;
x1794[x1795] = x1806;

}
double* x1810 = (double*)myMalloc(150 * sizeof(double));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0;

}
double* x1815 = (double*)myMalloc(150 * sizeof(double));
for(int x1816=0; x1816 < 150; x1816++) {
double x1817 = x1771[x1816];
double x1818 = x1794[x1816];
double x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
double* x1823 = (double*)myMalloc(150 * sizeof(double));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0;

}
double* x1828 = (double*)myMalloc(150 * sizeof(double));
for(int x1829=0; x1829 < 150; x1829++) {
double x1830 = x1815[x1829];
double x1831 = x144[x1829];
double x1832 = x1830 + x1831;
x1828[x1829] = x1832;

}
double* x1836 = (double*)myMalloc(150 * sizeof(double));
for(int x1837=0; x1837 < 150; x1837++) {
x1836[x1837] = 0.0;

}
double* x1841 = (double*)myMalloc(150 * sizeof(double));
for(int x1842=0; x1842 < 150; x1842++) {
double x1843 = x1828[x1842];
double x1844 = -1.0 * x1843;
double x1845 = exp(x1844);
double x1846 = x1845 + 1.0;
double x1847 = 1.0 / x1846;
x1841[x1842] = x1847;

}
double* x1851 = (double*)myMalloc(150 * sizeof(double));
for(int x1852=0; x1852 < 150; x1852++) {
x1851[x1852] = 0.0;

}
double** x1856 = (double**)myMalloc(2 * sizeof(double*));
x1856[0] = x1841;
x1856[1] = x1851;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1449 = 0;
double* x1450 = (double*)myMalloc(150 * sizeof(double));
for(int x1451=0; x1451 < 150; x1451++) {
double x1452 = 0.0;
for(int x1453=0; x1453 < 300; x1453++) {
int32_t x1454 = x1449;
double x1455 = x64[x1454];
double x1456 = x556[x1453];
double x1457 = x1455 * x1456;
x1452 += x1457;
x1449 += 1;

}
double x1462 = x1452;
x1450[x1451] = x1462;

}
double* x1466 = (double*)myMalloc(150 * sizeof(double));
for(int x1467=0; x1467 < 150; x1467++) {
x1466[x1467] = 0.0;

}
double* x1471 = (double*)myMalloc(150 * sizeof(double));
for(int x1472=0; x1472 < 150; x1472++) {
double x1473 = x1450[x1472];
double x1474 = x72[x1472];
double x1475 = x1473 + x1474;
x1471[x1472] = x1475;

}
double* x1479 = (double*)myMalloc(150 * sizeof(double));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0;

}
double* x1484 = (double*)myMalloc(150 * sizeof(double));
for(int x1485=0; x1485 < 150; x1485++) {
double x1486 = x1471[x1485];
double x1487 = -1.0 * x1486;
double x1488 = exp(x1487);
double x1489 = x1488 + 1.0;
double x1490 = 1.0 / x1489;
x1484[x1485] = x1490;

}
double* x1494 = (double*)myMalloc(150 * sizeof(double));
for(int x1495=0; x1495 < 150; x1495++) {
x1494[x1495] = 0.0;

}
double** x1499 = (double**)myMalloc(2 * sizeof(double*));
x1499[0] = x1484;
x1499[1] = x1494;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1499);
for(int x1503=0; x1503 < 150; x1503++) {
double x1504 = x1479[x1503];
double x1505 = x1484[x1503];
double x1508 = x1494[x1503];
double x1506 = 1.0 - x1505;
double x1507 = x1506 * x1505;
double x1509 = x1507 * x1508;
double x1510 = x1504 + x1509;
x1479[x1503] = x1510;

}
// backpropagate +
for(int x1515=0; x1515 < 150; x1515++) {
double x1516 = x1466[x1515];
double x1517 = x1479[x1515];
double x1518 = x1516 + x1517;
x1466[x1515] = x1518;

}
for(int x1522=0; x1522 < 150; x1522++) {
double x1523 = x221[x1522];
double x1524 = x1479[x1522];
double x1525 = x1523 + x1524;
x221[x1522] = x1525;

}
// add_cartesian
int32_t x1530 = 0;
for(int x1531=0; x1531 < 150; x1531++) {
for(int x1532=0; x1532 < 300; x1532++) {
int32_t x1533 = x1530;
int32_t x1534 = x1533 + x1532;
double x1535 = x216[x1534];
double x1536 = x556[x1532];
double x1537 = x1466[x1531];
double x1538 = x1536 * x1537;
double x1539 = x1535 + x1538;
x216[x1534] = x1539;

}
x1530 += 300;

}
int32_t x1546 = 0;
for(int x1547=0; x1547 < 150; x1547++) {
for(int x1548=0; x1548 < 300; x1548++) {
double x1549 = x557[x1548];
int32_t x1550 = x1546;
int32_t x1551 = x1550 + x1548;
double x1552 = x64[x1551];
double x1553 = x1466[x1547];
double x1554 = x1552 * x1553;
double x1555 = x1549 + x1554;
x557[x1548] = x1555;

}
x1546 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1564 = 0;
double* x1565 = (double*)myMalloc(150 * sizeof(double));
for(int x1566=0; x1566 < 150; x1566++) {
double x1567 = 0.0;
for(int x1568=0; x1568 < 150; x1568++) {
int32_t x1569 = x1564;
double x1570 = x149[x1569];
double x1571 = x527[x1568];
double x1572 = x1570 * x1571;
x1567 += x1572;
x1564 += 1;

}
double x1577 = x1567;
x1565[x1566] = x1577;

}
double* x1581 = (double*)myMalloc(150 * sizeof(double));
for(int x1582=0; x1582 < 150; x1582++) {
x1581[x1582] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1587 = 0;
double* x1588 = (double*)myMalloc(150 * sizeof(double));
for(int x1589=0; x1589 < 150; x1589++) {
double x1590 = 0.0;
for(int x1591=0; x1591 < 150; x1591++) {
int32_t x1592 = x1587;
double x1593 = x157[x1592];
double x1594 = x536[x1591];
double x1595 = x1593 * x1594;
x1590 += x1595;
x1587 += 1;

}
double x1600 = x1590;
x1588[x1589] = x1600;

}
double* x1604 = (double*)myMalloc(150 * sizeof(double));
for(int x1605=0; x1605 < 150; x1605++) {
x1604[x1605] = 0.0;

}
double* x1609 = (double*)myMalloc(150 * sizeof(double));
for(int x1610=0; x1610 < 150; x1610++) {
double x1611 = x1565[x1610];
double x1612 = x1588[x1610];
double x1613 = x1611 + x1612;
x1609[x1610] = x1613;

}
double* x1617 = (double*)myMalloc(150 * sizeof(double));
for(int x1618=0; x1618 < 150; x1618++) {
x1617[x1618] = 0.0;

}
double* x1622 = (double*)myMalloc(150 * sizeof(double));
for(int x1623=0; x1623 < 150; x1623++) {
double x1624 = x1609[x1623];
double x1625 = x165[x1623];
double x1626 = x1624 + x1625;
x1622[x1623] = x1626;

}
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
x1630[x1631] = 0.0;

}
double* x1635 = (double*)myMalloc(150 * sizeof(double));
for(int x1636=0; x1636 < 150; x1636++) {
double x1637 = x1622[x1636];
double x1638 = -1.0 * x1637;
double x1639 = exp(x1638);
double x1640 = x1639 + 1.0;
double x1641 = 1.0 / x1640;
x1635[x1636] = x1641;

}
double* x1645 = (double*)myMalloc(150 * sizeof(double));
for(int x1646=0; x1646 < 150; x1646++) {
x1645[x1646] = 0.0;

}
double** x1650 = (double**)myMalloc(2 * sizeof(double*));
x1650[0] = x1635;
x1650[1] = x1645;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1137 = 0;
double* x1138 = (double*)myMalloc(150 * sizeof(double));
for(int x1139=0; x1139 < 150; x1139++) {
double x1140 = 0.0;
for(int x1141=0; x1141 < 300; x1141++) {
int32_t x1142 = x1137;
double x1143 = x77[x1142];
double x1144 = x556[x1141];
double x1145 = x1143 * x1144;
x1140 += x1145;
x1137 += 1;

}
double x1150 = x1140;
x1138[x1139] = x1150;

}
double* x1154 = (double*)myMalloc(150 * sizeof(double));
for(int x1155=0; x1155 < 150; x1155++) {
x1154[x1155] = 0.0;

}
double* x1159 = (double*)myMalloc(150 * sizeof(double));
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x1138[x1160];
double x1162 = x85[x1160];
double x1163 = x1161 + x1162;
x1159[x1160] = x1163;

}
double* x1167 = (double*)myMalloc(150 * sizeof(double));
for(int x1168=0; x1168 < 150; x1168++) {
x1167[x1168] = 0.0;

}
double* x1172 = (double*)myMalloc(150 * sizeof(double));
for(int x1173=0; x1173 < 150; x1173++) {
double x1174 = x1159[x1173];
double x1175 = tanh(x1174);
x1172[x1173] = x1175;

}
double* x1179 = (double*)myMalloc(150 * sizeof(double));
for(int x1180=0; x1180 < 150; x1180++) {
x1179[x1180] = 0.0;

}
double** x1184 = (double**)myMalloc(2 * sizeof(double*));
x1184[0] = x1172;
x1184[1] = x1179;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1184);
// backpropagate tanh
for(int x1189=0; x1189 < 150; x1189++) {
double x1190 = x1167[x1189];
double x1191 = x1172[x1189];
double x1194 = x1179[x1189];
double x1192 = x1191 * x1191;
double x1193 = 1.0 - x1192;
double x1195 = x1193 * x1194;
double x1196 = x1190 + x1195;
x1167[x1189] = x1196;

}
// backpropagate +
for(int x1201=0; x1201 < 150; x1201++) {
double x1202 = x1154[x1201];
double x1203 = x1167[x1201];
double x1204 = x1202 + x1203;
x1154[x1201] = x1204;

}
for(int x1208=0; x1208 < 150; x1208++) {
double x1209 = x231[x1208];
double x1210 = x1167[x1208];
double x1211 = x1209 + x1210;
x231[x1208] = x1211;

}
// add_cartesian
int32_t x1216 = 0;
for(int x1217=0; x1217 < 150; x1217++) {
for(int x1218=0; x1218 < 300; x1218++) {
int32_t x1219 = x1216;
int32_t x1220 = x1219 + x1218;
double x1221 = x226[x1220];
double x1222 = x556[x1218];
double x1223 = x1154[x1217];
double x1224 = x1222 * x1223;
double x1225 = x1221 + x1224;
x226[x1220] = x1225;

}
x1216 += 300;

}
int32_t x1232 = 0;
for(int x1233=0; x1233 < 150; x1233++) {
for(int x1234=0; x1234 < 300; x1234++) {
double x1235 = x557[x1234];
int32_t x1236 = x1232;
int32_t x1237 = x1236 + x1234;
double x1238 = x77[x1237];
double x1239 = x1154[x1233];
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x557[x1234] = x1241;

}
x1232 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1250 = 0;
double* x1251 = (double*)myMalloc(150 * sizeof(double));
for(int x1252=0; x1252 < 150; x1252++) {
double x1253 = 0.0;
for(int x1254=0; x1254 < 150; x1254++) {
int32_t x1255 = x1250;
double x1256 = x170[x1255];
double x1257 = x527[x1254];
double x1258 = x1256 * x1257;
x1253 += x1258;
x1250 += 1;

}
double x1263 = x1253;
x1251[x1252] = x1263;

}
double* x1267 = (double*)myMalloc(150 * sizeof(double));
for(int x1268=0; x1268 < 150; x1268++) {
x1267[x1268] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1273 = 0;
double* x1274 = (double*)myMalloc(150 * sizeof(double));
for(int x1275=0; x1275 < 150; x1275++) {
double x1276 = 0.0;
for(int x1277=0; x1277 < 150; x1277++) {
int32_t x1278 = x1273;
double x1279 = x178[x1278];
double x1280 = x536[x1277];
double x1281 = x1279 * x1280;
x1276 += x1281;
x1273 += 1;

}
double x1286 = x1276;
x1274[x1275] = x1286;

}
double* x1290 = (double*)myMalloc(150 * sizeof(double));
for(int x1291=0; x1291 < 150; x1291++) {
x1290[x1291] = 0.0;

}
double* x1295 = (double*)myMalloc(150 * sizeof(double));
for(int x1296=0; x1296 < 150; x1296++) {
double x1297 = x1251[x1296];
double x1298 = x1274[x1296];
double x1299 = x1297 + x1298;
x1295[x1296] = x1299;

}
double* x1303 = (double*)myMalloc(150 * sizeof(double));
for(int x1304=0; x1304 < 150; x1304++) {
x1303[x1304] = 0.0;

}
double* x1308 = (double*)myMalloc(150 * sizeof(double));
for(int x1309=0; x1309 < 150; x1309++) {
double x1310 = x1295[x1309];
double x1311 = x186[x1309];
double x1312 = x1310 + x1311;
x1308[x1309] = x1312;

}
double* x1316 = (double*)myMalloc(150 * sizeof(double));
for(int x1317=0; x1317 < 150; x1317++) {
x1316[x1317] = 0.0;

}
double* x1321 = (double*)myMalloc(150 * sizeof(double));
for(int x1322=0; x1322 < 150; x1322++) {
double x1323 = x1308[x1322];
double x1324 = tanh(x1323);
x1321[x1322] = x1324;

}
double* x1328 = (double*)myMalloc(150 * sizeof(double));
for(int x1329=0; x1329 < 150; x1329++) {
x1328[x1329] = 0.0;

}
double** x1333 = (double**)myMalloc(2 * sizeof(double*));
x1333[0] = x1321;
x1333[1] = x1328;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
// add_cartesian
int32_t x881 = 0;
for(int x882=0; x882 < 5; x882++) {
for(int x883=0; x883 < 150; x883++) {
int32_t x884 = x881;
int32_t x885 = x884 + x883;
double x886 = x306[x885];
double x887 = x606[x883];
double x888 = x637[x882];
double x889 = x887 * x888;
double x890 = x886 + x889;
x306[x885] = x890;

}
x881 += 150;

}
int32_t x897 = 0;
for(int x898=0; x898 < 5; x898++) {
for(int x899=0; x899 < 150; x899++) {
double x900 = x614[x899];
int32_t x901 = x897;
int32_t x902 = x901 + x899;
double x903 = x191[x902];
double x904 = x637[x898];
double x905 = x903 * x904;
double x906 = x900 + x905;
x614[x899] = x906;

}
x897 += 150;

}
for(int x913=0; x913 < 150; x913++) {
double x914 = x581[x913];
double x915 = x594[x913];
double x916 = x614[x913];
double x917 = x915 * x916;
double x918 = x914 + x917;
x581[x913] = x918;

}
for(int x922=0; x922 < 150; x922++) {
double x923 = x601[x922];
double x924 = x580[x922];
double x925 = x614[x922];
double x926 = x924 * x925;
double x927 = x923 + x926;
x601[x922] = x927;

}
// backpropagate tanh
for(int x932=0; x932 < 150; x932++) {
double x933 = x593[x932];
double x934 = x594[x932];
double x937 = x601[x932];
double x935 = x934 * x934;
double x936 = 1.0 - x935;
double x938 = x936 * x937;
double x939 = x933 + x938;
x593[x932] = x939;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x944 = (double*)myMalloc(150 * sizeof(double));
for(int x945=0; x945 < 150; x945++) {
double x946 = x562[x945];
double x947 = x586[x945];
double x948 = x946 * x947;
x944[x945] = x948;

}
double* x952 = (double*)myMalloc(150 * sizeof(double));
for(int x953=0; x953 < 150; x953++) {
x952[x953] = 0.0;

}
double** x957 = (double**)myMalloc(2 * sizeof(double*));
x957[0] = x944;
x957[1] = x952;
x590(x957);
for(int x961=0; x961 < 150; x961++) {
double x962 = x563[x961];
double x963 = x586[x961];
double x964 = x952[x961];
double x965 = x963 * x964;
double x966 = x962 + x965;
x563[x961] = x966;

}
for(int x970=0; x970 < 150; x970++) {
double x971 = x587[x970];
double x972 = x562[x970];
double x973 = x952[x970];
double x974 = x972 * x973;
double x975 = x971 + x974;
x587[x970] = x975;

}
} else {
double* x980 = (double*)myMalloc(150 * sizeof(double));
for(int x981=0; x981 < 150; x981++) {
double x982 = x562[x981];
double x983 = x586[x981];
double x984 = x982 * x983;
x980[x981] = x984;

}
double* x988 = (double*)myMalloc(150 * sizeof(double));
for(int x989=0; x989 < 150; x989++) {
x988[x989] = 0.0;

}
double* x993 = (double*)myMalloc(150 * sizeof(double));
for(int x994=0; x994 < 150; x994++) {
double x995 = x568[x994];
double x996 = x529[x994];
double x997 = x995 * x996;
x993[x994] = x997;

}
double* x1001 = (double*)myMalloc(150 * sizeof(double));
for(int x1002=0; x1002 < 150; x1002++) {
x1001[x1002] = 0.0;

}
double* x1006 = (double*)myMalloc(150 * sizeof(double));
for(int x1007=0; x1007 < 150; x1007++) {
double x1008 = x980[x1007];
double x1009 = x993[x1007];
double x1010 = x1008 + x1009;
x1006[x1007] = x1010;

}
double* x1014 = (double*)myMalloc(150 * sizeof(double));
for(int x1015=0; x1015 < 150; x1015++) {
x1014[x1015] = 0.0;

}
double* x1019 = (double*)myMalloc(150 * sizeof(double));
for(int x1020=0; x1020 < 150; x1020++) {
double x1021 = x574[x1020];
double x1022 = x538[x1020];
double x1023 = x1021 * x1022;
x1019[x1020] = x1023;

}
double* x1027 = (double*)myMalloc(150 * sizeof(double));
for(int x1028=0; x1028 < 150; x1028++) {
x1027[x1028] = 0.0;

}
double* x1032 = (double*)myMalloc(150 * sizeof(double));
for(int x1033=0; x1033 < 150; x1033++) {
double x1034 = x1006[x1033];
double x1035 = x1019[x1033];
double x1036 = x1034 + x1035;
x1032[x1033] = x1036;

}
double* x1040 = (double*)myMalloc(150 * sizeof(double));
for(int x1041=0; x1041 < 150; x1041++) {
x1040[x1041] = 0.0;

}
double** x1045 = (double**)myMalloc(2 * sizeof(double*));
x1045[0] = x1032;
x1045[1] = x1040;
x590(x1045);
// backpropagate +
for(int x1050=0; x1050 < 150; x1050++) {
double x1051 = x1014[x1050];
double x1052 = x1040[x1050];
double x1053 = x1051 + x1052;
x1014[x1050] = x1053;

}
for(int x1057=0; x1057 < 150; x1057++) {
double x1058 = x1027[x1057];
double x1059 = x1040[x1057];
double x1060 = x1058 + x1059;
x1027[x1057] = x1060;

}
for(int x1064=0; x1064 < 150; x1064++) {
double x1065 = x575[x1064];
double x1066 = x538[x1064];
double x1067 = x1027[x1064];
double x1068 = x1066 * x1067;
double x1069 = x1065 + x1068;
x575[x1064] = x1069;

}
for(int x1073=0; x1073 < 150; x1073++) {
double x1074 = x539[x1073];
double x1075 = x574[x1073];
double x1076 = x1027[x1073];
double x1077 = x1075 * x1076;
double x1078 = x1074 + x1077;
x539[x1073] = x1078;

}
// backpropagate +
for(int x1083=0; x1083 < 150; x1083++) {
double x1084 = x988[x1083];
double x1085 = x1014[x1083];
double x1086 = x1084 + x1085;
x988[x1083] = x1086;

}
for(int x1090=0; x1090 < 150; x1090++) {
double x1091 = x1001[x1090];
double x1092 = x1014[x1090];
double x1093 = x1091 + x1092;
x1001[x1090] = x1093;

}
for(int x1097=0; x1097 < 150; x1097++) {
double x1098 = x569[x1097];
double x1099 = x529[x1097];
double x1100 = x1001[x1097];
double x1101 = x1099 * x1100;
double x1102 = x1098 + x1101;
x569[x1097] = x1102;

}
for(int x1106=0; x1106 < 150; x1106++) {
double x1107 = x530[x1106];
double x1108 = x568[x1106];
double x1109 = x1001[x1106];
double x1110 = x1108 * x1109;
double x1111 = x1107 + x1110;
x530[x1106] = x1111;

}
for(int x1115=0; x1115 < 150; x1115++) {
double x1116 = x563[x1115];
double x1117 = x586[x1115];
double x1118 = x988[x1115];
double x1119 = x1117 * x1118;
double x1120 = x1116 + x1119;
x563[x1115] = x1120;

}
for(int x1124=0; x1124 < 150; x1124++) {
double x1125 = x587[x1124];
double x1126 = x562[x1124];
double x1127 = x988[x1124];
double x1128 = x1126 * x1127;
double x1129 = x1125 + x1128;
x587[x1124] = x1129;

}
}
};
x584(x1333);
// backpropagate tanh
for(int x1338=0; x1338 < 150; x1338++) {
double x1339 = x1316[x1338];
double x1340 = x1321[x1338];
double x1343 = x1328[x1338];
double x1341 = x1340 * x1340;
double x1342 = 1.0 - x1341;
double x1344 = x1342 * x1343;
double x1345 = x1339 + x1344;
x1316[x1338] = x1345;

}
// backpropagate +
for(int x1350=0; x1350 < 150; x1350++) {
double x1351 = x1303[x1350];
double x1352 = x1316[x1350];
double x1353 = x1351 + x1352;
x1303[x1350] = x1353;

}
for(int x1357=0; x1357 < 150; x1357++) {
double x1358 = x301[x1357];
double x1359 = x1316[x1357];
double x1360 = x1358 + x1359;
x301[x1357] = x1360;

}
// backpropagate +
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = x1267[x1365];
double x1367 = x1303[x1365];
double x1368 = x1366 + x1367;
x1267[x1365] = x1368;

}
for(int x1372=0; x1372 < 150; x1372++) {
double x1373 = x1290[x1372];
double x1374 = x1303[x1372];
double x1375 = x1373 + x1374;
x1290[x1372] = x1375;

}
// add_cartesian
int32_t x1380 = 0;
for(int x1381=0; x1381 < 150; x1381++) {
for(int x1382=0; x1382 < 150; x1382++) {
int32_t x1383 = x1380;
int32_t x1384 = x1383 + x1382;
double x1385 = x296[x1384];
double x1386 = x536[x1382];
double x1387 = x1290[x1381];
double x1388 = x1386 * x1387;
double x1389 = x1385 + x1388;
x296[x1384] = x1389;

}
x1380 += 150;

}
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
double x1399 = x537[x1398];
int32_t x1400 = x1396;
int32_t x1401 = x1400 + x1398;
double x1402 = x178[x1401];
double x1403 = x1290[x1397];
double x1404 = x1402 * x1403;
double x1405 = x1399 + x1404;
x537[x1398] = x1405;

}
x1396 += 150;

}
// add_cartesian
int32_t x1413 = 0;
for(int x1414=0; x1414 < 150; x1414++) {
for(int x1415=0; x1415 < 150; x1415++) {
int32_t x1416 = x1413;
int32_t x1417 = x1416 + x1415;
double x1418 = x291[x1417];
double x1419 = x527[x1415];
double x1420 = x1267[x1414];
double x1421 = x1419 * x1420;
double x1422 = x1418 + x1421;
x291[x1417] = x1422;

}
x1413 += 150;

}
int32_t x1429 = 0;
for(int x1430=0; x1430 < 150; x1430++) {
for(int x1431=0; x1431 < 150; x1431++) {
double x1432 = x528[x1431];
int32_t x1433 = x1429;
int32_t x1434 = x1433 + x1431;
double x1435 = x170[x1434];
double x1436 = x1267[x1430];
double x1437 = x1435 * x1436;
double x1438 = x1432 + x1437;
x528[x1431] = x1438;

}
x1429 += 150;

}
}
};
x578(x1650);
for(int x1654=0; x1654 < 150; x1654++) {
double x1655 = x1630[x1654];
double x1656 = x1635[x1654];
double x1659 = x1645[x1654];
double x1657 = 1.0 - x1656;
double x1658 = x1657 * x1656;
double x1660 = x1658 * x1659;
double x1661 = x1655 + x1660;
x1630[x1654] = x1661;

}
// backpropagate +
for(int x1666=0; x1666 < 150; x1666++) {
double x1667 = x1617[x1666];
double x1668 = x1630[x1666];
double x1669 = x1667 + x1668;
x1617[x1666] = x1669;

}
for(int x1673=0; x1673 < 150; x1673++) {
double x1674 = x286[x1673];
double x1675 = x1630[x1673];
double x1676 = x1674 + x1675;
x286[x1673] = x1676;

}
// backpropagate +
for(int x1681=0; x1681 < 150; x1681++) {
double x1682 = x1581[x1681];
double x1683 = x1617[x1681];
double x1684 = x1682 + x1683;
x1581[x1681] = x1684;

}
for(int x1688=0; x1688 < 150; x1688++) {
double x1689 = x1604[x1688];
double x1690 = x1617[x1688];
double x1691 = x1689 + x1690;
x1604[x1688] = x1691;

}
// add_cartesian
int32_t x1696 = 0;
for(int x1697=0; x1697 < 150; x1697++) {
for(int x1698=0; x1698 < 150; x1698++) {
int32_t x1699 = x1696;
int32_t x1700 = x1699 + x1698;
double x1701 = x281[x1700];
double x1702 = x536[x1698];
double x1703 = x1604[x1697];
double x1704 = x1702 * x1703;
double x1705 = x1701 + x1704;
x281[x1700] = x1705;

}
x1696 += 150;

}
int32_t x1712 = 0;
for(int x1713=0; x1713 < 150; x1713++) {
for(int x1714=0; x1714 < 150; x1714++) {
double x1715 = x537[x1714];
int32_t x1716 = x1712;
int32_t x1717 = x1716 + x1714;
double x1718 = x157[x1717];
double x1719 = x1604[x1713];
double x1720 = x1718 * x1719;
double x1721 = x1715 + x1720;
x537[x1714] = x1721;

}
x1712 += 150;

}
// add_cartesian
int32_t x1729 = 0;
for(int x1730=0; x1730 < 150; x1730++) {
for(int x1731=0; x1731 < 150; x1731++) {
int32_t x1732 = x1729;
int32_t x1733 = x1732 + x1731;
double x1734 = x276[x1733];
double x1735 = x527[x1731];
double x1736 = x1581[x1730];
double x1737 = x1735 * x1736;
double x1738 = x1734 + x1737;
x276[x1733] = x1738;

}
x1729 += 150;

}
int32_t x1745 = 0;
for(int x1746=0; x1746 < 150; x1746++) {
for(int x1747=0; x1747 < 150; x1747++) {
double x1748 = x528[x1747];
int32_t x1749 = x1745;
int32_t x1750 = x1749 + x1747;
double x1751 = x149[x1750];
double x1752 = x1581[x1746];
double x1753 = x1751 * x1752;
double x1754 = x1748 + x1753;
x528[x1747] = x1754;

}
x1745 += 150;

}
}
};
x572(x1856);
for(int x1860=0; x1860 < 150; x1860++) {
double x1861 = x1836[x1860];
double x1862 = x1841[x1860];
double x1865 = x1851[x1860];
double x1863 = 1.0 - x1862;
double x1864 = x1863 * x1862;
double x1866 = x1864 * x1865;
double x1867 = x1861 + x1866;
x1836[x1860] = x1867;

}
// backpropagate +
for(int x1872=0; x1872 < 150; x1872++) {
double x1873 = x1823[x1872];
double x1874 = x1836[x1872];
double x1875 = x1873 + x1874;
x1823[x1872] = x1875;

}
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x271[x1879];
double x1881 = x1836[x1879];
double x1882 = x1880 + x1881;
x271[x1879] = x1882;

}
// backpropagate +
for(int x1887=0; x1887 < 150; x1887++) {
double x1888 = x1787[x1887];
double x1889 = x1823[x1887];
double x1890 = x1888 + x1889;
x1787[x1887] = x1890;

}
for(int x1894=0; x1894 < 150; x1894++) {
double x1895 = x1810[x1894];
double x1896 = x1823[x1894];
double x1897 = x1895 + x1896;
x1810[x1894] = x1897;

}
// add_cartesian
int32_t x1902 = 0;
for(int x1903=0; x1903 < 150; x1903++) {
for(int x1904=0; x1904 < 150; x1904++) {
int32_t x1905 = x1902;
int32_t x1906 = x1905 + x1904;
double x1907 = x266[x1906];
double x1908 = x536[x1904];
double x1909 = x1810[x1903];
double x1910 = x1908 * x1909;
double x1911 = x1907 + x1910;
x266[x1906] = x1911;

}
x1902 += 150;

}
int32_t x1918 = 0;
for(int x1919=0; x1919 < 150; x1919++) {
for(int x1920=0; x1920 < 150; x1920++) {
double x1921 = x537[x1920];
int32_t x1922 = x1918;
int32_t x1923 = x1922 + x1920;
double x1924 = x136[x1923];
double x1925 = x1810[x1919];
double x1926 = x1924 * x1925;
double x1927 = x1921 + x1926;
x537[x1920] = x1927;

}
x1918 += 150;

}
// add_cartesian
int32_t x1935 = 0;
for(int x1936=0; x1936 < 150; x1936++) {
for(int x1937=0; x1937 < 150; x1937++) {
int32_t x1938 = x1935;
int32_t x1939 = x1938 + x1937;
double x1940 = x261[x1939];
double x1941 = x527[x1937];
double x1942 = x1787[x1936];
double x1943 = x1941 * x1942;
double x1944 = x1940 + x1943;
x261[x1939] = x1944;

}
x1935 += 150;

}
int32_t x1951 = 0;
for(int x1952=0; x1952 < 150; x1952++) {
for(int x1953=0; x1953 < 150; x1953++) {
double x1954 = x528[x1953];
int32_t x1955 = x1951;
int32_t x1956 = x1955 + x1953;
double x1957 = x128[x1956];
double x1958 = x1787[x1952];
double x1959 = x1957 * x1958;
double x1960 = x1954 + x1959;
x528[x1953] = x1960;

}
x1951 += 150;

}
}
};
x566(x2062);
for(int x2066=0; x2066 < 150; x2066++) {
double x2067 = x2042[x2066];
double x2068 = x2047[x2066];
double x2071 = x2057[x2066];
double x2069 = 1.0 - x2068;
double x2070 = x2069 * x2068;
double x2072 = x2070 * x2071;
double x2073 = x2067 + x2072;
x2042[x2066] = x2073;

}
// backpropagate +
for(int x2078=0; x2078 < 150; x2078++) {
double x2079 = x2029[x2078];
double x2080 = x2042[x2078];
double x2081 = x2079 + x2080;
x2029[x2078] = x2081;

}
for(int x2085=0; x2085 < 150; x2085++) {
double x2086 = x271[x2085];
double x2087 = x2042[x2085];
double x2088 = x2086 + x2087;
x271[x2085] = x2088;

}
// backpropagate +
for(int x2093=0; x2093 < 150; x2093++) {
double x2094 = x1993[x2093];
double x2095 = x2029[x2093];
double x2096 = x2094 + x2095;
x1993[x2093] = x2096;

}
for(int x2100=0; x2100 < 150; x2100++) {
double x2101 = x2016[x2100];
double x2102 = x2029[x2100];
double x2103 = x2101 + x2102;
x2016[x2100] = x2103;

}
// add_cartesian
int32_t x2108 = 0;
for(int x2109=0; x2109 < 150; x2109++) {
for(int x2110=0; x2110 < 150; x2110++) {
int32_t x2111 = x2108;
int32_t x2112 = x2111 + x2110;
double x2113 = x256[x2112];
double x2114 = x536[x2110];
double x2115 = x2016[x2109];
double x2116 = x2114 * x2115;
double x2117 = x2113 + x2116;
x256[x2112] = x2117;

}
x2108 += 150;

}
int32_t x2124 = 0;
for(int x2125=0; x2125 < 150; x2125++) {
for(int x2126=0; x2126 < 150; x2126++) {
double x2127 = x537[x2126];
int32_t x2128 = x2124;
int32_t x2129 = x2128 + x2126;
double x2130 = x120[x2129];
double x2131 = x2016[x2125];
double x2132 = x2130 * x2131;
double x2133 = x2127 + x2132;
x537[x2126] = x2133;

}
x2124 += 150;

}
// add_cartesian
int32_t x2141 = 0;
for(int x2142=0; x2142 < 150; x2142++) {
for(int x2143=0; x2143 < 150; x2143++) {
int32_t x2144 = x2141;
int32_t x2145 = x2144 + x2143;
double x2146 = x251[x2145];
double x2147 = x527[x2143];
double x2148 = x1993[x2142];
double x2149 = x2147 * x2148;
double x2150 = x2146 + x2149;
x251[x2145] = x2150;

}
x2141 += 150;

}
int32_t x2157 = 0;
for(int x2158=0; x2158 < 150; x2158++) {
for(int x2159=0; x2159 < 150; x2159++) {
double x2160 = x528[x2159];
int32_t x2161 = x2157;
int32_t x2162 = x2161 + x2159;
double x2163 = x112[x2162];
double x2164 = x1993[x2158];
double x2165 = x2163 * x2164;
double x2166 = x2160 + x2165;
x528[x2159] = x2166;

}
x2157 += 150;

}
}
};
x560(x2378);
for(int x2382=0; x2382 < 150; x2382++) {
double x2383 = x2358[x2382];
double x2384 = x2363[x2382];
double x2387 = x2373[x2382];
double x2385 = 1.0 - x2384;
double x2386 = x2385 * x2384;
double x2388 = x2386 * x2387;
double x2389 = x2383 + x2388;
x2358[x2382] = x2389;

}
// backpropagate +
for(int x2394=0; x2394 < 150; x2394++) {
double x2395 = x2345[x2394];
double x2396 = x2358[x2394];
double x2397 = x2395 + x2396;
x2345[x2394] = x2397;

}
for(int x2401=0; x2401 < 150; x2401++) {
double x2402 = x246[x2401];
double x2403 = x2358[x2401];
double x2404 = x2402 + x2403;
x246[x2401] = x2404;

}
// backpropagate +
for(int x2409=0; x2409 < 150; x2409++) {
double x2410 = x2309[x2409];
double x2411 = x2345[x2409];
double x2412 = x2410 + x2411;
x2309[x2409] = x2412;

}
for(int x2416=0; x2416 < 150; x2416++) {
double x2417 = x2332[x2416];
double x2418 = x2345[x2416];
double x2419 = x2417 + x2418;
x2332[x2416] = x2419;

}
// add_cartesian
int32_t x2424 = 0;
for(int x2425=0; x2425 < 150; x2425++) {
for(int x2426=0; x2426 < 150; x2426++) {
int32_t x2427 = x2424;
int32_t x2428 = x2427 + x2426;
double x2429 = x241[x2428];
double x2430 = x536[x2426];
double x2431 = x2332[x2425];
double x2432 = x2430 * x2431;
double x2433 = x2429 + x2432;
x241[x2428] = x2433;

}
x2424 += 150;

}
int32_t x2440 = 0;
for(int x2441=0; x2441 < 150; x2441++) {
for(int x2442=0; x2442 < 150; x2442++) {
double x2443 = x537[x2442];
int32_t x2444 = x2440;
int32_t x2445 = x2444 + x2442;
double x2446 = x99[x2445];
double x2447 = x2332[x2441];
double x2448 = x2446 * x2447;
double x2449 = x2443 + x2448;
x537[x2442] = x2449;

}
x2440 += 150;

}
// add_cartesian
int32_t x2457 = 0;
for(int x2458=0; x2458 < 150; x2458++) {
for(int x2459=0; x2459 < 150; x2459++) {
int32_t x2460 = x2457;
int32_t x2461 = x2460 + x2459;
double x2462 = x236[x2461];
double x2463 = x527[x2459];
double x2464 = x2309[x2458];
double x2465 = x2463 * x2464;
double x2466 = x2462 + x2465;
x236[x2461] = x2466;

}
x2457 += 150;

}
int32_t x2473 = 0;
for(int x2474=0; x2474 < 150; x2474++) {
for(int x2475=0; x2475 < 150; x2475++) {
double x2476 = x528[x2475];
int32_t x2477 = x2473;
int32_t x2478 = x2477 + x2475;
double x2479 = x90[x2478];
double x2480 = x2309[x2474];
double x2481 = x2479 * x2480;
double x2482 = x2476 + x2481;
x528[x2475] = x2482;

}
x2473 += 150;

}
}
};
x554(x2504);
}
};
x508(x531,x532,x2511);
};
x508(x522,x523,x2521);
} else {
double** x2531 = (double**)myMalloc(6 * sizeof(double*));
x2531[0] = x515;
x2531[1] = x516;
x2531[2] = x517;
x2531[3] = x518;
x2531[4] = x519;
x2531[5] = x520;
function<void(double**)> x513 = x510;
x513(x2531);
}
};
double* x462 = (double*)myMalloc(1 * sizeof(double));
for(int x464=0; x464 < 1; x464++) {
x462[x464] = 0.0;

}
double* x468 = (double*)myMalloc(1 * sizeof(double));
for(int x469=0; x469 < 1; x469++) {
x468[x469] = 0.0;

}
double* x473 = (double*)myMalloc(1 * sizeof(double));
for(int x474=0; x474 < 1; x474++) {
x473[x474] = 0.0;

}
double* x478 = (double*)myMalloc(1 * sizeof(double));
for(int x479=0; x479 < 1; x479++) {
x478[x479] = 0.0;

}
double* x483 = (double*)myMalloc(1 * sizeof(double));
for(int x484=0; x484 < 1; x484++) {
x483[x484] = 0.0;

}
double* x488 = (double*)myMalloc(150 * sizeof(double));
for(int x489=0; x489 < 150; x489++) {
x488[x489] = 0.0;

}
double* x493 = (double*)myMalloc(150 * sizeof(double));
for(int x494=0; x494 < 150; x494++) {
x493[x494] = 0.0;

}
double* x498 = (double*)myMalloc(150 * sizeof(double));
for(int x499=0; x499 < 150; x499++) {
x498[x499] = 0.0;

}
double* x503 = (double*)myMalloc(150 * sizeof(double));
for(int x504=0; x504 < 150; x504++) {
x503[x504] = 0.0;

}
double** x2561 = (double**)myMalloc(6 * sizeof(double*));
x2561[0] = x478;
x2561[1] = x483;
x2561[2] = x488;
x2561[3] = x493;
x2561[4] = x498;
x2561[5] = x503;
function<void(double**)> x2542 = [&](double** x2543) {
double* x2544 = x2543[0];
double* x2545 = x2543[1];
double* x2546 = x2543[2];
double* x2547 = x2543[3];
double* x2548 = x2543[4];
double* x2549 = x2543[5];
for(int x2550=0; x2550 < 1; x2550++) {
double x2551 = x2545[x2550];
x2545[x2550] = 1.0;

}
for(int x2555=0; x2555 < 1; x2555++) {
double x2556 = x2544[x2555];
x473[x2555] = x2556;

}
};
x508(0,x2542,x2561);
double x2570 = x473[0];
double x2571 = x451;
double x2572 = (double)x452;
double x2573 = x2571 * x2572;
int32_t x2574 = x452 + 1;
double x2575 = (double)x2574;
double x2576 = x2573 / x2575;
double x2577 = x2570 / x2575;
double x2578 = x2576 + x2577;
x451 = x2578;
for(int x2580=0; x2580 < 45000; x2580++) {
double x2581 = x206[x2580];
bool x2582 = x2581 > 5.0;
if (x2582) {
x206[x2580] = 5.0;
} else {
}
double x2586 = x206[x2580];
bool x2587 = x2586 < -5.0;
if (x2587) {
x206[x2580] = -5.0;
} else {
}

}
double* x2593 = (double*)myMalloc(45000 * sizeof(double));
for(int x2594=0; x2594 < 45000; x2594++) {
double x2595 = x206[x2594];
double x2596 = x206[x2594];
double x2597 = x2595 * x2596;
x2593[x2594] = x2597;

}
for(int x2601=0; x2601 < 45000; x2601++) {
double x2602 = x336[x2601];
double x2603 = x2593[x2601];
double x2604 = x2602 + x2603;
x336[x2601] = x2604;

}
double* x2608 = (double*)myMalloc(45000 * sizeof(double));
for(int x2609=0; x2609 < 45000; x2609++) {
double x2610 = x206[x2609];
double x2611 = x2610 * 0.05;
x2608[x2609] = x2611;

}
double* x2615 = (double*)myMalloc(45000 * sizeof(double));
for(int x2616=0; x2616 < 45000; x2616++) {
double x2617 = x336[x2616];
double x2618 = x2617 + 1.0E-8;
x2615[x2616] = x2618;

}
double* x2622 = (double*)myMalloc(45000 * sizeof(double));
for(int x2623=0; x2623 < 45000; x2623++) {
double x2624 = x2615[x2623];
double x2625 = sqrt(x2624);
x2622[x2623] = x2625;

}
double* x2629 = (double*)myMalloc(45000 * sizeof(double));
for(int x2630=0; x2630 < 45000; x2630++) {
double x2631 = x2608[x2630];
double x2632 = x2622[x2630];
double x2633 = x2631 / x2632;
x2629[x2630] = x2633;

}
for(int x2637=0; x2637 < 45000; x2637++) {
double x2638 = x49[x2637];
double x2639 = x2629[x2637];
double x2640 = x2638 - x2639;
x49[x2637] = x2640;

}
for(int x2644=0; x2644 < 45000; x2644++) {
double x2645 = x206[x2644];
x206[x2644] = 0.0;

}
for(int x2649=0; x2649 < 150; x2649++) {
double x2650 = x211[x2649];
bool x2651 = x2650 > 5.0;
if (x2651) {
x211[x2649] = 5.0;
} else {
}
double x2655 = x211[x2649];
bool x2656 = x2655 < -5.0;
if (x2656) {
x211[x2649] = -5.0;
} else {
}

}
double* x2662 = (double*)myMalloc(150 * sizeof(double));
for(int x2663=0; x2663 < 150; x2663++) {
double x2664 = x211[x2663];
double x2665 = x211[x2663];
double x2666 = x2664 * x2665;
x2662[x2663] = x2666;

}
for(int x2670=0; x2670 < 150; x2670++) {
double x2671 = x341[x2670];
double x2672 = x2662[x2670];
double x2673 = x2671 + x2672;
x341[x2670] = x2673;

}
double* x2677 = (double*)myMalloc(150 * sizeof(double));
for(int x2678=0; x2678 < 150; x2678++) {
double x2679 = x211[x2678];
double x2680 = x2679 * 0.05;
x2677[x2678] = x2680;

}
double* x2684 = (double*)myMalloc(150 * sizeof(double));
for(int x2685=0; x2685 < 150; x2685++) {
double x2686 = x341[x2685];
double x2687 = x2686 + 1.0E-8;
x2684[x2685] = x2687;

}
double* x2691 = (double*)myMalloc(150 * sizeof(double));
for(int x2692=0; x2692 < 150; x2692++) {
double x2693 = x2684[x2692];
double x2694 = sqrt(x2693);
x2691[x2692] = x2694;

}
double* x2698 = (double*)myMalloc(150 * sizeof(double));
for(int x2699=0; x2699 < 150; x2699++) {
double x2700 = x2677[x2699];
double x2701 = x2691[x2699];
double x2702 = x2700 / x2701;
x2698[x2699] = x2702;

}
for(int x2706=0; x2706 < 150; x2706++) {
double x2707 = x58[x2706];
double x2708 = x2698[x2706];
double x2709 = x2707 - x2708;
x58[x2706] = x2709;

}
for(int x2713=0; x2713 < 150; x2713++) {
double x2714 = x211[x2713];
x211[x2713] = 0.0;

}
for(int x2718=0; x2718 < 45000; x2718++) {
double x2719 = x216[x2718];
bool x2720 = x2719 > 5.0;
if (x2720) {
x216[x2718] = 5.0;
} else {
}
double x2724 = x216[x2718];
bool x2725 = x2724 < -5.0;
if (x2725) {
x216[x2718] = -5.0;
} else {
}

}
double* x2731 = (double*)myMalloc(45000 * sizeof(double));
for(int x2732=0; x2732 < 45000; x2732++) {
double x2733 = x216[x2732];
double x2734 = x216[x2732];
double x2735 = x2733 * x2734;
x2731[x2732] = x2735;

}
for(int x2739=0; x2739 < 45000; x2739++) {
double x2740 = x346[x2739];
double x2741 = x2731[x2739];
double x2742 = x2740 + x2741;
x346[x2739] = x2742;

}
double* x2746 = (double*)myMalloc(45000 * sizeof(double));
for(int x2747=0; x2747 < 45000; x2747++) {
double x2748 = x216[x2747];
double x2749 = x2748 * 0.05;
x2746[x2747] = x2749;

}
double* x2753 = (double*)myMalloc(45000 * sizeof(double));
for(int x2754=0; x2754 < 45000; x2754++) {
double x2755 = x346[x2754];
double x2756 = x2755 + 1.0E-8;
x2753[x2754] = x2756;

}
double* x2760 = (double*)myMalloc(45000 * sizeof(double));
for(int x2761=0; x2761 < 45000; x2761++) {
double x2762 = x2753[x2761];
double x2763 = sqrt(x2762);
x2760[x2761] = x2763;

}
double* x2767 = (double*)myMalloc(45000 * sizeof(double));
for(int x2768=0; x2768 < 45000; x2768++) {
double x2769 = x2746[x2768];
double x2770 = x2760[x2768];
double x2771 = x2769 / x2770;
x2767[x2768] = x2771;

}
for(int x2775=0; x2775 < 45000; x2775++) {
double x2776 = x64[x2775];
double x2777 = x2767[x2775];
double x2778 = x2776 - x2777;
x64[x2775] = x2778;

}
for(int x2782=0; x2782 < 45000; x2782++) {
double x2783 = x216[x2782];
x216[x2782] = 0.0;

}
for(int x2787=0; x2787 < 150; x2787++) {
double x2788 = x221[x2787];
bool x2789 = x2788 > 5.0;
if (x2789) {
x221[x2787] = 5.0;
} else {
}
double x2793 = x221[x2787];
bool x2794 = x2793 < -5.0;
if (x2794) {
x221[x2787] = -5.0;
} else {
}

}
double* x2800 = (double*)myMalloc(150 * sizeof(double));
for(int x2801=0; x2801 < 150; x2801++) {
double x2802 = x221[x2801];
double x2803 = x221[x2801];
double x2804 = x2802 * x2803;
x2800[x2801] = x2804;

}
for(int x2808=0; x2808 < 150; x2808++) {
double x2809 = x351[x2808];
double x2810 = x2800[x2808];
double x2811 = x2809 + x2810;
x351[x2808] = x2811;

}
double* x2815 = (double*)myMalloc(150 * sizeof(double));
for(int x2816=0; x2816 < 150; x2816++) {
double x2817 = x221[x2816];
double x2818 = x2817 * 0.05;
x2815[x2816] = x2818;

}
double* x2822 = (double*)myMalloc(150 * sizeof(double));
for(int x2823=0; x2823 < 150; x2823++) {
double x2824 = x351[x2823];
double x2825 = x2824 + 1.0E-8;
x2822[x2823] = x2825;

}
double* x2829 = (double*)myMalloc(150 * sizeof(double));
for(int x2830=0; x2830 < 150; x2830++) {
double x2831 = x2822[x2830];
double x2832 = sqrt(x2831);
x2829[x2830] = x2832;

}
double* x2836 = (double*)myMalloc(150 * sizeof(double));
for(int x2837=0; x2837 < 150; x2837++) {
double x2838 = x2815[x2837];
double x2839 = x2829[x2837];
double x2840 = x2838 / x2839;
x2836[x2837] = x2840;

}
for(int x2844=0; x2844 < 150; x2844++) {
double x2845 = x72[x2844];
double x2846 = x2836[x2844];
double x2847 = x2845 - x2846;
x72[x2844] = x2847;

}
for(int x2851=0; x2851 < 150; x2851++) {
double x2852 = x221[x2851];
x221[x2851] = 0.0;

}
for(int x2856=0; x2856 < 45000; x2856++) {
double x2857 = x226[x2856];
bool x2858 = x2857 > 5.0;
if (x2858) {
x226[x2856] = 5.0;
} else {
}
double x2862 = x226[x2856];
bool x2863 = x2862 < -5.0;
if (x2863) {
x226[x2856] = -5.0;
} else {
}

}
double* x2869 = (double*)myMalloc(45000 * sizeof(double));
for(int x2870=0; x2870 < 45000; x2870++) {
double x2871 = x226[x2870];
double x2872 = x226[x2870];
double x2873 = x2871 * x2872;
x2869[x2870] = x2873;

}
for(int x2877=0; x2877 < 45000; x2877++) {
double x2878 = x356[x2877];
double x2879 = x2869[x2877];
double x2880 = x2878 + x2879;
x356[x2877] = x2880;

}
double* x2884 = (double*)myMalloc(45000 * sizeof(double));
for(int x2885=0; x2885 < 45000; x2885++) {
double x2886 = x226[x2885];
double x2887 = x2886 * 0.05;
x2884[x2885] = x2887;

}
double* x2891 = (double*)myMalloc(45000 * sizeof(double));
for(int x2892=0; x2892 < 45000; x2892++) {
double x2893 = x356[x2892];
double x2894 = x2893 + 1.0E-8;
x2891[x2892] = x2894;

}
double* x2898 = (double*)myMalloc(45000 * sizeof(double));
for(int x2899=0; x2899 < 45000; x2899++) {
double x2900 = x2891[x2899];
double x2901 = sqrt(x2900);
x2898[x2899] = x2901;

}
double* x2905 = (double*)myMalloc(45000 * sizeof(double));
for(int x2906=0; x2906 < 45000; x2906++) {
double x2907 = x2884[x2906];
double x2908 = x2898[x2906];
double x2909 = x2907 / x2908;
x2905[x2906] = x2909;

}
for(int x2913=0; x2913 < 45000; x2913++) {
double x2914 = x77[x2913];
double x2915 = x2905[x2913];
double x2916 = x2914 - x2915;
x77[x2913] = x2916;

}
for(int x2920=0; x2920 < 45000; x2920++) {
double x2921 = x226[x2920];
x226[x2920] = 0.0;

}
for(int x2925=0; x2925 < 150; x2925++) {
double x2926 = x231[x2925];
bool x2927 = x2926 > 5.0;
if (x2927) {
x231[x2925] = 5.0;
} else {
}
double x2931 = x231[x2925];
bool x2932 = x2931 < -5.0;
if (x2932) {
x231[x2925] = -5.0;
} else {
}

}
double* x2938 = (double*)myMalloc(150 * sizeof(double));
for(int x2939=0; x2939 < 150; x2939++) {
double x2940 = x231[x2939];
double x2941 = x231[x2939];
double x2942 = x2940 * x2941;
x2938[x2939] = x2942;

}
for(int x2946=0; x2946 < 150; x2946++) {
double x2947 = x361[x2946];
double x2948 = x2938[x2946];
double x2949 = x2947 + x2948;
x361[x2946] = x2949;

}
double* x2953 = (double*)myMalloc(150 * sizeof(double));
for(int x2954=0; x2954 < 150; x2954++) {
double x2955 = x231[x2954];
double x2956 = x2955 * 0.05;
x2953[x2954] = x2956;

}
double* x2960 = (double*)myMalloc(150 * sizeof(double));
for(int x2961=0; x2961 < 150; x2961++) {
double x2962 = x361[x2961];
double x2963 = x2962 + 1.0E-8;
x2960[x2961] = x2963;

}
double* x2967 = (double*)myMalloc(150 * sizeof(double));
for(int x2968=0; x2968 < 150; x2968++) {
double x2969 = x2960[x2968];
double x2970 = sqrt(x2969);
x2967[x2968] = x2970;

}
double* x2974 = (double*)myMalloc(150 * sizeof(double));
for(int x2975=0; x2975 < 150; x2975++) {
double x2976 = x2953[x2975];
double x2977 = x2967[x2975];
double x2978 = x2976 / x2977;
x2974[x2975] = x2978;

}
for(int x2982=0; x2982 < 150; x2982++) {
double x2983 = x85[x2982];
double x2984 = x2974[x2982];
double x2985 = x2983 - x2984;
x85[x2982] = x2985;

}
for(int x2989=0; x2989 < 150; x2989++) {
double x2990 = x231[x2989];
x231[x2989] = 0.0;

}
for(int x2994=0; x2994 < 22500; x2994++) {
double x2995 = x236[x2994];
bool x2996 = x2995 > 5.0;
if (x2996) {
x236[x2994] = 5.0;
} else {
}
double x3000 = x236[x2994];
bool x3001 = x3000 < -5.0;
if (x3001) {
x236[x2994] = -5.0;
} else {
}

}
double* x3007 = (double*)myMalloc(22500 * sizeof(double));
for(int x3008=0; x3008 < 22500; x3008++) {
double x3009 = x236[x3008];
double x3010 = x236[x3008];
double x3011 = x3009 * x3010;
x3007[x3008] = x3011;

}
for(int x3015=0; x3015 < 22500; x3015++) {
double x3016 = x366[x3015];
double x3017 = x3007[x3015];
double x3018 = x3016 + x3017;
x366[x3015] = x3018;

}
double* x3022 = (double*)myMalloc(22500 * sizeof(double));
for(int x3023=0; x3023 < 22500; x3023++) {
double x3024 = x236[x3023];
double x3025 = x3024 * 0.05;
x3022[x3023] = x3025;

}
double* x3029 = (double*)myMalloc(22500 * sizeof(double));
for(int x3030=0; x3030 < 22500; x3030++) {
double x3031 = x366[x3030];
double x3032 = x3031 + 1.0E-8;
x3029[x3030] = x3032;

}
double* x3036 = (double*)myMalloc(22500 * sizeof(double));
for(int x3037=0; x3037 < 22500; x3037++) {
double x3038 = x3029[x3037];
double x3039 = sqrt(x3038);
x3036[x3037] = x3039;

}
double* x3043 = (double*)myMalloc(22500 * sizeof(double));
for(int x3044=0; x3044 < 22500; x3044++) {
double x3045 = x3022[x3044];
double x3046 = x3036[x3044];
double x3047 = x3045 / x3046;
x3043[x3044] = x3047;

}
for(int x3051=0; x3051 < 22500; x3051++) {
double x3052 = x90[x3051];
double x3053 = x3043[x3051];
double x3054 = x3052 - x3053;
x90[x3051] = x3054;

}
for(int x3058=0; x3058 < 22500; x3058++) {
double x3059 = x236[x3058];
x236[x3058] = 0.0;

}
for(int x3063=0; x3063 < 22500; x3063++) {
double x3064 = x241[x3063];
bool x3065 = x3064 > 5.0;
if (x3065) {
x241[x3063] = 5.0;
} else {
}
double x3069 = x241[x3063];
bool x3070 = x3069 < -5.0;
if (x3070) {
x241[x3063] = -5.0;
} else {
}

}
double* x3076 = (double*)myMalloc(22500 * sizeof(double));
for(int x3077=0; x3077 < 22500; x3077++) {
double x3078 = x241[x3077];
double x3079 = x241[x3077];
double x3080 = x3078 * x3079;
x3076[x3077] = x3080;

}
for(int x3084=0; x3084 < 22500; x3084++) {
double x3085 = x371[x3084];
double x3086 = x3076[x3084];
double x3087 = x3085 + x3086;
x371[x3084] = x3087;

}
double* x3091 = (double*)myMalloc(22500 * sizeof(double));
for(int x3092=0; x3092 < 22500; x3092++) {
double x3093 = x241[x3092];
double x3094 = x3093 * 0.05;
x3091[x3092] = x3094;

}
double* x3098 = (double*)myMalloc(22500 * sizeof(double));
for(int x3099=0; x3099 < 22500; x3099++) {
double x3100 = x371[x3099];
double x3101 = x3100 + 1.0E-8;
x3098[x3099] = x3101;

}
double* x3105 = (double*)myMalloc(22500 * sizeof(double));
for(int x3106=0; x3106 < 22500; x3106++) {
double x3107 = x3098[x3106];
double x3108 = sqrt(x3107);
x3105[x3106] = x3108;

}
double* x3112 = (double*)myMalloc(22500 * sizeof(double));
for(int x3113=0; x3113 < 22500; x3113++) {
double x3114 = x3091[x3113];
double x3115 = x3105[x3113];
double x3116 = x3114 / x3115;
x3112[x3113] = x3116;

}
for(int x3120=0; x3120 < 22500; x3120++) {
double x3121 = x99[x3120];
double x3122 = x3112[x3120];
double x3123 = x3121 - x3122;
x99[x3120] = x3123;

}
for(int x3127=0; x3127 < 22500; x3127++) {
double x3128 = x241[x3127];
x241[x3127] = 0.0;

}
for(int x3132=0; x3132 < 150; x3132++) {
double x3133 = x246[x3132];
bool x3134 = x3133 > 5.0;
if (x3134) {
x246[x3132] = 5.0;
} else {
}
double x3138 = x246[x3132];
bool x3139 = x3138 < -5.0;
if (x3139) {
x246[x3132] = -5.0;
} else {
}

}
double* x3145 = (double*)myMalloc(150 * sizeof(double));
for(int x3146=0; x3146 < 150; x3146++) {
double x3147 = x246[x3146];
double x3148 = x246[x3146];
double x3149 = x3147 * x3148;
x3145[x3146] = x3149;

}
for(int x3153=0; x3153 < 150; x3153++) {
double x3154 = x376[x3153];
double x3155 = x3145[x3153];
double x3156 = x3154 + x3155;
x376[x3153] = x3156;

}
double* x3160 = (double*)myMalloc(150 * sizeof(double));
for(int x3161=0; x3161 < 150; x3161++) {
double x3162 = x246[x3161];
double x3163 = x3162 * 0.05;
x3160[x3161] = x3163;

}
double* x3167 = (double*)myMalloc(150 * sizeof(double));
for(int x3168=0; x3168 < 150; x3168++) {
double x3169 = x376[x3168];
double x3170 = x3169 + 1.0E-8;
x3167[x3168] = x3170;

}
double* x3174 = (double*)myMalloc(150 * sizeof(double));
for(int x3175=0; x3175 < 150; x3175++) {
double x3176 = x3167[x3175];
double x3177 = sqrt(x3176);
x3174[x3175] = x3177;

}
double* x3181 = (double*)myMalloc(150 * sizeof(double));
for(int x3182=0; x3182 < 150; x3182++) {
double x3183 = x3160[x3182];
double x3184 = x3174[x3182];
double x3185 = x3183 / x3184;
x3181[x3182] = x3185;

}
for(int x3189=0; x3189 < 150; x3189++) {
double x3190 = x107[x3189];
double x3191 = x3181[x3189];
double x3192 = x3190 - x3191;
x107[x3189] = x3192;

}
for(int x3196=0; x3196 < 150; x3196++) {
double x3197 = x246[x3196];
x246[x3196] = 0.0;

}
for(int x3201=0; x3201 < 22500; x3201++) {
double x3202 = x251[x3201];
bool x3203 = x3202 > 5.0;
if (x3203) {
x251[x3201] = 5.0;
} else {
}
double x3207 = x251[x3201];
bool x3208 = x3207 < -5.0;
if (x3208) {
x251[x3201] = -5.0;
} else {
}

}
double* x3214 = (double*)myMalloc(22500 * sizeof(double));
for(int x3215=0; x3215 < 22500; x3215++) {
double x3216 = x251[x3215];
double x3217 = x251[x3215];
double x3218 = x3216 * x3217;
x3214[x3215] = x3218;

}
for(int x3222=0; x3222 < 22500; x3222++) {
double x3223 = x381[x3222];
double x3224 = x3214[x3222];
double x3225 = x3223 + x3224;
x381[x3222] = x3225;

}
double* x3229 = (double*)myMalloc(22500 * sizeof(double));
for(int x3230=0; x3230 < 22500; x3230++) {
double x3231 = x251[x3230];
double x3232 = x3231 * 0.05;
x3229[x3230] = x3232;

}
double* x3236 = (double*)myMalloc(22500 * sizeof(double));
for(int x3237=0; x3237 < 22500; x3237++) {
double x3238 = x381[x3237];
double x3239 = x3238 + 1.0E-8;
x3236[x3237] = x3239;

}
double* x3243 = (double*)myMalloc(22500 * sizeof(double));
for(int x3244=0; x3244 < 22500; x3244++) {
double x3245 = x3236[x3244];
double x3246 = sqrt(x3245);
x3243[x3244] = x3246;

}
double* x3250 = (double*)myMalloc(22500 * sizeof(double));
for(int x3251=0; x3251 < 22500; x3251++) {
double x3252 = x3229[x3251];
double x3253 = x3243[x3251];
double x3254 = x3252 / x3253;
x3250[x3251] = x3254;

}
for(int x3258=0; x3258 < 22500; x3258++) {
double x3259 = x112[x3258];
double x3260 = x3250[x3258];
double x3261 = x3259 - x3260;
x112[x3258] = x3261;

}
for(int x3265=0; x3265 < 22500; x3265++) {
double x3266 = x251[x3265];
x251[x3265] = 0.0;

}
for(int x3270=0; x3270 < 22500; x3270++) {
double x3271 = x256[x3270];
bool x3272 = x3271 > 5.0;
if (x3272) {
x256[x3270] = 5.0;
} else {
}
double x3276 = x256[x3270];
bool x3277 = x3276 < -5.0;
if (x3277) {
x256[x3270] = -5.0;
} else {
}

}
double* x3283 = (double*)myMalloc(22500 * sizeof(double));
for(int x3284=0; x3284 < 22500; x3284++) {
double x3285 = x256[x3284];
double x3286 = x256[x3284];
double x3287 = x3285 * x3286;
x3283[x3284] = x3287;

}
for(int x3291=0; x3291 < 22500; x3291++) {
double x3292 = x386[x3291];
double x3293 = x3283[x3291];
double x3294 = x3292 + x3293;
x386[x3291] = x3294;

}
double* x3298 = (double*)myMalloc(22500 * sizeof(double));
for(int x3299=0; x3299 < 22500; x3299++) {
double x3300 = x256[x3299];
double x3301 = x3300 * 0.05;
x3298[x3299] = x3301;

}
double* x3305 = (double*)myMalloc(22500 * sizeof(double));
for(int x3306=0; x3306 < 22500; x3306++) {
double x3307 = x386[x3306];
double x3308 = x3307 + 1.0E-8;
x3305[x3306] = x3308;

}
double* x3312 = (double*)myMalloc(22500 * sizeof(double));
for(int x3313=0; x3313 < 22500; x3313++) {
double x3314 = x3305[x3313];
double x3315 = sqrt(x3314);
x3312[x3313] = x3315;

}
double* x3319 = (double*)myMalloc(22500 * sizeof(double));
for(int x3320=0; x3320 < 22500; x3320++) {
double x3321 = x3298[x3320];
double x3322 = x3312[x3320];
double x3323 = x3321 / x3322;
x3319[x3320] = x3323;

}
for(int x3327=0; x3327 < 22500; x3327++) {
double x3328 = x120[x3327];
double x3329 = x3319[x3327];
double x3330 = x3328 - x3329;
x120[x3327] = x3330;

}
for(int x3334=0; x3334 < 22500; x3334++) {
double x3335 = x256[x3334];
x256[x3334] = 0.0;

}
for(int x3339=0; x3339 < 22500; x3339++) {
double x3340 = x261[x3339];
bool x3341 = x3340 > 5.0;
if (x3341) {
x261[x3339] = 5.0;
} else {
}
double x3345 = x261[x3339];
bool x3346 = x3345 < -5.0;
if (x3346) {
x261[x3339] = -5.0;
} else {
}

}
double* x3352 = (double*)myMalloc(22500 * sizeof(double));
for(int x3353=0; x3353 < 22500; x3353++) {
double x3354 = x261[x3353];
double x3355 = x261[x3353];
double x3356 = x3354 * x3355;
x3352[x3353] = x3356;

}
for(int x3360=0; x3360 < 22500; x3360++) {
double x3361 = x391[x3360];
double x3362 = x3352[x3360];
double x3363 = x3361 + x3362;
x391[x3360] = x3363;

}
double* x3367 = (double*)myMalloc(22500 * sizeof(double));
for(int x3368=0; x3368 < 22500; x3368++) {
double x3369 = x261[x3368];
double x3370 = x3369 * 0.05;
x3367[x3368] = x3370;

}
double* x3374 = (double*)myMalloc(22500 * sizeof(double));
for(int x3375=0; x3375 < 22500; x3375++) {
double x3376 = x391[x3375];
double x3377 = x3376 + 1.0E-8;
x3374[x3375] = x3377;

}
double* x3381 = (double*)myMalloc(22500 * sizeof(double));
for(int x3382=0; x3382 < 22500; x3382++) {
double x3383 = x3374[x3382];
double x3384 = sqrt(x3383);
x3381[x3382] = x3384;

}
double* x3388 = (double*)myMalloc(22500 * sizeof(double));
for(int x3389=0; x3389 < 22500; x3389++) {
double x3390 = x3367[x3389];
double x3391 = x3381[x3389];
double x3392 = x3390 / x3391;
x3388[x3389] = x3392;

}
for(int x3396=0; x3396 < 22500; x3396++) {
double x3397 = x128[x3396];
double x3398 = x3388[x3396];
double x3399 = x3397 - x3398;
x128[x3396] = x3399;

}
for(int x3403=0; x3403 < 22500; x3403++) {
double x3404 = x261[x3403];
x261[x3403] = 0.0;

}
for(int x3408=0; x3408 < 22500; x3408++) {
double x3409 = x266[x3408];
bool x3410 = x3409 > 5.0;
if (x3410) {
x266[x3408] = 5.0;
} else {
}
double x3414 = x266[x3408];
bool x3415 = x3414 < -5.0;
if (x3415) {
x266[x3408] = -5.0;
} else {
}

}
double* x3421 = (double*)myMalloc(22500 * sizeof(double));
for(int x3422=0; x3422 < 22500; x3422++) {
double x3423 = x266[x3422];
double x3424 = x266[x3422];
double x3425 = x3423 * x3424;
x3421[x3422] = x3425;

}
for(int x3429=0; x3429 < 22500; x3429++) {
double x3430 = x396[x3429];
double x3431 = x3421[x3429];
double x3432 = x3430 + x3431;
x396[x3429] = x3432;

}
double* x3436 = (double*)myMalloc(22500 * sizeof(double));
for(int x3437=0; x3437 < 22500; x3437++) {
double x3438 = x266[x3437];
double x3439 = x3438 * 0.05;
x3436[x3437] = x3439;

}
double* x3443 = (double*)myMalloc(22500 * sizeof(double));
for(int x3444=0; x3444 < 22500; x3444++) {
double x3445 = x396[x3444];
double x3446 = x3445 + 1.0E-8;
x3443[x3444] = x3446;

}
double* x3450 = (double*)myMalloc(22500 * sizeof(double));
for(int x3451=0; x3451 < 22500; x3451++) {
double x3452 = x3443[x3451];
double x3453 = sqrt(x3452);
x3450[x3451] = x3453;

}
double* x3457 = (double*)myMalloc(22500 * sizeof(double));
for(int x3458=0; x3458 < 22500; x3458++) {
double x3459 = x3436[x3458];
double x3460 = x3450[x3458];
double x3461 = x3459 / x3460;
x3457[x3458] = x3461;

}
for(int x3465=0; x3465 < 22500; x3465++) {
double x3466 = x136[x3465];
double x3467 = x3457[x3465];
double x3468 = x3466 - x3467;
x136[x3465] = x3468;

}
for(int x3472=0; x3472 < 22500; x3472++) {
double x3473 = x266[x3472];
x266[x3472] = 0.0;

}
for(int x3477=0; x3477 < 150; x3477++) {
double x3478 = x271[x3477];
bool x3479 = x3478 > 5.0;
if (x3479) {
x271[x3477] = 5.0;
} else {
}
double x3483 = x271[x3477];
bool x3484 = x3483 < -5.0;
if (x3484) {
x271[x3477] = -5.0;
} else {
}

}
double* x3490 = (double*)myMalloc(150 * sizeof(double));
for(int x3491=0; x3491 < 150; x3491++) {
double x3492 = x271[x3491];
double x3493 = x271[x3491];
double x3494 = x3492 * x3493;
x3490[x3491] = x3494;

}
for(int x3498=0; x3498 < 150; x3498++) {
double x3499 = x401[x3498];
double x3500 = x3490[x3498];
double x3501 = x3499 + x3500;
x401[x3498] = x3501;

}
double* x3505 = (double*)myMalloc(150 * sizeof(double));
for(int x3506=0; x3506 < 150; x3506++) {
double x3507 = x271[x3506];
double x3508 = x3507 * 0.05;
x3505[x3506] = x3508;

}
double* x3512 = (double*)myMalloc(150 * sizeof(double));
for(int x3513=0; x3513 < 150; x3513++) {
double x3514 = x401[x3513];
double x3515 = x3514 + 1.0E-8;
x3512[x3513] = x3515;

}
double* x3519 = (double*)myMalloc(150 * sizeof(double));
for(int x3520=0; x3520 < 150; x3520++) {
double x3521 = x3512[x3520];
double x3522 = sqrt(x3521);
x3519[x3520] = x3522;

}
double* x3526 = (double*)myMalloc(150 * sizeof(double));
for(int x3527=0; x3527 < 150; x3527++) {
double x3528 = x3505[x3527];
double x3529 = x3519[x3527];
double x3530 = x3528 / x3529;
x3526[x3527] = x3530;

}
for(int x3534=0; x3534 < 150; x3534++) {
double x3535 = x144[x3534];
double x3536 = x3526[x3534];
double x3537 = x3535 - x3536;
x144[x3534] = x3537;

}
for(int x3541=0; x3541 < 150; x3541++) {
double x3542 = x271[x3541];
x271[x3541] = 0.0;

}
for(int x3546=0; x3546 < 22500; x3546++) {
double x3547 = x276[x3546];
bool x3548 = x3547 > 5.0;
if (x3548) {
x276[x3546] = 5.0;
} else {
}
double x3552 = x276[x3546];
bool x3553 = x3552 < -5.0;
if (x3553) {
x276[x3546] = -5.0;
} else {
}

}
double* x3559 = (double*)myMalloc(22500 * sizeof(double));
for(int x3560=0; x3560 < 22500; x3560++) {
double x3561 = x276[x3560];
double x3562 = x276[x3560];
double x3563 = x3561 * x3562;
x3559[x3560] = x3563;

}
for(int x3567=0; x3567 < 22500; x3567++) {
double x3568 = x406[x3567];
double x3569 = x3559[x3567];
double x3570 = x3568 + x3569;
x406[x3567] = x3570;

}
double* x3574 = (double*)myMalloc(22500 * sizeof(double));
for(int x3575=0; x3575 < 22500; x3575++) {
double x3576 = x276[x3575];
double x3577 = x3576 * 0.05;
x3574[x3575] = x3577;

}
double* x3581 = (double*)myMalloc(22500 * sizeof(double));
for(int x3582=0; x3582 < 22500; x3582++) {
double x3583 = x406[x3582];
double x3584 = x3583 + 1.0E-8;
x3581[x3582] = x3584;

}
double* x3588 = (double*)myMalloc(22500 * sizeof(double));
for(int x3589=0; x3589 < 22500; x3589++) {
double x3590 = x3581[x3589];
double x3591 = sqrt(x3590);
x3588[x3589] = x3591;

}
double* x3595 = (double*)myMalloc(22500 * sizeof(double));
for(int x3596=0; x3596 < 22500; x3596++) {
double x3597 = x3574[x3596];
double x3598 = x3588[x3596];
double x3599 = x3597 / x3598;
x3595[x3596] = x3599;

}
for(int x3603=0; x3603 < 22500; x3603++) {
double x3604 = x149[x3603];
double x3605 = x3595[x3603];
double x3606 = x3604 - x3605;
x149[x3603] = x3606;

}
for(int x3610=0; x3610 < 22500; x3610++) {
double x3611 = x276[x3610];
x276[x3610] = 0.0;

}
for(int x3615=0; x3615 < 22500; x3615++) {
double x3616 = x281[x3615];
bool x3617 = x3616 > 5.0;
if (x3617) {
x281[x3615] = 5.0;
} else {
}
double x3621 = x281[x3615];
bool x3622 = x3621 < -5.0;
if (x3622) {
x281[x3615] = -5.0;
} else {
}

}
double* x3628 = (double*)myMalloc(22500 * sizeof(double));
for(int x3629=0; x3629 < 22500; x3629++) {
double x3630 = x281[x3629];
double x3631 = x281[x3629];
double x3632 = x3630 * x3631;
x3628[x3629] = x3632;

}
for(int x3636=0; x3636 < 22500; x3636++) {
double x3637 = x411[x3636];
double x3638 = x3628[x3636];
double x3639 = x3637 + x3638;
x411[x3636] = x3639;

}
double* x3643 = (double*)myMalloc(22500 * sizeof(double));
for(int x3644=0; x3644 < 22500; x3644++) {
double x3645 = x281[x3644];
double x3646 = x3645 * 0.05;
x3643[x3644] = x3646;

}
double* x3650 = (double*)myMalloc(22500 * sizeof(double));
for(int x3651=0; x3651 < 22500; x3651++) {
double x3652 = x411[x3651];
double x3653 = x3652 + 1.0E-8;
x3650[x3651] = x3653;

}
double* x3657 = (double*)myMalloc(22500 * sizeof(double));
for(int x3658=0; x3658 < 22500; x3658++) {
double x3659 = x3650[x3658];
double x3660 = sqrt(x3659);
x3657[x3658] = x3660;

}
double* x3664 = (double*)myMalloc(22500 * sizeof(double));
for(int x3665=0; x3665 < 22500; x3665++) {
double x3666 = x3643[x3665];
double x3667 = x3657[x3665];
double x3668 = x3666 / x3667;
x3664[x3665] = x3668;

}
for(int x3672=0; x3672 < 22500; x3672++) {
double x3673 = x157[x3672];
double x3674 = x3664[x3672];
double x3675 = x3673 - x3674;
x157[x3672] = x3675;

}
for(int x3679=0; x3679 < 22500; x3679++) {
double x3680 = x281[x3679];
x281[x3679] = 0.0;

}
for(int x3684=0; x3684 < 150; x3684++) {
double x3685 = x286[x3684];
bool x3686 = x3685 > 5.0;
if (x3686) {
x286[x3684] = 5.0;
} else {
}
double x3690 = x286[x3684];
bool x3691 = x3690 < -5.0;
if (x3691) {
x286[x3684] = -5.0;
} else {
}

}
double* x3697 = (double*)myMalloc(150 * sizeof(double));
for(int x3698=0; x3698 < 150; x3698++) {
double x3699 = x286[x3698];
double x3700 = x286[x3698];
double x3701 = x3699 * x3700;
x3697[x3698] = x3701;

}
for(int x3705=0; x3705 < 150; x3705++) {
double x3706 = x416[x3705];
double x3707 = x3697[x3705];
double x3708 = x3706 + x3707;
x416[x3705] = x3708;

}
double* x3712 = (double*)myMalloc(150 * sizeof(double));
for(int x3713=0; x3713 < 150; x3713++) {
double x3714 = x286[x3713];
double x3715 = x3714 * 0.05;
x3712[x3713] = x3715;

}
double* x3719 = (double*)myMalloc(150 * sizeof(double));
for(int x3720=0; x3720 < 150; x3720++) {
double x3721 = x416[x3720];
double x3722 = x3721 + 1.0E-8;
x3719[x3720] = x3722;

}
double* x3726 = (double*)myMalloc(150 * sizeof(double));
for(int x3727=0; x3727 < 150; x3727++) {
double x3728 = x3719[x3727];
double x3729 = sqrt(x3728);
x3726[x3727] = x3729;

}
double* x3733 = (double*)myMalloc(150 * sizeof(double));
for(int x3734=0; x3734 < 150; x3734++) {
double x3735 = x3712[x3734];
double x3736 = x3726[x3734];
double x3737 = x3735 / x3736;
x3733[x3734] = x3737;

}
for(int x3741=0; x3741 < 150; x3741++) {
double x3742 = x165[x3741];
double x3743 = x3733[x3741];
double x3744 = x3742 - x3743;
x165[x3741] = x3744;

}
for(int x3748=0; x3748 < 150; x3748++) {
double x3749 = x286[x3748];
x286[x3748] = 0.0;

}
for(int x3753=0; x3753 < 22500; x3753++) {
double x3754 = x291[x3753];
bool x3755 = x3754 > 5.0;
if (x3755) {
x291[x3753] = 5.0;
} else {
}
double x3759 = x291[x3753];
bool x3760 = x3759 < -5.0;
if (x3760) {
x291[x3753] = -5.0;
} else {
}

}
double* x3766 = (double*)myMalloc(22500 * sizeof(double));
for(int x3767=0; x3767 < 22500; x3767++) {
double x3768 = x291[x3767];
double x3769 = x291[x3767];
double x3770 = x3768 * x3769;
x3766[x3767] = x3770;

}
for(int x3774=0; x3774 < 22500; x3774++) {
double x3775 = x421[x3774];
double x3776 = x3766[x3774];
double x3777 = x3775 + x3776;
x421[x3774] = x3777;

}
double* x3781 = (double*)myMalloc(22500 * sizeof(double));
for(int x3782=0; x3782 < 22500; x3782++) {
double x3783 = x291[x3782];
double x3784 = x3783 * 0.05;
x3781[x3782] = x3784;

}
double* x3788 = (double*)myMalloc(22500 * sizeof(double));
for(int x3789=0; x3789 < 22500; x3789++) {
double x3790 = x421[x3789];
double x3791 = x3790 + 1.0E-8;
x3788[x3789] = x3791;

}
double* x3795 = (double*)myMalloc(22500 * sizeof(double));
for(int x3796=0; x3796 < 22500; x3796++) {
double x3797 = x3788[x3796];
double x3798 = sqrt(x3797);
x3795[x3796] = x3798;

}
double* x3802 = (double*)myMalloc(22500 * sizeof(double));
for(int x3803=0; x3803 < 22500; x3803++) {
double x3804 = x3781[x3803];
double x3805 = x3795[x3803];
double x3806 = x3804 / x3805;
x3802[x3803] = x3806;

}
for(int x3810=0; x3810 < 22500; x3810++) {
double x3811 = x170[x3810];
double x3812 = x3802[x3810];
double x3813 = x3811 - x3812;
x170[x3810] = x3813;

}
for(int x3817=0; x3817 < 22500; x3817++) {
double x3818 = x291[x3817];
x291[x3817] = 0.0;

}
for(int x3822=0; x3822 < 22500; x3822++) {
double x3823 = x296[x3822];
bool x3824 = x3823 > 5.0;
if (x3824) {
x296[x3822] = 5.0;
} else {
}
double x3828 = x296[x3822];
bool x3829 = x3828 < -5.0;
if (x3829) {
x296[x3822] = -5.0;
} else {
}

}
double* x3835 = (double*)myMalloc(22500 * sizeof(double));
for(int x3836=0; x3836 < 22500; x3836++) {
double x3837 = x296[x3836];
double x3838 = x296[x3836];
double x3839 = x3837 * x3838;
x3835[x3836] = x3839;

}
for(int x3843=0; x3843 < 22500; x3843++) {
double x3844 = x426[x3843];
double x3845 = x3835[x3843];
double x3846 = x3844 + x3845;
x426[x3843] = x3846;

}
double* x3850 = (double*)myMalloc(22500 * sizeof(double));
for(int x3851=0; x3851 < 22500; x3851++) {
double x3852 = x296[x3851];
double x3853 = x3852 * 0.05;
x3850[x3851] = x3853;

}
double* x3857 = (double*)myMalloc(22500 * sizeof(double));
for(int x3858=0; x3858 < 22500; x3858++) {
double x3859 = x426[x3858];
double x3860 = x3859 + 1.0E-8;
x3857[x3858] = x3860;

}
double* x3864 = (double*)myMalloc(22500 * sizeof(double));
for(int x3865=0; x3865 < 22500; x3865++) {
double x3866 = x3857[x3865];
double x3867 = sqrt(x3866);
x3864[x3865] = x3867;

}
double* x3871 = (double*)myMalloc(22500 * sizeof(double));
for(int x3872=0; x3872 < 22500; x3872++) {
double x3873 = x3850[x3872];
double x3874 = x3864[x3872];
double x3875 = x3873 / x3874;
x3871[x3872] = x3875;

}
for(int x3879=0; x3879 < 22500; x3879++) {
double x3880 = x178[x3879];
double x3881 = x3871[x3879];
double x3882 = x3880 - x3881;
x178[x3879] = x3882;

}
for(int x3886=0; x3886 < 22500; x3886++) {
double x3887 = x296[x3886];
x296[x3886] = 0.0;

}
for(int x3891=0; x3891 < 150; x3891++) {
double x3892 = x301[x3891];
bool x3893 = x3892 > 5.0;
if (x3893) {
x301[x3891] = 5.0;
} else {
}
double x3897 = x301[x3891];
bool x3898 = x3897 < -5.0;
if (x3898) {
x301[x3891] = -5.0;
} else {
}

}
double* x3904 = (double*)myMalloc(150 * sizeof(double));
for(int x3905=0; x3905 < 150; x3905++) {
double x3906 = x301[x3905];
double x3907 = x301[x3905];
double x3908 = x3906 * x3907;
x3904[x3905] = x3908;

}
for(int x3912=0; x3912 < 150; x3912++) {
double x3913 = x431[x3912];
double x3914 = x3904[x3912];
double x3915 = x3913 + x3914;
x431[x3912] = x3915;

}
double* x3919 = (double*)myMalloc(150 * sizeof(double));
for(int x3920=0; x3920 < 150; x3920++) {
double x3921 = x301[x3920];
double x3922 = x3921 * 0.05;
x3919[x3920] = x3922;

}
double* x3926 = (double*)myMalloc(150 * sizeof(double));
for(int x3927=0; x3927 < 150; x3927++) {
double x3928 = x431[x3927];
double x3929 = x3928 + 1.0E-8;
x3926[x3927] = x3929;

}
double* x3933 = (double*)myMalloc(150 * sizeof(double));
for(int x3934=0; x3934 < 150; x3934++) {
double x3935 = x3926[x3934];
double x3936 = sqrt(x3935);
x3933[x3934] = x3936;

}
double* x3940 = (double*)myMalloc(150 * sizeof(double));
for(int x3941=0; x3941 < 150; x3941++) {
double x3942 = x3919[x3941];
double x3943 = x3933[x3941];
double x3944 = x3942 / x3943;
x3940[x3941] = x3944;

}
for(int x3948=0; x3948 < 150; x3948++) {
double x3949 = x186[x3948];
double x3950 = x3940[x3948];
double x3951 = x3949 - x3950;
x186[x3948] = x3951;

}
for(int x3955=0; x3955 < 150; x3955++) {
double x3956 = x301[x3955];
x301[x3955] = 0.0;

}
for(int x3960=0; x3960 < 750; x3960++) {
double x3961 = x306[x3960];
bool x3962 = x3961 > 5.0;
if (x3962) {
x306[x3960] = 5.0;
} else {
}
double x3966 = x306[x3960];
bool x3967 = x3966 < -5.0;
if (x3967) {
x306[x3960] = -5.0;
} else {
}

}
double* x3973 = (double*)myMalloc(750 * sizeof(double));
for(int x3974=0; x3974 < 750; x3974++) {
double x3975 = x306[x3974];
double x3976 = x306[x3974];
double x3977 = x3975 * x3976;
x3973[x3974] = x3977;

}
for(int x3981=0; x3981 < 750; x3981++) {
double x3982 = x436[x3981];
double x3983 = x3973[x3981];
double x3984 = x3982 + x3983;
x436[x3981] = x3984;

}
double* x3988 = (double*)myMalloc(750 * sizeof(double));
for(int x3989=0; x3989 < 750; x3989++) {
double x3990 = x306[x3989];
double x3991 = x3990 * 0.05;
x3988[x3989] = x3991;

}
double* x3995 = (double*)myMalloc(750 * sizeof(double));
for(int x3996=0; x3996 < 750; x3996++) {
double x3997 = x436[x3996];
double x3998 = x3997 + 1.0E-8;
x3995[x3996] = x3998;

}
double* x4002 = (double*)myMalloc(750 * sizeof(double));
for(int x4003=0; x4003 < 750; x4003++) {
double x4004 = x3995[x4003];
double x4005 = sqrt(x4004);
x4002[x4003] = x4005;

}
double* x4009 = (double*)myMalloc(750 * sizeof(double));
for(int x4010=0; x4010 < 750; x4010++) {
double x4011 = x3988[x4010];
double x4012 = x4002[x4010];
double x4013 = x4011 / x4012;
x4009[x4010] = x4013;

}
for(int x4017=0; x4017 < 750; x4017++) {
double x4018 = x191[x4017];
double x4019 = x4009[x4017];
double x4020 = x4018 - x4019;
x191[x4017] = x4020;

}
for(int x4024=0; x4024 < 750; x4024++) {
double x4025 = x306[x4024];
x306[x4024] = 0.0;

}
for(int x4029=0; x4029 < 5; x4029++) {
double x4030 = x311[x4029];
bool x4031 = x4030 > 5.0;
if (x4031) {
x311[x4029] = 5.0;
} else {
}
double x4035 = x311[x4029];
bool x4036 = x4035 < -5.0;
if (x4036) {
x311[x4029] = -5.0;
} else {
}

}
double* x4042 = (double*)myMalloc(5 * sizeof(double));
for(int x4043=0; x4043 < 5; x4043++) {
double x4044 = x311[x4043];
double x4045 = x311[x4043];
double x4046 = x4044 * x4045;
x4042[x4043] = x4046;

}
for(int x4050=0; x4050 < 5; x4050++) {
double x4051 = x441[x4050];
double x4052 = x4042[x4050];
double x4053 = x4051 + x4052;
x441[x4050] = x4053;

}
double* x4057 = (double*)myMalloc(5 * sizeof(double));
for(int x4058=0; x4058 < 5; x4058++) {
double x4059 = x311[x4058];
double x4060 = x4059 * 0.05;
x4057[x4058] = x4060;

}
double* x4064 = (double*)myMalloc(5 * sizeof(double));
for(int x4065=0; x4065 < 5; x4065++) {
double x4066 = x441[x4065];
double x4067 = x4066 + 1.0E-8;
x4064[x4065] = x4067;

}
double* x4071 = (double*)myMalloc(5 * sizeof(double));
for(int x4072=0; x4072 < 5; x4072++) {
double x4073 = x4064[x4072];
double x4074 = sqrt(x4073);
x4071[x4072] = x4074;

}
double* x4078 = (double*)myMalloc(5 * sizeof(double));
for(int x4079=0; x4079 < 5; x4079++) {
double x4080 = x4057[x4079];
double x4081 = x4071[x4079];
double x4082 = x4080 / x4081;
x4078[x4079] = x4082;

}
for(int x4086=0; x4086 < 5; x4086++) {
double x4087 = x200[x4086];
double x4088 = x4078[x4086];
double x4089 = x4087 - x4088;
x200[x4086] = x4089;

}
for(int x4093=0; x4093 < 5; x4093++) {
double x4094 = x311[x4093];
x311[x4093] = 0.0;

}
mallocAddr = (void*)x447;

}
double x4101 = x451;
x446[x450] = x4101;
double x4103 = ((double)clock() / CLOCKS_PER_SEC);
double x4104 = x4103 - x448;
printf("epoc %d, average_loss %f, time %lf\n",x450,x4101,x4104);

}
double x4108 = ((double)clock() / CLOCKS_PER_SEC);
int64_t x4112 = (long)fopen(x0, "w");
fprintf((FILE *)x4112, "unit: %s\n", "1 epoch");
for(int x4114=0; x4114 < 30; x4114++) {
double x4115 = x446[x4114];
fprintf((FILE *)x4112, "%lf\n", x4115);

}
double x4109 = x448 - x1;
double x4110 = x4108 - x448;
double x4111 = x4110 / 30.0;
fprintf((FILE *)x4112, "run time: %lf %lf\n", x4109, x4111);
fclose((FILE*)x4112);
}
/*****************************************
  End of C Generated Code                  
*******************************************/

