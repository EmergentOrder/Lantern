
      #include <fcntl.h>
      #include <errno.h>
      #include <err.h>
      #include <sys/mman.h>
      #include <sys/stat.h>
      #include <sys/time.h>
      #include <stdio.h>
      #include <stdint.h>
      #include <unistd.h>
      #include <time.h>
      #include <functional>
      #include <memory>
      #include <math.h>
      #include <random>

      using namespace std;
      #ifndef MAP_FILE
      #define MAP_FILE MAP_SHARED
      #endif
      int fsize(int fd) {
        struct stat stat;
        int res = fstat(fd,&stat);
        return stat.st_size;
      }
      int printll(char* s) {
        while (*s != '\n' && *s != ',' && *s != '\t') {
          putchar(*s++);
        }
        return 0;
      }
      long hash(char *str0, int len)
      {
        unsigned char* str = (unsigned char*)str0;
        unsigned long hash = 5381;
        int c;

        while ((c = *str++) && len--)
          hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

        return hash;
      }
      int HEAP_SIZE = 1073741826; // 1048576;  //2147483652; //536870912; // 268435456; //2097152;
      void *mallocBase = malloc(HEAP_SIZE);
      void *mallocAddr = mallocBase;
      void *waterMark  = mallocBase;
      void* myMalloc(size_t bytes) {
        void* res = mallocAddr;
        mallocAddr += bytes;
        return res;
      }

      int timeval_subtract(struct timeval *result, struct timeval *t2, struct timeval *t1) {
        long int diff = (t2->tv_usec + 1000000 * t2->tv_sec) - (t1->tv_usec + 1000000 * t1->tv_sec);
        result->tv_sec = diff / 1000000;
        result->tv_usec = diff % 1000000;
        return (diff<0);
      }



      void Snippet(char*);

      std::random_device rd{};
      std::mt19937 gen{rd()};
      std::normal_distribution<> d{0,1};

      int main(int argc, char *argv[])
      {

        if (argc != 2) {
          printf("usage: query <filename>\n");
          return 0;
        }
        Snippet(argv[1]);
        return 0;
      }

      
/*****************************************
  Emitting C Generated Code                  
*******************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
void Snippet(char*  x0) {
double x1 = ((double)clock() / CLOCKS_PER_SEC);
int32_t* x2 = (int32_t*)myMalloc(1 * sizeof(int32_t));
int64_t x3 = (long)fopen("small_glove.txt", "r");
if (fscanf((FILE *)x3,"%d", &x2[0])!=1) perror("Error reading file");
int32_t x5 = x2[0];
double** x6 = (double**)myMalloc(x5 * sizeof(double*));
for(int x8=0; x8 < x5; x8++) {
double* x9 = (double*)myMalloc(300 * sizeof(double));
x6[x8] = x9;
for(int x12=0; x12 < 300; x12++) {
double* x13 = x6[x8];
if (fscanf((FILE *)x3,"%lf", &x13[x12])!=1) perror("Error reading file");

}

}
fclose((FILE*)x3);
int32_t* x20 = (int32_t*)myMalloc(1 * sizeof(int32_t));
int64_t x21 = (long)fopen("array_tree.txt", "r");
if (fscanf((FILE *)x21,"%d", &x20[0])!=1) perror("Error reading file");
int32_t x23 = x20[0];
int32_t x24 = x23 * 4;
int** x25 = (int**)myMalloc(x24 * sizeof(int*));
int32_t* x26 = (int32_t*)myMalloc(1 * sizeof(int32_t));
for(int x28=0; x28 < x23; x28++) {
if (fscanf((FILE *)x21,"%d", &x26[0])!=1) perror("Error reading file");
int32_t x32 = x28 * 4;
for(int x31=0; x31 < 4; x31++) {
int32_t x34 = x26[0];
int32_t* x35 = (int32_t*)myMalloc(x34 * sizeof(int32_t));
int32_t x33 = x32 + x31;
x25[x33] = x35;
int32_t x37 = x26[0];
for(int x39=0; x39 < x37; x39++) {
int* x40 = x25[x33];
if (fscanf((FILE *)x21,"%d", &x40[x39])!=1) perror("Error reading file");

}

}

}
fclose((FILE*)x21);
double* x49 = (double*)myMalloc(45000 * sizeof(double));
for(int x51=0; x51 < 45000; x51++) {
double x52 = (double)rand()/RAND_MAX;
double x53 = x52 - 0.5;
double x54 = x53 * 0.01;
x49[x51] = x54;

}
double* x58 = (double*)myMalloc(150 * sizeof(double));
for(int x60=0; x60 < 150; x60++) {
x58[x60] = 0.0;

}
double* x64 = (double*)myMalloc(45000 * sizeof(double));
for(int x65=0; x65 < 45000; x65++) {
double x66 = (double)rand()/RAND_MAX;
double x67 = x66 - 0.5;
double x68 = x67 * 0.01;
x64[x65] = x68;

}
double* x72 = (double*)myMalloc(150 * sizeof(double));
for(int x73=0; x73 < 150; x73++) {
x72[x73] = 0.0;

}
double* x77 = (double*)myMalloc(45000 * sizeof(double));
for(int x78=0; x78 < 45000; x78++) {
double x79 = (double)rand()/RAND_MAX;
double x80 = x79 - 0.5;
double x81 = x80 * 0.01;
x77[x78] = x81;

}
double* x85 = (double*)myMalloc(150 * sizeof(double));
for(int x86=0; x86 < 150; x86++) {
x85[x86] = 0.0;

}
double* x90 = (double*)myMalloc(22500 * sizeof(double));
for(int x92=0; x92 < 22500; x92++) {
double x93 = (double)rand()/RAND_MAX;
double x94 = x93 - 0.5;
double x95 = x94 * 0.01;
x90[x92] = x95;

}
double* x99 = (double*)myMalloc(22500 * sizeof(double));
for(int x100=0; x100 < 22500; x100++) {
double x101 = (double)rand()/RAND_MAX;
double x102 = x101 - 0.5;
double x103 = x102 * 0.01;
x99[x100] = x103;

}
double* x107 = (double*)myMalloc(150 * sizeof(double));
for(int x108=0; x108 < 150; x108++) {
x107[x108] = 0.0;

}
double* x112 = (double*)myMalloc(22500 * sizeof(double));
for(int x113=0; x113 < 22500; x113++) {
double x114 = (double)rand()/RAND_MAX;
double x115 = x114 - 0.5;
double x116 = x115 * 0.01;
x112[x113] = x116;

}
double* x120 = (double*)myMalloc(22500 * sizeof(double));
for(int x121=0; x121 < 22500; x121++) {
double x122 = (double)rand()/RAND_MAX;
double x123 = x122 - 0.5;
double x124 = x123 * 0.01;
x120[x121] = x124;

}
double* x128 = (double*)myMalloc(22500 * sizeof(double));
for(int x129=0; x129 < 22500; x129++) {
double x130 = (double)rand()/RAND_MAX;
double x131 = x130 - 0.5;
double x132 = x131 * 0.01;
x128[x129] = x132;

}
double* x136 = (double*)myMalloc(22500 * sizeof(double));
for(int x137=0; x137 < 22500; x137++) {
double x138 = (double)rand()/RAND_MAX;
double x139 = x138 - 0.5;
double x140 = x139 * 0.01;
x136[x137] = x140;

}
double* x144 = (double*)myMalloc(150 * sizeof(double));
for(int x145=0; x145 < 150; x145++) {
x144[x145] = 0.0;

}
double* x149 = (double*)myMalloc(22500 * sizeof(double));
for(int x150=0; x150 < 22500; x150++) {
double x151 = (double)rand()/RAND_MAX;
double x152 = x151 - 0.5;
double x153 = x152 * 0.01;
x149[x150] = x153;

}
double* x157 = (double*)myMalloc(22500 * sizeof(double));
for(int x158=0; x158 < 22500; x158++) {
double x159 = (double)rand()/RAND_MAX;
double x160 = x159 - 0.5;
double x161 = x160 * 0.01;
x157[x158] = x161;

}
double* x165 = (double*)myMalloc(150 * sizeof(double));
for(int x166=0; x166 < 150; x166++) {
x165[x166] = 0.0;

}
double* x170 = (double*)myMalloc(22500 * sizeof(double));
for(int x171=0; x171 < 22500; x171++) {
double x172 = (double)rand()/RAND_MAX;
double x173 = x172 - 0.5;
double x174 = x173 * 0.01;
x170[x171] = x174;

}
double* x178 = (double*)myMalloc(22500 * sizeof(double));
for(int x179=0; x179 < 22500; x179++) {
double x180 = (double)rand()/RAND_MAX;
double x181 = x180 - 0.5;
double x182 = x181 * 0.01;
x178[x179] = x182;

}
double* x186 = (double*)myMalloc(150 * sizeof(double));
for(int x187=0; x187 < 150; x187++) {
x186[x187] = 0.0;

}
double* x191 = (double*)myMalloc(750 * sizeof(double));
for(int x193=0; x193 < 750; x193++) {
double x194 = (double)rand()/RAND_MAX;
double x195 = x194 - 0.5;
double x196 = x195 * 0.01;
x191[x193] = x196;

}
double* x200 = (double*)myMalloc(5 * sizeof(double));
for(int x202=0; x202 < 5; x202++) {
x200[x202] = 0.0;

}
double* x206 = (double*)myMalloc(45000 * sizeof(double));
for(int x207=0; x207 < 45000; x207++) {
x206[x207] = 0.0;

}
double* x211 = (double*)myMalloc(150 * sizeof(double));
for(int x212=0; x212 < 150; x212++) {
x211[x212] = 0.0;

}
double* x216 = (double*)myMalloc(45000 * sizeof(double));
for(int x217=0; x217 < 45000; x217++) {
x216[x217] = 0.0;

}
double* x221 = (double*)myMalloc(150 * sizeof(double));
for(int x222=0; x222 < 150; x222++) {
x221[x222] = 0.0;

}
double* x226 = (double*)myMalloc(45000 * sizeof(double));
for(int x227=0; x227 < 45000; x227++) {
x226[x227] = 0.0;

}
double* x231 = (double*)myMalloc(150 * sizeof(double));
for(int x232=0; x232 < 150; x232++) {
x231[x232] = 0.0;

}
double* x236 = (double*)myMalloc(22500 * sizeof(double));
for(int x237=0; x237 < 22500; x237++) {
x236[x237] = 0.0;

}
double* x241 = (double*)myMalloc(22500 * sizeof(double));
for(int x242=0; x242 < 22500; x242++) {
x241[x242] = 0.0;

}
double* x246 = (double*)myMalloc(150 * sizeof(double));
for(int x247=0; x247 < 150; x247++) {
x246[x247] = 0.0;

}
double* x251 = (double*)myMalloc(22500 * sizeof(double));
for(int x252=0; x252 < 22500; x252++) {
x251[x252] = 0.0;

}
double* x256 = (double*)myMalloc(22500 * sizeof(double));
for(int x257=0; x257 < 22500; x257++) {
x256[x257] = 0.0;

}
double* x261 = (double*)myMalloc(22500 * sizeof(double));
for(int x262=0; x262 < 22500; x262++) {
x261[x262] = 0.0;

}
double* x266 = (double*)myMalloc(22500 * sizeof(double));
for(int x267=0; x267 < 22500; x267++) {
x266[x267] = 0.0;

}
double* x271 = (double*)myMalloc(150 * sizeof(double));
for(int x272=0; x272 < 150; x272++) {
x271[x272] = 0.0;

}
double* x276 = (double*)myMalloc(22500 * sizeof(double));
for(int x277=0; x277 < 22500; x277++) {
x276[x277] = 0.0;

}
double* x281 = (double*)myMalloc(22500 * sizeof(double));
for(int x282=0; x282 < 22500; x282++) {
x281[x282] = 0.0;

}
double* x286 = (double*)myMalloc(150 * sizeof(double));
for(int x287=0; x287 < 150; x287++) {
x286[x287] = 0.0;

}
double* x291 = (double*)myMalloc(22500 * sizeof(double));
for(int x292=0; x292 < 22500; x292++) {
x291[x292] = 0.0;

}
double* x296 = (double*)myMalloc(22500 * sizeof(double));
for(int x297=0; x297 < 22500; x297++) {
x296[x297] = 0.0;

}
double* x301 = (double*)myMalloc(150 * sizeof(double));
for(int x302=0; x302 < 150; x302++) {
x301[x302] = 0.0;

}
double* x306 = (double*)myMalloc(750 * sizeof(double));
for(int x307=0; x307 < 750; x307++) {
x306[x307] = 0.0;

}
double* x311 = (double*)myMalloc(5 * sizeof(double));
for(int x312=0; x312 < 5; x312++) {
x311[x312] = 0.0;

}
double* x316 = (double*)myMalloc(300 * sizeof(double));
for(int x317=0; x317 < 300; x317++) {
x316[x317] = 0.0;

}
double* x321 = (double*)myMalloc(300 * sizeof(double));
for(int x322=0; x322 < 300; x322++) {
x321[x322] = 0.0;

}
double* x326 = (double*)myMalloc(150 * sizeof(double));
for(int x327=0; x327 < 150; x327++) {
x326[x327] = 0.0;

}
double* x331 = (double*)myMalloc(150 * sizeof(double));
for(int x332=0; x332 < 150; x332++) {
x331[x332] = 0.0;

}
double* x336 = (double*)myMalloc(45000 * sizeof(double));
for(int x337=0; x337 < 45000; x337++) {
x336[x337] = 0.0;

}
double* x341 = (double*)myMalloc(150 * sizeof(double));
for(int x342=0; x342 < 150; x342++) {
x341[x342] = 0.0;

}
double* x346 = (double*)myMalloc(45000 * sizeof(double));
for(int x347=0; x347 < 45000; x347++) {
x346[x347] = 0.0;

}
double* x351 = (double*)myMalloc(150 * sizeof(double));
for(int x352=0; x352 < 150; x352++) {
x351[x352] = 0.0;

}
double* x356 = (double*)myMalloc(45000 * sizeof(double));
for(int x357=0; x357 < 45000; x357++) {
x356[x357] = 0.0;

}
double* x361 = (double*)myMalloc(150 * sizeof(double));
for(int x362=0; x362 < 150; x362++) {
x361[x362] = 0.0;

}
double* x366 = (double*)myMalloc(22500 * sizeof(double));
for(int x367=0; x367 < 22500; x367++) {
x366[x367] = 0.0;

}
double* x371 = (double*)myMalloc(22500 * sizeof(double));
for(int x372=0; x372 < 22500; x372++) {
x371[x372] = 0.0;

}
double* x376 = (double*)myMalloc(150 * sizeof(double));
for(int x377=0; x377 < 150; x377++) {
x376[x377] = 0.0;

}
double* x381 = (double*)myMalloc(22500 * sizeof(double));
for(int x382=0; x382 < 22500; x382++) {
x381[x382] = 0.0;

}
double* x386 = (double*)myMalloc(22500 * sizeof(double));
for(int x387=0; x387 < 22500; x387++) {
x386[x387] = 0.0;

}
double* x391 = (double*)myMalloc(22500 * sizeof(double));
for(int x392=0; x392 < 22500; x392++) {
x391[x392] = 0.0;

}
double* x396 = (double*)myMalloc(22500 * sizeof(double));
for(int x397=0; x397 < 22500; x397++) {
x396[x397] = 0.0;

}
double* x401 = (double*)myMalloc(150 * sizeof(double));
for(int x402=0; x402 < 150; x402++) {
x401[x402] = 0.0;

}
double* x406 = (double*)myMalloc(22500 * sizeof(double));
for(int x407=0; x407 < 22500; x407++) {
x406[x407] = 0.0;

}
double* x411 = (double*)myMalloc(22500 * sizeof(double));
for(int x412=0; x412 < 22500; x412++) {
x411[x412] = 0.0;

}
double* x416 = (double*)myMalloc(150 * sizeof(double));
for(int x417=0; x417 < 150; x417++) {
x416[x417] = 0.0;

}
double* x421 = (double*)myMalloc(22500 * sizeof(double));
for(int x422=0; x422 < 22500; x422++) {
x421[x422] = 0.0;

}
double* x426 = (double*)myMalloc(22500 * sizeof(double));
for(int x427=0; x427 < 22500; x427++) {
x426[x427] = 0.0;

}
double* x431 = (double*)myMalloc(150 * sizeof(double));
for(int x432=0; x432 < 150; x432++) {
x431[x432] = 0.0;

}
double* x436 = (double*)myMalloc(750 * sizeof(double));
for(int x437=0; x437 < 750; x437++) {
x436[x437] = 0.0;

}
double* x441 = (double*)myMalloc(5 * sizeof(double));
for(int x442=0; x442 < 5; x442++) {
x441[x442] = 0.0;

}
double* x446 = (double*)myMalloc(30 * sizeof(double));
int64_t x447 = (long)mallocAddr;
double x448 = ((double)clock() / CLOCKS_PER_SEC);
for(int x450=0; x450 < 30; x450++) {
double x451 = 0.0;
for(int x452=0; x452 < x23; x452++) {
int32_t x453 = x452 % x23;
int32_t x454 = x453 * 4;
int* x455 = x25[x454];
int32_t x456 = x454 + 1;
int* x457 = x25[x456];
int32_t x458 = x454 + 2;
int* x459 = x25[x458];
int32_t x460 = x454 + 3;
int* x461 = x25[x460];
function<void(int32_t,function<void(double**)>,double**)> x508 = [&](int32_t x509,function<void(double**)> x510,double** x511) {
double** x514 = x511;
double* x515 = x514[0];
double* x516 = x514[1];
double* x517 = x514[2];
double* x518 = x514[3];
double* x519 = x514[4];
double* x520 = x514[5];
int32_t x512 = x509;
bool x521 = x512 >= 0;
if (x521) {
int32_t x522 = x459[x512];
double** x3151 = (double**)myMalloc(6 * sizeof(double*));
x3151[0] = x515;
x3151[1] = x516;
x3151[2] = x517;
x3151[3] = x518;
x3151[4] = x519;
x3151[5] = x520;
function<void(double**)> x513 = x510;
function<void(double**)> x523 = [&](double** x524) {
double* x525 = x524[0];
double* x526 = x524[1];
double* x527 = x524[2];
double* x528 = x524[3];
double* x529 = x524[4];
double* x530 = x524[5];
int32_t x531 = x461[x512];
double** x3141 = (double**)myMalloc(6 * sizeof(double*));
x3141[0] = x515;
x3141[1] = x516;
x3141[2] = x517;
x3141[3] = x518;
x3141[4] = x519;
x3141[5] = x520;
function<void(double**)> x532 = [&](double** x533) {
double* x534 = x533[0];
double* x535 = x533[1];
double* x536 = x533[2];
double* x537 = x533[3];
double* x538 = x533[4];
double* x539 = x533[5];
double* x540 = (double*)myMalloc(5 * sizeof(double));
for(int x541=0; x541 < 5; x541++) {
x540[x541] = 0.0;

}
int32_t x545 = x455[x512];
x540[x545] = 1.0;
double* x547 = (double*)myMalloc(5 * sizeof(double));
for(int x548=0; x548 < 5; x548++) {
x547[x548] = 0.0;

}
int32_t x552 = x459[x512];
bool x553 = x552 < 0;
if (x553) {
int32_t x3122 = x457[x512];
double* x3123 = x6[x3122];
double* x3124 = (double*)myMalloc(300 * sizeof(double));
for(int x3125=0; x3125 < 300; x3125++) {
x3124[x3125] = 0.0;

}
double** x3129 = (double**)myMalloc(2 * sizeof(double*));
x3129[0] = x3123;
x3129[1] = x3124;
function<void(double**)> x554 = [&](double** x555) {
double* x556 = x555[0];
double* x557 = x555[1];
int32_t x558 = x459[x512];
bool x559 = x558 < 0;
if (x559) {
// dot List(150, 300) - WrappedArray(300)
int32_t x2672 = 0;
double* x2673 = (double*)myMalloc(150 * sizeof(double));
for(int x2674=0; x2674 < 150; x2674++) {
double x2675 = 0.0;
for(int x2676=0; x2676 < 300; x2676++) {
int32_t x2677 = x2672;
double x2678 = x49[x2677];
double x2679 = x556[x2676];
double x2680 = x2678 * x2679;
x2675 += x2680;
x2672 += 1;

}
double x2685 = x2675;
x2673[x2674] = x2685;

}
double* x2689 = (double*)myMalloc(150 * sizeof(double));
for(int x2690=0; x2690 < 150; x2690++) {
x2689[x2690] = 0.0;

}
double* x2694 = (double*)myMalloc(150 * sizeof(double));
for(int x2695=0; x2695 < 150; x2695++) {
double x2696 = x2673[x2695];
double x2697 = x58[x2695];
double x2698 = x2696 + x2697;
x2694[x2695] = x2698;

}
double* x2702 = (double*)myMalloc(150 * sizeof(double));
for(int x2703=0; x2703 < 150; x2703++) {
x2702[x2703] = 0.0;

}
double* x2707 = (double*)myMalloc(150 * sizeof(double));
for(int x2708=0; x2708 < 150; x2708++) {
double x2709 = x2694[x2708];
double x2710 = -1.0 * x2709;
double x2711 = exp(x2710);
double x2712 = x2711 + 1.0;
double x2713 = 1.0 / x2712;
x2707[x2708] = x2713;

}
double* x2717 = (double*)myMalloc(150 * sizeof(double));
for(int x2718=0; x2718 < 150; x2718++) {
x2717[x2718] = 0.0;

}
double** x2722 = (double**)myMalloc(2 * sizeof(double*));
x2722[0] = x2707;
x2722[1] = x2717;
function<void(double**)> x560 = [&](double** x561) {
double* x562 = x561[0];
double* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
double** x2375 = (double**)myMalloc(2 * sizeof(double*));
x2375[0] = x326;
x2375[1] = x331;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x2079 = (double**)myMalloc(2 * sizeof(double*));
x2079[0] = x326;
x2079[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2079);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2085 = 0;
double* x2086 = (double*)myMalloc(150 * sizeof(double));
for(int x2087=0; x2087 < 150; x2087++) {
double x2088 = 0.0;
for(int x2089=0; x2089 < 150; x2089++) {
int32_t x2090 = x2085;
double x2091 = x128[x2090];
double x2092 = x527[x2089];
double x2093 = x2091 * x2092;
x2088 += x2093;
x2085 += 1;

}
double x2098 = x2088;
x2086[x2087] = x2098;

}
double* x2102 = (double*)myMalloc(150 * sizeof(double));
for(int x2103=0; x2103 < 150; x2103++) {
x2102[x2103] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2108 = 0;
double* x2109 = (double*)myMalloc(150 * sizeof(double));
for(int x2110=0; x2110 < 150; x2110++) {
double x2111 = 0.0;
for(int x2112=0; x2112 < 150; x2112++) {
int32_t x2113 = x2108;
double x2114 = x136[x2113];
double x2115 = x536[x2112];
double x2116 = x2114 * x2115;
x2111 += x2116;
x2108 += 1;

}
double x2121 = x2111;
x2109[x2110] = x2121;

}
double* x2125 = (double*)myMalloc(150 * sizeof(double));
for(int x2126=0; x2126 < 150; x2126++) {
x2125[x2126] = 0.0;

}
double* x2130 = (double*)myMalloc(150 * sizeof(double));
for(int x2131=0; x2131 < 150; x2131++) {
double x2132 = x2086[x2131];
double x2133 = x2109[x2131];
double x2134 = x2132 + x2133;
x2130[x2131] = x2134;

}
double* x2138 = (double*)myMalloc(150 * sizeof(double));
for(int x2139=0; x2139 < 150; x2139++) {
x2138[x2139] = 0.0;

}
double* x2143 = (double*)myMalloc(150 * sizeof(double));
for(int x2144=0; x2144 < 150; x2144++) {
double x2145 = x2130[x2144];
double x2146 = x144[x2144];
double x2147 = x2145 + x2146;
x2143[x2144] = x2147;

}
double* x2151 = (double*)myMalloc(150 * sizeof(double));
for(int x2152=0; x2152 < 150; x2152++) {
x2151[x2152] = 0.0;

}
double* x2156 = (double*)myMalloc(150 * sizeof(double));
for(int x2157=0; x2157 < 150; x2157++) {
double x2158 = x2143[x2157];
double x2159 = -1.0 * x2158;
double x2160 = exp(x2159);
double x2161 = x2160 + 1.0;
double x2162 = 1.0 / x2161;
x2156[x2157] = x2162;

}
double* x2166 = (double*)myMalloc(150 * sizeof(double));
for(int x2167=0; x2167 < 150; x2167++) {
x2166[x2167] = 0.0;

}
double** x2171 = (double**)myMalloc(2 * sizeof(double*));
x2171[0] = x2156;
x2171[1] = x2166;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2171);
for(int x2175=0; x2175 < 150; x2175++) {
double x2176 = x2151[x2175];
double x2177 = x2156[x2175];
double x2180 = x2166[x2175];
double x2178 = 1.0 - x2177;
double x2179 = x2178 * x2177;
double x2181 = x2179 * x2180;
double x2182 = x2176 + x2181;
x2151[x2175] = x2182;

}
// backpropagate +
for(int x2187=0; x2187 < 150; x2187++) {
double x2188 = x2138[x2187];
double x2189 = x2151[x2187];
double x2190 = x2188 + x2189;
x2138[x2187] = x2190;

}
for(int x2194=0; x2194 < 150; x2194++) {
double x2195 = x271[x2194];
double x2196 = x2151[x2194];
double x2197 = x2195 + x2196;
x271[x2194] = x2197;

}
// backpropagate +
for(int x2202=0; x2202 < 150; x2202++) {
double x2203 = x2102[x2202];
double x2204 = x2138[x2202];
double x2205 = x2203 + x2204;
x2102[x2202] = x2205;

}
for(int x2209=0; x2209 < 150; x2209++) {
double x2210 = x2125[x2209];
double x2211 = x2138[x2209];
double x2212 = x2210 + x2211;
x2125[x2209] = x2212;

}
int32_t x2216 = 0;
int32_t x2217 = x2216;
int32_t x2218 = x2217;
int32_t x2219 = 0;
int32_t x2220 = x2219;
int32_t x2221 = x2220;
int32_t x2222 = 0;
int32_t x2223 = x2222;
int32_t x2224 = x2223;
for(int x2225=0; x2225 < 150; x2225++) {
int32_t x2226 = x2224;
int32_t x2227 = x2226;
for(int x2228=0; x2228 < 150; x2228++) {
int32_t x2229 = x2227;
int32_t x2230 = x2229;
int32_t x2231 = x2221;
int32_t x2232 = x2231;
for(int x2233=0; x2233 < 1; x2233++) {
int32_t x2234 = x2218;
double x2235 = x266[x2234];
int32_t x2236 = x2232;
double x2237 = x2125[x2236];
int32_t x2238 = x2230;
double x2239 = x536[x2238];
double x2240 = x2237 * x2239;
double x2241 = x2235 + x2240;
x266[x2234] = x2241;
x2232 += 1;
x2230 += 150;

}
x2218 += 1;
x2227 += 1;

}
x2221 += 1;
x2224 *= 0;

}
int32_t x2255 = 0;
int32_t x2256 = x2255;
int32_t x2257 = x2256;
int32_t x2258 = 0;
int32_t x2259 = x2258;
int32_t x2260 = x2259;
int32_t x2261 = 0;
int32_t x2262 = x2261;
int32_t x2263 = x2262;
for(int x2264=0; x2264 < 1; x2264++) {
int32_t x2265 = x2263;
int32_t x2266 = x2265;
for(int x2267=0; x2267 < 150; x2267++) {
int32_t x2268 = x2266;
int32_t x2269 = x2268;
int32_t x2270 = x2260;
int32_t x2271 = x2270;
for(int x2272=0; x2272 < 150; x2272++) {
int32_t x2273 = x2257;
double x2274 = x537[x2273];
int32_t x2275 = x2271;
double x2276 = x2125[x2275];
int32_t x2277 = x2269;
double x2278 = x136[x2277];
double x2279 = x2276 * x2278;
double x2280 = x2274 + x2279;
x537[x2273] = x2280;
x2271 += 1;
x2269 += 150;

}
x2257 += 1;
x2266 += 1;

}
x2260 += 150;
x2263 *= 0;

}
int32_t x2294 = 0;
int32_t x2295 = x2294;
int32_t x2296 = x2295;
int32_t x2297 = 0;
int32_t x2298 = x2297;
int32_t x2299 = x2298;
int32_t x2300 = 0;
int32_t x2301 = x2300;
int32_t x2302 = x2301;
for(int x2303=0; x2303 < 150; x2303++) {
int32_t x2304 = x2302;
int32_t x2305 = x2304;
for(int x2306=0; x2306 < 150; x2306++) {
int32_t x2307 = x2305;
int32_t x2308 = x2307;
int32_t x2309 = x2299;
int32_t x2310 = x2309;
for(int x2311=0; x2311 < 1; x2311++) {
int32_t x2312 = x2296;
double x2313 = x261[x2312];
int32_t x2314 = x2310;
double x2315 = x2102[x2314];
int32_t x2316 = x2308;
double x2317 = x527[x2316];
double x2318 = x2315 * x2317;
double x2319 = x2313 + x2318;
x261[x2312] = x2319;
x2310 += 1;
x2308 += 150;

}
x2296 += 1;
x2305 += 1;

}
x2299 += 1;
x2302 *= 0;

}
int32_t x2333 = 0;
int32_t x2334 = x2333;
int32_t x2335 = x2334;
int32_t x2336 = 0;
int32_t x2337 = x2336;
int32_t x2338 = x2337;
int32_t x2339 = 0;
int32_t x2340 = x2339;
int32_t x2341 = x2340;
for(int x2342=0; x2342 < 1; x2342++) {
int32_t x2343 = x2341;
int32_t x2344 = x2343;
for(int x2345=0; x2345 < 150; x2345++) {
int32_t x2346 = x2344;
int32_t x2347 = x2346;
int32_t x2348 = x2338;
int32_t x2349 = x2348;
for(int x2350=0; x2350 < 150; x2350++) {
int32_t x2351 = x2335;
double x2352 = x528[x2351];
int32_t x2353 = x2349;
double x2354 = x2102[x2353];
int32_t x2355 = x2347;
double x2356 = x128[x2355];
double x2357 = x2354 * x2356;
double x2358 = x2352 + x2357;
x528[x2351] = x2358;
x2349 += 1;
x2347 += 150;

}
x2335 += 1;
x2344 += 1;

}
x2338 += 150;
x2341 *= 0;

}
}
};
x566(x2375);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2381 = 0;
double* x2382 = (double*)myMalloc(150 * sizeof(double));
for(int x2383=0; x2383 < 150; x2383++) {
double x2384 = 0.0;
for(int x2385=0; x2385 < 150; x2385++) {
int32_t x2386 = x2381;
double x2387 = x112[x2386];
double x2388 = x527[x2385];
double x2389 = x2387 * x2388;
x2384 += x2389;
x2381 += 1;

}
double x2394 = x2384;
x2382[x2383] = x2394;

}
double* x2398 = (double*)myMalloc(150 * sizeof(double));
for(int x2399=0; x2399 < 150; x2399++) {
x2398[x2399] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2404 = 0;
double* x2405 = (double*)myMalloc(150 * sizeof(double));
for(int x2406=0; x2406 < 150; x2406++) {
double x2407 = 0.0;
for(int x2408=0; x2408 < 150; x2408++) {
int32_t x2409 = x2404;
double x2410 = x120[x2409];
double x2411 = x536[x2408];
double x2412 = x2410 * x2411;
x2407 += x2412;
x2404 += 1;

}
double x2417 = x2407;
x2405[x2406] = x2417;

}
double* x2421 = (double*)myMalloc(150 * sizeof(double));
for(int x2422=0; x2422 < 150; x2422++) {
x2421[x2422] = 0.0;

}
double* x2426 = (double*)myMalloc(150 * sizeof(double));
for(int x2427=0; x2427 < 150; x2427++) {
double x2428 = x2382[x2427];
double x2429 = x2405[x2427];
double x2430 = x2428 + x2429;
x2426[x2427] = x2430;

}
double* x2434 = (double*)myMalloc(150 * sizeof(double));
for(int x2435=0; x2435 < 150; x2435++) {
x2434[x2435] = 0.0;

}
double* x2439 = (double*)myMalloc(150 * sizeof(double));
for(int x2440=0; x2440 < 150; x2440++) {
double x2441 = x2426[x2440];
double x2442 = x144[x2440];
double x2443 = x2441 + x2442;
x2439[x2440] = x2443;

}
double* x2447 = (double*)myMalloc(150 * sizeof(double));
for(int x2448=0; x2448 < 150; x2448++) {
x2447[x2448] = 0.0;

}
double* x2452 = (double*)myMalloc(150 * sizeof(double));
for(int x2453=0; x2453 < 150; x2453++) {
double x2454 = x2439[x2453];
double x2455 = -1.0 * x2454;
double x2456 = exp(x2455);
double x2457 = x2456 + 1.0;
double x2458 = 1.0 / x2457;
x2452[x2453] = x2458;

}
double* x2462 = (double*)myMalloc(150 * sizeof(double));
for(int x2463=0; x2463 < 150; x2463++) {
x2462[x2463] = 0.0;

}
double** x2467 = (double**)myMalloc(2 * sizeof(double*));
x2467[0] = x2452;
x2467[1] = x2462;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x2079 = (double**)myMalloc(2 * sizeof(double*));
x2079[0] = x326;
x2079[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2079);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2085 = 0;
double* x2086 = (double*)myMalloc(150 * sizeof(double));
for(int x2087=0; x2087 < 150; x2087++) {
double x2088 = 0.0;
for(int x2089=0; x2089 < 150; x2089++) {
int32_t x2090 = x2085;
double x2091 = x128[x2090];
double x2092 = x527[x2089];
double x2093 = x2091 * x2092;
x2088 += x2093;
x2085 += 1;

}
double x2098 = x2088;
x2086[x2087] = x2098;

}
double* x2102 = (double*)myMalloc(150 * sizeof(double));
for(int x2103=0; x2103 < 150; x2103++) {
x2102[x2103] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2108 = 0;
double* x2109 = (double*)myMalloc(150 * sizeof(double));
for(int x2110=0; x2110 < 150; x2110++) {
double x2111 = 0.0;
for(int x2112=0; x2112 < 150; x2112++) {
int32_t x2113 = x2108;
double x2114 = x136[x2113];
double x2115 = x536[x2112];
double x2116 = x2114 * x2115;
x2111 += x2116;
x2108 += 1;

}
double x2121 = x2111;
x2109[x2110] = x2121;

}
double* x2125 = (double*)myMalloc(150 * sizeof(double));
for(int x2126=0; x2126 < 150; x2126++) {
x2125[x2126] = 0.0;

}
double* x2130 = (double*)myMalloc(150 * sizeof(double));
for(int x2131=0; x2131 < 150; x2131++) {
double x2132 = x2086[x2131];
double x2133 = x2109[x2131];
double x2134 = x2132 + x2133;
x2130[x2131] = x2134;

}
double* x2138 = (double*)myMalloc(150 * sizeof(double));
for(int x2139=0; x2139 < 150; x2139++) {
x2138[x2139] = 0.0;

}
double* x2143 = (double*)myMalloc(150 * sizeof(double));
for(int x2144=0; x2144 < 150; x2144++) {
double x2145 = x2130[x2144];
double x2146 = x144[x2144];
double x2147 = x2145 + x2146;
x2143[x2144] = x2147;

}
double* x2151 = (double*)myMalloc(150 * sizeof(double));
for(int x2152=0; x2152 < 150; x2152++) {
x2151[x2152] = 0.0;

}
double* x2156 = (double*)myMalloc(150 * sizeof(double));
for(int x2157=0; x2157 < 150; x2157++) {
double x2158 = x2143[x2157];
double x2159 = -1.0 * x2158;
double x2160 = exp(x2159);
double x2161 = x2160 + 1.0;
double x2162 = 1.0 / x2161;
x2156[x2157] = x2162;

}
double* x2166 = (double*)myMalloc(150 * sizeof(double));
for(int x2167=0; x2167 < 150; x2167++) {
x2166[x2167] = 0.0;

}
double** x2171 = (double**)myMalloc(2 * sizeof(double*));
x2171[0] = x2156;
x2171[1] = x2166;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2171);
for(int x2175=0; x2175 < 150; x2175++) {
double x2176 = x2151[x2175];
double x2177 = x2156[x2175];
double x2180 = x2166[x2175];
double x2178 = 1.0 - x2177;
double x2179 = x2178 * x2177;
double x2181 = x2179 * x2180;
double x2182 = x2176 + x2181;
x2151[x2175] = x2182;

}
// backpropagate +
for(int x2187=0; x2187 < 150; x2187++) {
double x2188 = x2138[x2187];
double x2189 = x2151[x2187];
double x2190 = x2188 + x2189;
x2138[x2187] = x2190;

}
for(int x2194=0; x2194 < 150; x2194++) {
double x2195 = x271[x2194];
double x2196 = x2151[x2194];
double x2197 = x2195 + x2196;
x271[x2194] = x2197;

}
// backpropagate +
for(int x2202=0; x2202 < 150; x2202++) {
double x2203 = x2102[x2202];
double x2204 = x2138[x2202];
double x2205 = x2203 + x2204;
x2102[x2202] = x2205;

}
for(int x2209=0; x2209 < 150; x2209++) {
double x2210 = x2125[x2209];
double x2211 = x2138[x2209];
double x2212 = x2210 + x2211;
x2125[x2209] = x2212;

}
int32_t x2216 = 0;
int32_t x2217 = x2216;
int32_t x2218 = x2217;
int32_t x2219 = 0;
int32_t x2220 = x2219;
int32_t x2221 = x2220;
int32_t x2222 = 0;
int32_t x2223 = x2222;
int32_t x2224 = x2223;
for(int x2225=0; x2225 < 150; x2225++) {
int32_t x2226 = x2224;
int32_t x2227 = x2226;
for(int x2228=0; x2228 < 150; x2228++) {
int32_t x2229 = x2227;
int32_t x2230 = x2229;
int32_t x2231 = x2221;
int32_t x2232 = x2231;
for(int x2233=0; x2233 < 1; x2233++) {
int32_t x2234 = x2218;
double x2235 = x266[x2234];
int32_t x2236 = x2232;
double x2237 = x2125[x2236];
int32_t x2238 = x2230;
double x2239 = x536[x2238];
double x2240 = x2237 * x2239;
double x2241 = x2235 + x2240;
x266[x2234] = x2241;
x2232 += 1;
x2230 += 150;

}
x2218 += 1;
x2227 += 1;

}
x2221 += 1;
x2224 *= 0;

}
int32_t x2255 = 0;
int32_t x2256 = x2255;
int32_t x2257 = x2256;
int32_t x2258 = 0;
int32_t x2259 = x2258;
int32_t x2260 = x2259;
int32_t x2261 = 0;
int32_t x2262 = x2261;
int32_t x2263 = x2262;
for(int x2264=0; x2264 < 1; x2264++) {
int32_t x2265 = x2263;
int32_t x2266 = x2265;
for(int x2267=0; x2267 < 150; x2267++) {
int32_t x2268 = x2266;
int32_t x2269 = x2268;
int32_t x2270 = x2260;
int32_t x2271 = x2270;
for(int x2272=0; x2272 < 150; x2272++) {
int32_t x2273 = x2257;
double x2274 = x537[x2273];
int32_t x2275 = x2271;
double x2276 = x2125[x2275];
int32_t x2277 = x2269;
double x2278 = x136[x2277];
double x2279 = x2276 * x2278;
double x2280 = x2274 + x2279;
x537[x2273] = x2280;
x2271 += 1;
x2269 += 150;

}
x2257 += 1;
x2266 += 1;

}
x2260 += 150;
x2263 *= 0;

}
int32_t x2294 = 0;
int32_t x2295 = x2294;
int32_t x2296 = x2295;
int32_t x2297 = 0;
int32_t x2298 = x2297;
int32_t x2299 = x2298;
int32_t x2300 = 0;
int32_t x2301 = x2300;
int32_t x2302 = x2301;
for(int x2303=0; x2303 < 150; x2303++) {
int32_t x2304 = x2302;
int32_t x2305 = x2304;
for(int x2306=0; x2306 < 150; x2306++) {
int32_t x2307 = x2305;
int32_t x2308 = x2307;
int32_t x2309 = x2299;
int32_t x2310 = x2309;
for(int x2311=0; x2311 < 1; x2311++) {
int32_t x2312 = x2296;
double x2313 = x261[x2312];
int32_t x2314 = x2310;
double x2315 = x2102[x2314];
int32_t x2316 = x2308;
double x2317 = x527[x2316];
double x2318 = x2315 * x2317;
double x2319 = x2313 + x2318;
x261[x2312] = x2319;
x2310 += 1;
x2308 += 150;

}
x2296 += 1;
x2305 += 1;

}
x2299 += 1;
x2302 *= 0;

}
int32_t x2333 = 0;
int32_t x2334 = x2333;
int32_t x2335 = x2334;
int32_t x2336 = 0;
int32_t x2337 = x2336;
int32_t x2338 = x2337;
int32_t x2339 = 0;
int32_t x2340 = x2339;
int32_t x2341 = x2340;
for(int x2342=0; x2342 < 1; x2342++) {
int32_t x2343 = x2341;
int32_t x2344 = x2343;
for(int x2345=0; x2345 < 150; x2345++) {
int32_t x2346 = x2344;
int32_t x2347 = x2346;
int32_t x2348 = x2338;
int32_t x2349 = x2348;
for(int x2350=0; x2350 < 150; x2350++) {
int32_t x2351 = x2335;
double x2352 = x528[x2351];
int32_t x2353 = x2349;
double x2354 = x2102[x2353];
int32_t x2355 = x2347;
double x2356 = x128[x2355];
double x2357 = x2354 * x2356;
double x2358 = x2352 + x2357;
x528[x2351] = x2358;
x2349 += 1;
x2347 += 150;

}
x2335 += 1;
x2344 += 1;

}
x2338 += 150;
x2341 *= 0;

}
}
};
x566(x2467);
for(int x2471=0; x2471 < 150; x2471++) {
double x2472 = x2447[x2471];
double x2473 = x2452[x2471];
double x2476 = x2462[x2471];
double x2474 = 1.0 - x2473;
double x2475 = x2474 * x2473;
double x2477 = x2475 * x2476;
double x2478 = x2472 + x2477;
x2447[x2471] = x2478;

}
// backpropagate +
for(int x2483=0; x2483 < 150; x2483++) {
double x2484 = x2434[x2483];
double x2485 = x2447[x2483];
double x2486 = x2484 + x2485;
x2434[x2483] = x2486;

}
for(int x2490=0; x2490 < 150; x2490++) {
double x2491 = x271[x2490];
double x2492 = x2447[x2490];
double x2493 = x2491 + x2492;
x271[x2490] = x2493;

}
// backpropagate +
for(int x2498=0; x2498 < 150; x2498++) {
double x2499 = x2398[x2498];
double x2500 = x2434[x2498];
double x2501 = x2499 + x2500;
x2398[x2498] = x2501;

}
for(int x2505=0; x2505 < 150; x2505++) {
double x2506 = x2421[x2505];
double x2507 = x2434[x2505];
double x2508 = x2506 + x2507;
x2421[x2505] = x2508;

}
int32_t x2512 = 0;
int32_t x2513 = x2512;
int32_t x2514 = x2513;
int32_t x2515 = 0;
int32_t x2516 = x2515;
int32_t x2517 = x2516;
int32_t x2518 = 0;
int32_t x2519 = x2518;
int32_t x2520 = x2519;
for(int x2521=0; x2521 < 150; x2521++) {
int32_t x2522 = x2520;
int32_t x2523 = x2522;
for(int x2524=0; x2524 < 150; x2524++) {
int32_t x2525 = x2523;
int32_t x2526 = x2525;
int32_t x2527 = x2517;
int32_t x2528 = x2527;
for(int x2529=0; x2529 < 1; x2529++) {
int32_t x2530 = x2514;
double x2531 = x256[x2530];
int32_t x2532 = x2528;
double x2533 = x2421[x2532];
int32_t x2534 = x2526;
double x2535 = x536[x2534];
double x2536 = x2533 * x2535;
double x2537 = x2531 + x2536;
x256[x2530] = x2537;
x2528 += 1;
x2526 += 150;

}
x2514 += 1;
x2523 += 1;

}
x2517 += 1;
x2520 *= 0;

}
int32_t x2551 = 0;
int32_t x2552 = x2551;
int32_t x2553 = x2552;
int32_t x2554 = 0;
int32_t x2555 = x2554;
int32_t x2556 = x2555;
int32_t x2557 = 0;
int32_t x2558 = x2557;
int32_t x2559 = x2558;
for(int x2560=0; x2560 < 1; x2560++) {
int32_t x2561 = x2559;
int32_t x2562 = x2561;
for(int x2563=0; x2563 < 150; x2563++) {
int32_t x2564 = x2562;
int32_t x2565 = x2564;
int32_t x2566 = x2556;
int32_t x2567 = x2566;
for(int x2568=0; x2568 < 150; x2568++) {
int32_t x2569 = x2553;
double x2570 = x537[x2569];
int32_t x2571 = x2567;
double x2572 = x2421[x2571];
int32_t x2573 = x2565;
double x2574 = x120[x2573];
double x2575 = x2572 * x2574;
double x2576 = x2570 + x2575;
x537[x2569] = x2576;
x2567 += 1;
x2565 += 150;

}
x2553 += 1;
x2562 += 1;

}
x2556 += 150;
x2559 *= 0;

}
int32_t x2590 = 0;
int32_t x2591 = x2590;
int32_t x2592 = x2591;
int32_t x2593 = 0;
int32_t x2594 = x2593;
int32_t x2595 = x2594;
int32_t x2596 = 0;
int32_t x2597 = x2596;
int32_t x2598 = x2597;
for(int x2599=0; x2599 < 150; x2599++) {
int32_t x2600 = x2598;
int32_t x2601 = x2600;
for(int x2602=0; x2602 < 150; x2602++) {
int32_t x2603 = x2601;
int32_t x2604 = x2603;
int32_t x2605 = x2595;
int32_t x2606 = x2605;
for(int x2607=0; x2607 < 1; x2607++) {
int32_t x2608 = x2592;
double x2609 = x251[x2608];
int32_t x2610 = x2606;
double x2611 = x2398[x2610];
int32_t x2612 = x2604;
double x2613 = x527[x2612];
double x2614 = x2611 * x2613;
double x2615 = x2609 + x2614;
x251[x2608] = x2615;
x2606 += 1;
x2604 += 150;

}
x2592 += 1;
x2601 += 1;

}
x2595 += 1;
x2598 *= 0;

}
int32_t x2629 = 0;
int32_t x2630 = x2629;
int32_t x2631 = x2630;
int32_t x2632 = 0;
int32_t x2633 = x2632;
int32_t x2634 = x2633;
int32_t x2635 = 0;
int32_t x2636 = x2635;
int32_t x2637 = x2636;
for(int x2638=0; x2638 < 1; x2638++) {
int32_t x2639 = x2637;
int32_t x2640 = x2639;
for(int x2641=0; x2641 < 150; x2641++) {
int32_t x2642 = x2640;
int32_t x2643 = x2642;
int32_t x2644 = x2634;
int32_t x2645 = x2644;
for(int x2646=0; x2646 < 150; x2646++) {
int32_t x2647 = x2631;
double x2648 = x528[x2647];
int32_t x2649 = x2645;
double x2650 = x2398[x2649];
int32_t x2651 = x2643;
double x2652 = x112[x2651];
double x2653 = x2650 * x2652;
double x2654 = x2648 + x2653;
x528[x2647] = x2654;
x2645 += 1;
x2643 += 150;

}
x2631 += 1;
x2640 += 1;

}
x2634 += 150;
x2637 *= 0;

}
}
};
x560(x2722);
for(int x2726=0; x2726 < 150; x2726++) {
double x2727 = x2702[x2726];
double x2728 = x2707[x2726];
double x2731 = x2717[x2726];
double x2729 = 1.0 - x2728;
double x2730 = x2729 * x2728;
double x2732 = x2730 * x2731;
double x2733 = x2727 + x2732;
x2702[x2726] = x2733;

}
// backpropagate +
for(int x2738=0; x2738 < 150; x2738++) {
double x2739 = x2689[x2738];
double x2740 = x2702[x2738];
double x2741 = x2739 + x2740;
x2689[x2738] = x2741;

}
for(int x2745=0; x2745 < 150; x2745++) {
double x2746 = x211[x2745];
double x2747 = x2702[x2745];
double x2748 = x2746 + x2747;
x211[x2745] = x2748;

}
int32_t x2752 = 0;
int32_t x2753 = x2752;
int32_t x2754 = x2753;
int32_t x2755 = 0;
int32_t x2756 = x2755;
int32_t x2757 = x2756;
int32_t x2758 = 0;
int32_t x2759 = x2758;
int32_t x2760 = x2759;
for(int x2761=0; x2761 < 150; x2761++) {
int32_t x2762 = x2760;
int32_t x2763 = x2762;
for(int x2764=0; x2764 < 300; x2764++) {
int32_t x2765 = x2763;
int32_t x2766 = x2765;
int32_t x2767 = x2757;
int32_t x2768 = x2767;
for(int x2769=0; x2769 < 1; x2769++) {
int32_t x2770 = x2754;
double x2771 = x206[x2770];
int32_t x2772 = x2768;
double x2773 = x2689[x2772];
int32_t x2774 = x2766;
double x2775 = x556[x2774];
double x2776 = x2773 * x2775;
double x2777 = x2771 + x2776;
x206[x2770] = x2777;
x2768 += 1;
x2766 += 300;

}
x2754 += 1;
x2763 += 1;

}
x2757 += 1;
x2760 *= 0;

}
int32_t x2791 = 0;
int32_t x2792 = x2791;
int32_t x2793 = x2792;
int32_t x2794 = 0;
int32_t x2795 = x2794;
int32_t x2796 = x2795;
int32_t x2797 = 0;
int32_t x2798 = x2797;
int32_t x2799 = x2798;
for(int x2800=0; x2800 < 1; x2800++) {
int32_t x2801 = x2799;
int32_t x2802 = x2801;
for(int x2803=0; x2803 < 300; x2803++) {
int32_t x2804 = x2802;
int32_t x2805 = x2804;
int32_t x2806 = x2796;
int32_t x2807 = x2806;
for(int x2808=0; x2808 < 150; x2808++) {
int32_t x2809 = x2793;
double x2810 = x557[x2809];
int32_t x2811 = x2807;
double x2812 = x2689[x2811];
int32_t x2813 = x2805;
double x2814 = x49[x2813];
double x2815 = x2812 * x2814;
double x2816 = x2810 + x2815;
x557[x2809] = x2816;
x2807 += 1;
x2805 += 300;

}
x2793 += 1;
x2802 += 1;

}
x2796 += 150;
x2799 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2832 = 0;
double* x2833 = (double*)myMalloc(150 * sizeof(double));
for(int x2834=0; x2834 < 150; x2834++) {
double x2835 = 0.0;
for(int x2836=0; x2836 < 150; x2836++) {
int32_t x2837 = x2832;
double x2838 = x90[x2837];
double x2839 = x527[x2836];
double x2840 = x2838 * x2839;
x2835 += x2840;
x2832 += 1;

}
double x2845 = x2835;
x2833[x2834] = x2845;

}
double* x2849 = (double*)myMalloc(150 * sizeof(double));
for(int x2850=0; x2850 < 150; x2850++) {
x2849[x2850] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2855 = 0;
double* x2856 = (double*)myMalloc(150 * sizeof(double));
for(int x2857=0; x2857 < 150; x2857++) {
double x2858 = 0.0;
for(int x2859=0; x2859 < 150; x2859++) {
int32_t x2860 = x2855;
double x2861 = x99[x2860];
double x2862 = x536[x2859];
double x2863 = x2861 * x2862;
x2858 += x2863;
x2855 += 1;

}
double x2868 = x2858;
x2856[x2857] = x2868;

}
double* x2872 = (double*)myMalloc(150 * sizeof(double));
for(int x2873=0; x2873 < 150; x2873++) {
x2872[x2873] = 0.0;

}
double* x2877 = (double*)myMalloc(150 * sizeof(double));
for(int x2878=0; x2878 < 150; x2878++) {
double x2879 = x2833[x2878];
double x2880 = x2856[x2878];
double x2881 = x2879 + x2880;
x2877[x2878] = x2881;

}
double* x2885 = (double*)myMalloc(150 * sizeof(double));
for(int x2886=0; x2886 < 150; x2886++) {
x2885[x2886] = 0.0;

}
double* x2890 = (double*)myMalloc(150 * sizeof(double));
for(int x2891=0; x2891 < 150; x2891++) {
double x2892 = x2877[x2891];
double x2893 = x107[x2891];
double x2894 = x2892 + x2893;
x2890[x2891] = x2894;

}
double* x2898 = (double*)myMalloc(150 * sizeof(double));
for(int x2899=0; x2899 < 150; x2899++) {
x2898[x2899] = 0.0;

}
double* x2903 = (double*)myMalloc(150 * sizeof(double));
for(int x2904=0; x2904 < 150; x2904++) {
double x2905 = x2890[x2904];
double x2906 = -1.0 * x2905;
double x2907 = exp(x2906);
double x2908 = x2907 + 1.0;
double x2909 = 1.0 / x2908;
x2903[x2904] = x2909;

}
double* x2913 = (double*)myMalloc(150 * sizeof(double));
for(int x2914=0; x2914 < 150; x2914++) {
x2913[x2914] = 0.0;

}
double** x2918 = (double**)myMalloc(2 * sizeof(double*));
x2918[0] = x2903;
x2918[1] = x2913;
function<void(double**)> x560 = [&](double** x561) {
double* x562 = x561[0];
double* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
double** x2375 = (double**)myMalloc(2 * sizeof(double*));
x2375[0] = x326;
x2375[1] = x331;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x2079 = (double**)myMalloc(2 * sizeof(double*));
x2079[0] = x326;
x2079[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2079);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2085 = 0;
double* x2086 = (double*)myMalloc(150 * sizeof(double));
for(int x2087=0; x2087 < 150; x2087++) {
double x2088 = 0.0;
for(int x2089=0; x2089 < 150; x2089++) {
int32_t x2090 = x2085;
double x2091 = x128[x2090];
double x2092 = x527[x2089];
double x2093 = x2091 * x2092;
x2088 += x2093;
x2085 += 1;

}
double x2098 = x2088;
x2086[x2087] = x2098;

}
double* x2102 = (double*)myMalloc(150 * sizeof(double));
for(int x2103=0; x2103 < 150; x2103++) {
x2102[x2103] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2108 = 0;
double* x2109 = (double*)myMalloc(150 * sizeof(double));
for(int x2110=0; x2110 < 150; x2110++) {
double x2111 = 0.0;
for(int x2112=0; x2112 < 150; x2112++) {
int32_t x2113 = x2108;
double x2114 = x136[x2113];
double x2115 = x536[x2112];
double x2116 = x2114 * x2115;
x2111 += x2116;
x2108 += 1;

}
double x2121 = x2111;
x2109[x2110] = x2121;

}
double* x2125 = (double*)myMalloc(150 * sizeof(double));
for(int x2126=0; x2126 < 150; x2126++) {
x2125[x2126] = 0.0;

}
double* x2130 = (double*)myMalloc(150 * sizeof(double));
for(int x2131=0; x2131 < 150; x2131++) {
double x2132 = x2086[x2131];
double x2133 = x2109[x2131];
double x2134 = x2132 + x2133;
x2130[x2131] = x2134;

}
double* x2138 = (double*)myMalloc(150 * sizeof(double));
for(int x2139=0; x2139 < 150; x2139++) {
x2138[x2139] = 0.0;

}
double* x2143 = (double*)myMalloc(150 * sizeof(double));
for(int x2144=0; x2144 < 150; x2144++) {
double x2145 = x2130[x2144];
double x2146 = x144[x2144];
double x2147 = x2145 + x2146;
x2143[x2144] = x2147;

}
double* x2151 = (double*)myMalloc(150 * sizeof(double));
for(int x2152=0; x2152 < 150; x2152++) {
x2151[x2152] = 0.0;

}
double* x2156 = (double*)myMalloc(150 * sizeof(double));
for(int x2157=0; x2157 < 150; x2157++) {
double x2158 = x2143[x2157];
double x2159 = -1.0 * x2158;
double x2160 = exp(x2159);
double x2161 = x2160 + 1.0;
double x2162 = 1.0 / x2161;
x2156[x2157] = x2162;

}
double* x2166 = (double*)myMalloc(150 * sizeof(double));
for(int x2167=0; x2167 < 150; x2167++) {
x2166[x2167] = 0.0;

}
double** x2171 = (double**)myMalloc(2 * sizeof(double*));
x2171[0] = x2156;
x2171[1] = x2166;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2171);
for(int x2175=0; x2175 < 150; x2175++) {
double x2176 = x2151[x2175];
double x2177 = x2156[x2175];
double x2180 = x2166[x2175];
double x2178 = 1.0 - x2177;
double x2179 = x2178 * x2177;
double x2181 = x2179 * x2180;
double x2182 = x2176 + x2181;
x2151[x2175] = x2182;

}
// backpropagate +
for(int x2187=0; x2187 < 150; x2187++) {
double x2188 = x2138[x2187];
double x2189 = x2151[x2187];
double x2190 = x2188 + x2189;
x2138[x2187] = x2190;

}
for(int x2194=0; x2194 < 150; x2194++) {
double x2195 = x271[x2194];
double x2196 = x2151[x2194];
double x2197 = x2195 + x2196;
x271[x2194] = x2197;

}
// backpropagate +
for(int x2202=0; x2202 < 150; x2202++) {
double x2203 = x2102[x2202];
double x2204 = x2138[x2202];
double x2205 = x2203 + x2204;
x2102[x2202] = x2205;

}
for(int x2209=0; x2209 < 150; x2209++) {
double x2210 = x2125[x2209];
double x2211 = x2138[x2209];
double x2212 = x2210 + x2211;
x2125[x2209] = x2212;

}
int32_t x2216 = 0;
int32_t x2217 = x2216;
int32_t x2218 = x2217;
int32_t x2219 = 0;
int32_t x2220 = x2219;
int32_t x2221 = x2220;
int32_t x2222 = 0;
int32_t x2223 = x2222;
int32_t x2224 = x2223;
for(int x2225=0; x2225 < 150; x2225++) {
int32_t x2226 = x2224;
int32_t x2227 = x2226;
for(int x2228=0; x2228 < 150; x2228++) {
int32_t x2229 = x2227;
int32_t x2230 = x2229;
int32_t x2231 = x2221;
int32_t x2232 = x2231;
for(int x2233=0; x2233 < 1; x2233++) {
int32_t x2234 = x2218;
double x2235 = x266[x2234];
int32_t x2236 = x2232;
double x2237 = x2125[x2236];
int32_t x2238 = x2230;
double x2239 = x536[x2238];
double x2240 = x2237 * x2239;
double x2241 = x2235 + x2240;
x266[x2234] = x2241;
x2232 += 1;
x2230 += 150;

}
x2218 += 1;
x2227 += 1;

}
x2221 += 1;
x2224 *= 0;

}
int32_t x2255 = 0;
int32_t x2256 = x2255;
int32_t x2257 = x2256;
int32_t x2258 = 0;
int32_t x2259 = x2258;
int32_t x2260 = x2259;
int32_t x2261 = 0;
int32_t x2262 = x2261;
int32_t x2263 = x2262;
for(int x2264=0; x2264 < 1; x2264++) {
int32_t x2265 = x2263;
int32_t x2266 = x2265;
for(int x2267=0; x2267 < 150; x2267++) {
int32_t x2268 = x2266;
int32_t x2269 = x2268;
int32_t x2270 = x2260;
int32_t x2271 = x2270;
for(int x2272=0; x2272 < 150; x2272++) {
int32_t x2273 = x2257;
double x2274 = x537[x2273];
int32_t x2275 = x2271;
double x2276 = x2125[x2275];
int32_t x2277 = x2269;
double x2278 = x136[x2277];
double x2279 = x2276 * x2278;
double x2280 = x2274 + x2279;
x537[x2273] = x2280;
x2271 += 1;
x2269 += 150;

}
x2257 += 1;
x2266 += 1;

}
x2260 += 150;
x2263 *= 0;

}
int32_t x2294 = 0;
int32_t x2295 = x2294;
int32_t x2296 = x2295;
int32_t x2297 = 0;
int32_t x2298 = x2297;
int32_t x2299 = x2298;
int32_t x2300 = 0;
int32_t x2301 = x2300;
int32_t x2302 = x2301;
for(int x2303=0; x2303 < 150; x2303++) {
int32_t x2304 = x2302;
int32_t x2305 = x2304;
for(int x2306=0; x2306 < 150; x2306++) {
int32_t x2307 = x2305;
int32_t x2308 = x2307;
int32_t x2309 = x2299;
int32_t x2310 = x2309;
for(int x2311=0; x2311 < 1; x2311++) {
int32_t x2312 = x2296;
double x2313 = x261[x2312];
int32_t x2314 = x2310;
double x2315 = x2102[x2314];
int32_t x2316 = x2308;
double x2317 = x527[x2316];
double x2318 = x2315 * x2317;
double x2319 = x2313 + x2318;
x261[x2312] = x2319;
x2310 += 1;
x2308 += 150;

}
x2296 += 1;
x2305 += 1;

}
x2299 += 1;
x2302 *= 0;

}
int32_t x2333 = 0;
int32_t x2334 = x2333;
int32_t x2335 = x2334;
int32_t x2336 = 0;
int32_t x2337 = x2336;
int32_t x2338 = x2337;
int32_t x2339 = 0;
int32_t x2340 = x2339;
int32_t x2341 = x2340;
for(int x2342=0; x2342 < 1; x2342++) {
int32_t x2343 = x2341;
int32_t x2344 = x2343;
for(int x2345=0; x2345 < 150; x2345++) {
int32_t x2346 = x2344;
int32_t x2347 = x2346;
int32_t x2348 = x2338;
int32_t x2349 = x2348;
for(int x2350=0; x2350 < 150; x2350++) {
int32_t x2351 = x2335;
double x2352 = x528[x2351];
int32_t x2353 = x2349;
double x2354 = x2102[x2353];
int32_t x2355 = x2347;
double x2356 = x128[x2355];
double x2357 = x2354 * x2356;
double x2358 = x2352 + x2357;
x528[x2351] = x2358;
x2349 += 1;
x2347 += 150;

}
x2335 += 1;
x2344 += 1;

}
x2338 += 150;
x2341 *= 0;

}
}
};
x566(x2375);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2381 = 0;
double* x2382 = (double*)myMalloc(150 * sizeof(double));
for(int x2383=0; x2383 < 150; x2383++) {
double x2384 = 0.0;
for(int x2385=0; x2385 < 150; x2385++) {
int32_t x2386 = x2381;
double x2387 = x112[x2386];
double x2388 = x527[x2385];
double x2389 = x2387 * x2388;
x2384 += x2389;
x2381 += 1;

}
double x2394 = x2384;
x2382[x2383] = x2394;

}
double* x2398 = (double*)myMalloc(150 * sizeof(double));
for(int x2399=0; x2399 < 150; x2399++) {
x2398[x2399] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2404 = 0;
double* x2405 = (double*)myMalloc(150 * sizeof(double));
for(int x2406=0; x2406 < 150; x2406++) {
double x2407 = 0.0;
for(int x2408=0; x2408 < 150; x2408++) {
int32_t x2409 = x2404;
double x2410 = x120[x2409];
double x2411 = x536[x2408];
double x2412 = x2410 * x2411;
x2407 += x2412;
x2404 += 1;

}
double x2417 = x2407;
x2405[x2406] = x2417;

}
double* x2421 = (double*)myMalloc(150 * sizeof(double));
for(int x2422=0; x2422 < 150; x2422++) {
x2421[x2422] = 0.0;

}
double* x2426 = (double*)myMalloc(150 * sizeof(double));
for(int x2427=0; x2427 < 150; x2427++) {
double x2428 = x2382[x2427];
double x2429 = x2405[x2427];
double x2430 = x2428 + x2429;
x2426[x2427] = x2430;

}
double* x2434 = (double*)myMalloc(150 * sizeof(double));
for(int x2435=0; x2435 < 150; x2435++) {
x2434[x2435] = 0.0;

}
double* x2439 = (double*)myMalloc(150 * sizeof(double));
for(int x2440=0; x2440 < 150; x2440++) {
double x2441 = x2426[x2440];
double x2442 = x144[x2440];
double x2443 = x2441 + x2442;
x2439[x2440] = x2443;

}
double* x2447 = (double*)myMalloc(150 * sizeof(double));
for(int x2448=0; x2448 < 150; x2448++) {
x2447[x2448] = 0.0;

}
double* x2452 = (double*)myMalloc(150 * sizeof(double));
for(int x2453=0; x2453 < 150; x2453++) {
double x2454 = x2439[x2453];
double x2455 = -1.0 * x2454;
double x2456 = exp(x2455);
double x2457 = x2456 + 1.0;
double x2458 = 1.0 / x2457;
x2452[x2453] = x2458;

}
double* x2462 = (double*)myMalloc(150 * sizeof(double));
for(int x2463=0; x2463 < 150; x2463++) {
x2462[x2463] = 0.0;

}
double** x2467 = (double**)myMalloc(2 * sizeof(double*));
x2467[0] = x2452;
x2467[1] = x2462;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x2079 = (double**)myMalloc(2 * sizeof(double*));
x2079[0] = x326;
x2079[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2079);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2085 = 0;
double* x2086 = (double*)myMalloc(150 * sizeof(double));
for(int x2087=0; x2087 < 150; x2087++) {
double x2088 = 0.0;
for(int x2089=0; x2089 < 150; x2089++) {
int32_t x2090 = x2085;
double x2091 = x128[x2090];
double x2092 = x527[x2089];
double x2093 = x2091 * x2092;
x2088 += x2093;
x2085 += 1;

}
double x2098 = x2088;
x2086[x2087] = x2098;

}
double* x2102 = (double*)myMalloc(150 * sizeof(double));
for(int x2103=0; x2103 < 150; x2103++) {
x2102[x2103] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2108 = 0;
double* x2109 = (double*)myMalloc(150 * sizeof(double));
for(int x2110=0; x2110 < 150; x2110++) {
double x2111 = 0.0;
for(int x2112=0; x2112 < 150; x2112++) {
int32_t x2113 = x2108;
double x2114 = x136[x2113];
double x2115 = x536[x2112];
double x2116 = x2114 * x2115;
x2111 += x2116;
x2108 += 1;

}
double x2121 = x2111;
x2109[x2110] = x2121;

}
double* x2125 = (double*)myMalloc(150 * sizeof(double));
for(int x2126=0; x2126 < 150; x2126++) {
x2125[x2126] = 0.0;

}
double* x2130 = (double*)myMalloc(150 * sizeof(double));
for(int x2131=0; x2131 < 150; x2131++) {
double x2132 = x2086[x2131];
double x2133 = x2109[x2131];
double x2134 = x2132 + x2133;
x2130[x2131] = x2134;

}
double* x2138 = (double*)myMalloc(150 * sizeof(double));
for(int x2139=0; x2139 < 150; x2139++) {
x2138[x2139] = 0.0;

}
double* x2143 = (double*)myMalloc(150 * sizeof(double));
for(int x2144=0; x2144 < 150; x2144++) {
double x2145 = x2130[x2144];
double x2146 = x144[x2144];
double x2147 = x2145 + x2146;
x2143[x2144] = x2147;

}
double* x2151 = (double*)myMalloc(150 * sizeof(double));
for(int x2152=0; x2152 < 150; x2152++) {
x2151[x2152] = 0.0;

}
double* x2156 = (double*)myMalloc(150 * sizeof(double));
for(int x2157=0; x2157 < 150; x2157++) {
double x2158 = x2143[x2157];
double x2159 = -1.0 * x2158;
double x2160 = exp(x2159);
double x2161 = x2160 + 1.0;
double x2162 = 1.0 / x2161;
x2156[x2157] = x2162;

}
double* x2166 = (double*)myMalloc(150 * sizeof(double));
for(int x2167=0; x2167 < 150; x2167++) {
x2166[x2167] = 0.0;

}
double** x2171 = (double**)myMalloc(2 * sizeof(double*));
x2171[0] = x2156;
x2171[1] = x2166;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2171);
for(int x2175=0; x2175 < 150; x2175++) {
double x2176 = x2151[x2175];
double x2177 = x2156[x2175];
double x2180 = x2166[x2175];
double x2178 = 1.0 - x2177;
double x2179 = x2178 * x2177;
double x2181 = x2179 * x2180;
double x2182 = x2176 + x2181;
x2151[x2175] = x2182;

}
// backpropagate +
for(int x2187=0; x2187 < 150; x2187++) {
double x2188 = x2138[x2187];
double x2189 = x2151[x2187];
double x2190 = x2188 + x2189;
x2138[x2187] = x2190;

}
for(int x2194=0; x2194 < 150; x2194++) {
double x2195 = x271[x2194];
double x2196 = x2151[x2194];
double x2197 = x2195 + x2196;
x271[x2194] = x2197;

}
// backpropagate +
for(int x2202=0; x2202 < 150; x2202++) {
double x2203 = x2102[x2202];
double x2204 = x2138[x2202];
double x2205 = x2203 + x2204;
x2102[x2202] = x2205;

}
for(int x2209=0; x2209 < 150; x2209++) {
double x2210 = x2125[x2209];
double x2211 = x2138[x2209];
double x2212 = x2210 + x2211;
x2125[x2209] = x2212;

}
int32_t x2216 = 0;
int32_t x2217 = x2216;
int32_t x2218 = x2217;
int32_t x2219 = 0;
int32_t x2220 = x2219;
int32_t x2221 = x2220;
int32_t x2222 = 0;
int32_t x2223 = x2222;
int32_t x2224 = x2223;
for(int x2225=0; x2225 < 150; x2225++) {
int32_t x2226 = x2224;
int32_t x2227 = x2226;
for(int x2228=0; x2228 < 150; x2228++) {
int32_t x2229 = x2227;
int32_t x2230 = x2229;
int32_t x2231 = x2221;
int32_t x2232 = x2231;
for(int x2233=0; x2233 < 1; x2233++) {
int32_t x2234 = x2218;
double x2235 = x266[x2234];
int32_t x2236 = x2232;
double x2237 = x2125[x2236];
int32_t x2238 = x2230;
double x2239 = x536[x2238];
double x2240 = x2237 * x2239;
double x2241 = x2235 + x2240;
x266[x2234] = x2241;
x2232 += 1;
x2230 += 150;

}
x2218 += 1;
x2227 += 1;

}
x2221 += 1;
x2224 *= 0;

}
int32_t x2255 = 0;
int32_t x2256 = x2255;
int32_t x2257 = x2256;
int32_t x2258 = 0;
int32_t x2259 = x2258;
int32_t x2260 = x2259;
int32_t x2261 = 0;
int32_t x2262 = x2261;
int32_t x2263 = x2262;
for(int x2264=0; x2264 < 1; x2264++) {
int32_t x2265 = x2263;
int32_t x2266 = x2265;
for(int x2267=0; x2267 < 150; x2267++) {
int32_t x2268 = x2266;
int32_t x2269 = x2268;
int32_t x2270 = x2260;
int32_t x2271 = x2270;
for(int x2272=0; x2272 < 150; x2272++) {
int32_t x2273 = x2257;
double x2274 = x537[x2273];
int32_t x2275 = x2271;
double x2276 = x2125[x2275];
int32_t x2277 = x2269;
double x2278 = x136[x2277];
double x2279 = x2276 * x2278;
double x2280 = x2274 + x2279;
x537[x2273] = x2280;
x2271 += 1;
x2269 += 150;

}
x2257 += 1;
x2266 += 1;

}
x2260 += 150;
x2263 *= 0;

}
int32_t x2294 = 0;
int32_t x2295 = x2294;
int32_t x2296 = x2295;
int32_t x2297 = 0;
int32_t x2298 = x2297;
int32_t x2299 = x2298;
int32_t x2300 = 0;
int32_t x2301 = x2300;
int32_t x2302 = x2301;
for(int x2303=0; x2303 < 150; x2303++) {
int32_t x2304 = x2302;
int32_t x2305 = x2304;
for(int x2306=0; x2306 < 150; x2306++) {
int32_t x2307 = x2305;
int32_t x2308 = x2307;
int32_t x2309 = x2299;
int32_t x2310 = x2309;
for(int x2311=0; x2311 < 1; x2311++) {
int32_t x2312 = x2296;
double x2313 = x261[x2312];
int32_t x2314 = x2310;
double x2315 = x2102[x2314];
int32_t x2316 = x2308;
double x2317 = x527[x2316];
double x2318 = x2315 * x2317;
double x2319 = x2313 + x2318;
x261[x2312] = x2319;
x2310 += 1;
x2308 += 150;

}
x2296 += 1;
x2305 += 1;

}
x2299 += 1;
x2302 *= 0;

}
int32_t x2333 = 0;
int32_t x2334 = x2333;
int32_t x2335 = x2334;
int32_t x2336 = 0;
int32_t x2337 = x2336;
int32_t x2338 = x2337;
int32_t x2339 = 0;
int32_t x2340 = x2339;
int32_t x2341 = x2340;
for(int x2342=0; x2342 < 1; x2342++) {
int32_t x2343 = x2341;
int32_t x2344 = x2343;
for(int x2345=0; x2345 < 150; x2345++) {
int32_t x2346 = x2344;
int32_t x2347 = x2346;
int32_t x2348 = x2338;
int32_t x2349 = x2348;
for(int x2350=0; x2350 < 150; x2350++) {
int32_t x2351 = x2335;
double x2352 = x528[x2351];
int32_t x2353 = x2349;
double x2354 = x2102[x2353];
int32_t x2355 = x2347;
double x2356 = x128[x2355];
double x2357 = x2354 * x2356;
double x2358 = x2352 + x2357;
x528[x2351] = x2358;
x2349 += 1;
x2347 += 150;

}
x2335 += 1;
x2344 += 1;

}
x2338 += 150;
x2341 *= 0;

}
}
};
x566(x2467);
for(int x2471=0; x2471 < 150; x2471++) {
double x2472 = x2447[x2471];
double x2473 = x2452[x2471];
double x2476 = x2462[x2471];
double x2474 = 1.0 - x2473;
double x2475 = x2474 * x2473;
double x2477 = x2475 * x2476;
double x2478 = x2472 + x2477;
x2447[x2471] = x2478;

}
// backpropagate +
for(int x2483=0; x2483 < 150; x2483++) {
double x2484 = x2434[x2483];
double x2485 = x2447[x2483];
double x2486 = x2484 + x2485;
x2434[x2483] = x2486;

}
for(int x2490=0; x2490 < 150; x2490++) {
double x2491 = x271[x2490];
double x2492 = x2447[x2490];
double x2493 = x2491 + x2492;
x271[x2490] = x2493;

}
// backpropagate +
for(int x2498=0; x2498 < 150; x2498++) {
double x2499 = x2398[x2498];
double x2500 = x2434[x2498];
double x2501 = x2499 + x2500;
x2398[x2498] = x2501;

}
for(int x2505=0; x2505 < 150; x2505++) {
double x2506 = x2421[x2505];
double x2507 = x2434[x2505];
double x2508 = x2506 + x2507;
x2421[x2505] = x2508;

}
int32_t x2512 = 0;
int32_t x2513 = x2512;
int32_t x2514 = x2513;
int32_t x2515 = 0;
int32_t x2516 = x2515;
int32_t x2517 = x2516;
int32_t x2518 = 0;
int32_t x2519 = x2518;
int32_t x2520 = x2519;
for(int x2521=0; x2521 < 150; x2521++) {
int32_t x2522 = x2520;
int32_t x2523 = x2522;
for(int x2524=0; x2524 < 150; x2524++) {
int32_t x2525 = x2523;
int32_t x2526 = x2525;
int32_t x2527 = x2517;
int32_t x2528 = x2527;
for(int x2529=0; x2529 < 1; x2529++) {
int32_t x2530 = x2514;
double x2531 = x256[x2530];
int32_t x2532 = x2528;
double x2533 = x2421[x2532];
int32_t x2534 = x2526;
double x2535 = x536[x2534];
double x2536 = x2533 * x2535;
double x2537 = x2531 + x2536;
x256[x2530] = x2537;
x2528 += 1;
x2526 += 150;

}
x2514 += 1;
x2523 += 1;

}
x2517 += 1;
x2520 *= 0;

}
int32_t x2551 = 0;
int32_t x2552 = x2551;
int32_t x2553 = x2552;
int32_t x2554 = 0;
int32_t x2555 = x2554;
int32_t x2556 = x2555;
int32_t x2557 = 0;
int32_t x2558 = x2557;
int32_t x2559 = x2558;
for(int x2560=0; x2560 < 1; x2560++) {
int32_t x2561 = x2559;
int32_t x2562 = x2561;
for(int x2563=0; x2563 < 150; x2563++) {
int32_t x2564 = x2562;
int32_t x2565 = x2564;
int32_t x2566 = x2556;
int32_t x2567 = x2566;
for(int x2568=0; x2568 < 150; x2568++) {
int32_t x2569 = x2553;
double x2570 = x537[x2569];
int32_t x2571 = x2567;
double x2572 = x2421[x2571];
int32_t x2573 = x2565;
double x2574 = x120[x2573];
double x2575 = x2572 * x2574;
double x2576 = x2570 + x2575;
x537[x2569] = x2576;
x2567 += 1;
x2565 += 150;

}
x2553 += 1;
x2562 += 1;

}
x2556 += 150;
x2559 *= 0;

}
int32_t x2590 = 0;
int32_t x2591 = x2590;
int32_t x2592 = x2591;
int32_t x2593 = 0;
int32_t x2594 = x2593;
int32_t x2595 = x2594;
int32_t x2596 = 0;
int32_t x2597 = x2596;
int32_t x2598 = x2597;
for(int x2599=0; x2599 < 150; x2599++) {
int32_t x2600 = x2598;
int32_t x2601 = x2600;
for(int x2602=0; x2602 < 150; x2602++) {
int32_t x2603 = x2601;
int32_t x2604 = x2603;
int32_t x2605 = x2595;
int32_t x2606 = x2605;
for(int x2607=0; x2607 < 1; x2607++) {
int32_t x2608 = x2592;
double x2609 = x251[x2608];
int32_t x2610 = x2606;
double x2611 = x2398[x2610];
int32_t x2612 = x2604;
double x2613 = x527[x2612];
double x2614 = x2611 * x2613;
double x2615 = x2609 + x2614;
x251[x2608] = x2615;
x2606 += 1;
x2604 += 150;

}
x2592 += 1;
x2601 += 1;

}
x2595 += 1;
x2598 *= 0;

}
int32_t x2629 = 0;
int32_t x2630 = x2629;
int32_t x2631 = x2630;
int32_t x2632 = 0;
int32_t x2633 = x2632;
int32_t x2634 = x2633;
int32_t x2635 = 0;
int32_t x2636 = x2635;
int32_t x2637 = x2636;
for(int x2638=0; x2638 < 1; x2638++) {
int32_t x2639 = x2637;
int32_t x2640 = x2639;
for(int x2641=0; x2641 < 150; x2641++) {
int32_t x2642 = x2640;
int32_t x2643 = x2642;
int32_t x2644 = x2634;
int32_t x2645 = x2644;
for(int x2646=0; x2646 < 150; x2646++) {
int32_t x2647 = x2631;
double x2648 = x528[x2647];
int32_t x2649 = x2645;
double x2650 = x2398[x2649];
int32_t x2651 = x2643;
double x2652 = x112[x2651];
double x2653 = x2650 * x2652;
double x2654 = x2648 + x2653;
x528[x2647] = x2654;
x2645 += 1;
x2643 += 150;

}
x2631 += 1;
x2640 += 1;

}
x2634 += 150;
x2637 *= 0;

}
}
};
x560(x2918);
for(int x2922=0; x2922 < 150; x2922++) {
double x2923 = x2898[x2922];
double x2924 = x2903[x2922];
double x2927 = x2913[x2922];
double x2925 = 1.0 - x2924;
double x2926 = x2925 * x2924;
double x2928 = x2926 * x2927;
double x2929 = x2923 + x2928;
x2898[x2922] = x2929;

}
// backpropagate +
for(int x2934=0; x2934 < 150; x2934++) {
double x2935 = x2885[x2934];
double x2936 = x2898[x2934];
double x2937 = x2935 + x2936;
x2885[x2934] = x2937;

}
for(int x2941=0; x2941 < 150; x2941++) {
double x2942 = x246[x2941];
double x2943 = x2898[x2941];
double x2944 = x2942 + x2943;
x246[x2941] = x2944;

}
// backpropagate +
for(int x2949=0; x2949 < 150; x2949++) {
double x2950 = x2849[x2949];
double x2951 = x2885[x2949];
double x2952 = x2950 + x2951;
x2849[x2949] = x2952;

}
for(int x2956=0; x2956 < 150; x2956++) {
double x2957 = x2872[x2956];
double x2958 = x2885[x2956];
double x2959 = x2957 + x2958;
x2872[x2956] = x2959;

}
int32_t x2963 = 0;
int32_t x2964 = x2963;
int32_t x2965 = x2964;
int32_t x2966 = 0;
int32_t x2967 = x2966;
int32_t x2968 = x2967;
int32_t x2969 = 0;
int32_t x2970 = x2969;
int32_t x2971 = x2970;
for(int x2972=0; x2972 < 150; x2972++) {
int32_t x2973 = x2971;
int32_t x2974 = x2973;
for(int x2975=0; x2975 < 150; x2975++) {
int32_t x2976 = x2974;
int32_t x2977 = x2976;
int32_t x2978 = x2968;
int32_t x2979 = x2978;
for(int x2980=0; x2980 < 1; x2980++) {
int32_t x2981 = x2965;
double x2982 = x241[x2981];
int32_t x2983 = x2979;
double x2984 = x2872[x2983];
int32_t x2985 = x2977;
double x2986 = x536[x2985];
double x2987 = x2984 * x2986;
double x2988 = x2982 + x2987;
x241[x2981] = x2988;
x2979 += 1;
x2977 += 150;

}
x2965 += 1;
x2974 += 1;

}
x2968 += 1;
x2971 *= 0;

}
int32_t x3002 = 0;
int32_t x3003 = x3002;
int32_t x3004 = x3003;
int32_t x3005 = 0;
int32_t x3006 = x3005;
int32_t x3007 = x3006;
int32_t x3008 = 0;
int32_t x3009 = x3008;
int32_t x3010 = x3009;
for(int x3011=0; x3011 < 1; x3011++) {
int32_t x3012 = x3010;
int32_t x3013 = x3012;
for(int x3014=0; x3014 < 150; x3014++) {
int32_t x3015 = x3013;
int32_t x3016 = x3015;
int32_t x3017 = x3007;
int32_t x3018 = x3017;
for(int x3019=0; x3019 < 150; x3019++) {
int32_t x3020 = x3004;
double x3021 = x537[x3020];
int32_t x3022 = x3018;
double x3023 = x2872[x3022];
int32_t x3024 = x3016;
double x3025 = x99[x3024];
double x3026 = x3023 * x3025;
double x3027 = x3021 + x3026;
x537[x3020] = x3027;
x3018 += 1;
x3016 += 150;

}
x3004 += 1;
x3013 += 1;

}
x3007 += 150;
x3010 *= 0;

}
int32_t x3041 = 0;
int32_t x3042 = x3041;
int32_t x3043 = x3042;
int32_t x3044 = 0;
int32_t x3045 = x3044;
int32_t x3046 = x3045;
int32_t x3047 = 0;
int32_t x3048 = x3047;
int32_t x3049 = x3048;
for(int x3050=0; x3050 < 150; x3050++) {
int32_t x3051 = x3049;
int32_t x3052 = x3051;
for(int x3053=0; x3053 < 150; x3053++) {
int32_t x3054 = x3052;
int32_t x3055 = x3054;
int32_t x3056 = x3046;
int32_t x3057 = x3056;
for(int x3058=0; x3058 < 1; x3058++) {
int32_t x3059 = x3043;
double x3060 = x236[x3059];
int32_t x3061 = x3057;
double x3062 = x2849[x3061];
int32_t x3063 = x3055;
double x3064 = x527[x3063];
double x3065 = x3062 * x3064;
double x3066 = x3060 + x3065;
x236[x3059] = x3066;
x3057 += 1;
x3055 += 150;

}
x3043 += 1;
x3052 += 1;

}
x3046 += 1;
x3049 *= 0;

}
int32_t x3080 = 0;
int32_t x3081 = x3080;
int32_t x3082 = x3081;
int32_t x3083 = 0;
int32_t x3084 = x3083;
int32_t x3085 = x3084;
int32_t x3086 = 0;
int32_t x3087 = x3086;
int32_t x3088 = x3087;
for(int x3089=0; x3089 < 1; x3089++) {
int32_t x3090 = x3088;
int32_t x3091 = x3090;
for(int x3092=0; x3092 < 150; x3092++) {
int32_t x3093 = x3091;
int32_t x3094 = x3093;
int32_t x3095 = x3085;
int32_t x3096 = x3095;
for(int x3097=0; x3097 < 150; x3097++) {
int32_t x3098 = x3082;
double x3099 = x528[x3098];
int32_t x3100 = x3096;
double x3101 = x2849[x3100];
int32_t x3102 = x3094;
double x3103 = x90[x3102];
double x3104 = x3101 * x3103;
double x3105 = x3099 + x3104;
x528[x3098] = x3105;
x3096 += 1;
x3094 += 150;

}
x3082 += 1;
x3091 += 1;

}
x3085 += 150;
x3088 *= 0;

}
}
};
x554(x3129);
} else {
double** x3134 = (double**)myMalloc(2 * sizeof(double*));
x3134[0] = x316;
x3134[1] = x321;
function<void(double**)> x554 = [&](double** x555) {
double* x556 = x555[0];
double* x557 = x555[1];
int32_t x558 = x459[x512];
bool x559 = x558 < 0;
if (x559) {
// dot List(150, 300) - WrappedArray(300)
int32_t x2672 = 0;
double* x2673 = (double*)myMalloc(150 * sizeof(double));
for(int x2674=0; x2674 < 150; x2674++) {
double x2675 = 0.0;
for(int x2676=0; x2676 < 300; x2676++) {
int32_t x2677 = x2672;
double x2678 = x49[x2677];
double x2679 = x556[x2676];
double x2680 = x2678 * x2679;
x2675 += x2680;
x2672 += 1;

}
double x2685 = x2675;
x2673[x2674] = x2685;

}
double* x2689 = (double*)myMalloc(150 * sizeof(double));
for(int x2690=0; x2690 < 150; x2690++) {
x2689[x2690] = 0.0;

}
double* x2694 = (double*)myMalloc(150 * sizeof(double));
for(int x2695=0; x2695 < 150; x2695++) {
double x2696 = x2673[x2695];
double x2697 = x58[x2695];
double x2698 = x2696 + x2697;
x2694[x2695] = x2698;

}
double* x2702 = (double*)myMalloc(150 * sizeof(double));
for(int x2703=0; x2703 < 150; x2703++) {
x2702[x2703] = 0.0;

}
double* x2707 = (double*)myMalloc(150 * sizeof(double));
for(int x2708=0; x2708 < 150; x2708++) {
double x2709 = x2694[x2708];
double x2710 = -1.0 * x2709;
double x2711 = exp(x2710);
double x2712 = x2711 + 1.0;
double x2713 = 1.0 / x2712;
x2707[x2708] = x2713;

}
double* x2717 = (double*)myMalloc(150 * sizeof(double));
for(int x2718=0; x2718 < 150; x2718++) {
x2717[x2718] = 0.0;

}
double** x2722 = (double**)myMalloc(2 * sizeof(double*));
x2722[0] = x2707;
x2722[1] = x2717;
function<void(double**)> x560 = [&](double** x561) {
double* x562 = x561[0];
double* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
double** x2375 = (double**)myMalloc(2 * sizeof(double*));
x2375[0] = x326;
x2375[1] = x331;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x2079 = (double**)myMalloc(2 * sizeof(double*));
x2079[0] = x326;
x2079[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2079);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2085 = 0;
double* x2086 = (double*)myMalloc(150 * sizeof(double));
for(int x2087=0; x2087 < 150; x2087++) {
double x2088 = 0.0;
for(int x2089=0; x2089 < 150; x2089++) {
int32_t x2090 = x2085;
double x2091 = x128[x2090];
double x2092 = x527[x2089];
double x2093 = x2091 * x2092;
x2088 += x2093;
x2085 += 1;

}
double x2098 = x2088;
x2086[x2087] = x2098;

}
double* x2102 = (double*)myMalloc(150 * sizeof(double));
for(int x2103=0; x2103 < 150; x2103++) {
x2102[x2103] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2108 = 0;
double* x2109 = (double*)myMalloc(150 * sizeof(double));
for(int x2110=0; x2110 < 150; x2110++) {
double x2111 = 0.0;
for(int x2112=0; x2112 < 150; x2112++) {
int32_t x2113 = x2108;
double x2114 = x136[x2113];
double x2115 = x536[x2112];
double x2116 = x2114 * x2115;
x2111 += x2116;
x2108 += 1;

}
double x2121 = x2111;
x2109[x2110] = x2121;

}
double* x2125 = (double*)myMalloc(150 * sizeof(double));
for(int x2126=0; x2126 < 150; x2126++) {
x2125[x2126] = 0.0;

}
double* x2130 = (double*)myMalloc(150 * sizeof(double));
for(int x2131=0; x2131 < 150; x2131++) {
double x2132 = x2086[x2131];
double x2133 = x2109[x2131];
double x2134 = x2132 + x2133;
x2130[x2131] = x2134;

}
double* x2138 = (double*)myMalloc(150 * sizeof(double));
for(int x2139=0; x2139 < 150; x2139++) {
x2138[x2139] = 0.0;

}
double* x2143 = (double*)myMalloc(150 * sizeof(double));
for(int x2144=0; x2144 < 150; x2144++) {
double x2145 = x2130[x2144];
double x2146 = x144[x2144];
double x2147 = x2145 + x2146;
x2143[x2144] = x2147;

}
double* x2151 = (double*)myMalloc(150 * sizeof(double));
for(int x2152=0; x2152 < 150; x2152++) {
x2151[x2152] = 0.0;

}
double* x2156 = (double*)myMalloc(150 * sizeof(double));
for(int x2157=0; x2157 < 150; x2157++) {
double x2158 = x2143[x2157];
double x2159 = -1.0 * x2158;
double x2160 = exp(x2159);
double x2161 = x2160 + 1.0;
double x2162 = 1.0 / x2161;
x2156[x2157] = x2162;

}
double* x2166 = (double*)myMalloc(150 * sizeof(double));
for(int x2167=0; x2167 < 150; x2167++) {
x2166[x2167] = 0.0;

}
double** x2171 = (double**)myMalloc(2 * sizeof(double*));
x2171[0] = x2156;
x2171[1] = x2166;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2171);
for(int x2175=0; x2175 < 150; x2175++) {
double x2176 = x2151[x2175];
double x2177 = x2156[x2175];
double x2180 = x2166[x2175];
double x2178 = 1.0 - x2177;
double x2179 = x2178 * x2177;
double x2181 = x2179 * x2180;
double x2182 = x2176 + x2181;
x2151[x2175] = x2182;

}
// backpropagate +
for(int x2187=0; x2187 < 150; x2187++) {
double x2188 = x2138[x2187];
double x2189 = x2151[x2187];
double x2190 = x2188 + x2189;
x2138[x2187] = x2190;

}
for(int x2194=0; x2194 < 150; x2194++) {
double x2195 = x271[x2194];
double x2196 = x2151[x2194];
double x2197 = x2195 + x2196;
x271[x2194] = x2197;

}
// backpropagate +
for(int x2202=0; x2202 < 150; x2202++) {
double x2203 = x2102[x2202];
double x2204 = x2138[x2202];
double x2205 = x2203 + x2204;
x2102[x2202] = x2205;

}
for(int x2209=0; x2209 < 150; x2209++) {
double x2210 = x2125[x2209];
double x2211 = x2138[x2209];
double x2212 = x2210 + x2211;
x2125[x2209] = x2212;

}
int32_t x2216 = 0;
int32_t x2217 = x2216;
int32_t x2218 = x2217;
int32_t x2219 = 0;
int32_t x2220 = x2219;
int32_t x2221 = x2220;
int32_t x2222 = 0;
int32_t x2223 = x2222;
int32_t x2224 = x2223;
for(int x2225=0; x2225 < 150; x2225++) {
int32_t x2226 = x2224;
int32_t x2227 = x2226;
for(int x2228=0; x2228 < 150; x2228++) {
int32_t x2229 = x2227;
int32_t x2230 = x2229;
int32_t x2231 = x2221;
int32_t x2232 = x2231;
for(int x2233=0; x2233 < 1; x2233++) {
int32_t x2234 = x2218;
double x2235 = x266[x2234];
int32_t x2236 = x2232;
double x2237 = x2125[x2236];
int32_t x2238 = x2230;
double x2239 = x536[x2238];
double x2240 = x2237 * x2239;
double x2241 = x2235 + x2240;
x266[x2234] = x2241;
x2232 += 1;
x2230 += 150;

}
x2218 += 1;
x2227 += 1;

}
x2221 += 1;
x2224 *= 0;

}
int32_t x2255 = 0;
int32_t x2256 = x2255;
int32_t x2257 = x2256;
int32_t x2258 = 0;
int32_t x2259 = x2258;
int32_t x2260 = x2259;
int32_t x2261 = 0;
int32_t x2262 = x2261;
int32_t x2263 = x2262;
for(int x2264=0; x2264 < 1; x2264++) {
int32_t x2265 = x2263;
int32_t x2266 = x2265;
for(int x2267=0; x2267 < 150; x2267++) {
int32_t x2268 = x2266;
int32_t x2269 = x2268;
int32_t x2270 = x2260;
int32_t x2271 = x2270;
for(int x2272=0; x2272 < 150; x2272++) {
int32_t x2273 = x2257;
double x2274 = x537[x2273];
int32_t x2275 = x2271;
double x2276 = x2125[x2275];
int32_t x2277 = x2269;
double x2278 = x136[x2277];
double x2279 = x2276 * x2278;
double x2280 = x2274 + x2279;
x537[x2273] = x2280;
x2271 += 1;
x2269 += 150;

}
x2257 += 1;
x2266 += 1;

}
x2260 += 150;
x2263 *= 0;

}
int32_t x2294 = 0;
int32_t x2295 = x2294;
int32_t x2296 = x2295;
int32_t x2297 = 0;
int32_t x2298 = x2297;
int32_t x2299 = x2298;
int32_t x2300 = 0;
int32_t x2301 = x2300;
int32_t x2302 = x2301;
for(int x2303=0; x2303 < 150; x2303++) {
int32_t x2304 = x2302;
int32_t x2305 = x2304;
for(int x2306=0; x2306 < 150; x2306++) {
int32_t x2307 = x2305;
int32_t x2308 = x2307;
int32_t x2309 = x2299;
int32_t x2310 = x2309;
for(int x2311=0; x2311 < 1; x2311++) {
int32_t x2312 = x2296;
double x2313 = x261[x2312];
int32_t x2314 = x2310;
double x2315 = x2102[x2314];
int32_t x2316 = x2308;
double x2317 = x527[x2316];
double x2318 = x2315 * x2317;
double x2319 = x2313 + x2318;
x261[x2312] = x2319;
x2310 += 1;
x2308 += 150;

}
x2296 += 1;
x2305 += 1;

}
x2299 += 1;
x2302 *= 0;

}
int32_t x2333 = 0;
int32_t x2334 = x2333;
int32_t x2335 = x2334;
int32_t x2336 = 0;
int32_t x2337 = x2336;
int32_t x2338 = x2337;
int32_t x2339 = 0;
int32_t x2340 = x2339;
int32_t x2341 = x2340;
for(int x2342=0; x2342 < 1; x2342++) {
int32_t x2343 = x2341;
int32_t x2344 = x2343;
for(int x2345=0; x2345 < 150; x2345++) {
int32_t x2346 = x2344;
int32_t x2347 = x2346;
int32_t x2348 = x2338;
int32_t x2349 = x2348;
for(int x2350=0; x2350 < 150; x2350++) {
int32_t x2351 = x2335;
double x2352 = x528[x2351];
int32_t x2353 = x2349;
double x2354 = x2102[x2353];
int32_t x2355 = x2347;
double x2356 = x128[x2355];
double x2357 = x2354 * x2356;
double x2358 = x2352 + x2357;
x528[x2351] = x2358;
x2349 += 1;
x2347 += 150;

}
x2335 += 1;
x2344 += 1;

}
x2338 += 150;
x2341 *= 0;

}
}
};
x566(x2375);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2381 = 0;
double* x2382 = (double*)myMalloc(150 * sizeof(double));
for(int x2383=0; x2383 < 150; x2383++) {
double x2384 = 0.0;
for(int x2385=0; x2385 < 150; x2385++) {
int32_t x2386 = x2381;
double x2387 = x112[x2386];
double x2388 = x527[x2385];
double x2389 = x2387 * x2388;
x2384 += x2389;
x2381 += 1;

}
double x2394 = x2384;
x2382[x2383] = x2394;

}
double* x2398 = (double*)myMalloc(150 * sizeof(double));
for(int x2399=0; x2399 < 150; x2399++) {
x2398[x2399] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2404 = 0;
double* x2405 = (double*)myMalloc(150 * sizeof(double));
for(int x2406=0; x2406 < 150; x2406++) {
double x2407 = 0.0;
for(int x2408=0; x2408 < 150; x2408++) {
int32_t x2409 = x2404;
double x2410 = x120[x2409];
double x2411 = x536[x2408];
double x2412 = x2410 * x2411;
x2407 += x2412;
x2404 += 1;

}
double x2417 = x2407;
x2405[x2406] = x2417;

}
double* x2421 = (double*)myMalloc(150 * sizeof(double));
for(int x2422=0; x2422 < 150; x2422++) {
x2421[x2422] = 0.0;

}
double* x2426 = (double*)myMalloc(150 * sizeof(double));
for(int x2427=0; x2427 < 150; x2427++) {
double x2428 = x2382[x2427];
double x2429 = x2405[x2427];
double x2430 = x2428 + x2429;
x2426[x2427] = x2430;

}
double* x2434 = (double*)myMalloc(150 * sizeof(double));
for(int x2435=0; x2435 < 150; x2435++) {
x2434[x2435] = 0.0;

}
double* x2439 = (double*)myMalloc(150 * sizeof(double));
for(int x2440=0; x2440 < 150; x2440++) {
double x2441 = x2426[x2440];
double x2442 = x144[x2440];
double x2443 = x2441 + x2442;
x2439[x2440] = x2443;

}
double* x2447 = (double*)myMalloc(150 * sizeof(double));
for(int x2448=0; x2448 < 150; x2448++) {
x2447[x2448] = 0.0;

}
double* x2452 = (double*)myMalloc(150 * sizeof(double));
for(int x2453=0; x2453 < 150; x2453++) {
double x2454 = x2439[x2453];
double x2455 = -1.0 * x2454;
double x2456 = exp(x2455);
double x2457 = x2456 + 1.0;
double x2458 = 1.0 / x2457;
x2452[x2453] = x2458;

}
double* x2462 = (double*)myMalloc(150 * sizeof(double));
for(int x2463=0; x2463 < 150; x2463++) {
x2462[x2463] = 0.0;

}
double** x2467 = (double**)myMalloc(2 * sizeof(double*));
x2467[0] = x2452;
x2467[1] = x2462;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x2079 = (double**)myMalloc(2 * sizeof(double*));
x2079[0] = x326;
x2079[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2079);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2085 = 0;
double* x2086 = (double*)myMalloc(150 * sizeof(double));
for(int x2087=0; x2087 < 150; x2087++) {
double x2088 = 0.0;
for(int x2089=0; x2089 < 150; x2089++) {
int32_t x2090 = x2085;
double x2091 = x128[x2090];
double x2092 = x527[x2089];
double x2093 = x2091 * x2092;
x2088 += x2093;
x2085 += 1;

}
double x2098 = x2088;
x2086[x2087] = x2098;

}
double* x2102 = (double*)myMalloc(150 * sizeof(double));
for(int x2103=0; x2103 < 150; x2103++) {
x2102[x2103] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2108 = 0;
double* x2109 = (double*)myMalloc(150 * sizeof(double));
for(int x2110=0; x2110 < 150; x2110++) {
double x2111 = 0.0;
for(int x2112=0; x2112 < 150; x2112++) {
int32_t x2113 = x2108;
double x2114 = x136[x2113];
double x2115 = x536[x2112];
double x2116 = x2114 * x2115;
x2111 += x2116;
x2108 += 1;

}
double x2121 = x2111;
x2109[x2110] = x2121;

}
double* x2125 = (double*)myMalloc(150 * sizeof(double));
for(int x2126=0; x2126 < 150; x2126++) {
x2125[x2126] = 0.0;

}
double* x2130 = (double*)myMalloc(150 * sizeof(double));
for(int x2131=0; x2131 < 150; x2131++) {
double x2132 = x2086[x2131];
double x2133 = x2109[x2131];
double x2134 = x2132 + x2133;
x2130[x2131] = x2134;

}
double* x2138 = (double*)myMalloc(150 * sizeof(double));
for(int x2139=0; x2139 < 150; x2139++) {
x2138[x2139] = 0.0;

}
double* x2143 = (double*)myMalloc(150 * sizeof(double));
for(int x2144=0; x2144 < 150; x2144++) {
double x2145 = x2130[x2144];
double x2146 = x144[x2144];
double x2147 = x2145 + x2146;
x2143[x2144] = x2147;

}
double* x2151 = (double*)myMalloc(150 * sizeof(double));
for(int x2152=0; x2152 < 150; x2152++) {
x2151[x2152] = 0.0;

}
double* x2156 = (double*)myMalloc(150 * sizeof(double));
for(int x2157=0; x2157 < 150; x2157++) {
double x2158 = x2143[x2157];
double x2159 = -1.0 * x2158;
double x2160 = exp(x2159);
double x2161 = x2160 + 1.0;
double x2162 = 1.0 / x2161;
x2156[x2157] = x2162;

}
double* x2166 = (double*)myMalloc(150 * sizeof(double));
for(int x2167=0; x2167 < 150; x2167++) {
x2166[x2167] = 0.0;

}
double** x2171 = (double**)myMalloc(2 * sizeof(double*));
x2171[0] = x2156;
x2171[1] = x2166;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2171);
for(int x2175=0; x2175 < 150; x2175++) {
double x2176 = x2151[x2175];
double x2177 = x2156[x2175];
double x2180 = x2166[x2175];
double x2178 = 1.0 - x2177;
double x2179 = x2178 * x2177;
double x2181 = x2179 * x2180;
double x2182 = x2176 + x2181;
x2151[x2175] = x2182;

}
// backpropagate +
for(int x2187=0; x2187 < 150; x2187++) {
double x2188 = x2138[x2187];
double x2189 = x2151[x2187];
double x2190 = x2188 + x2189;
x2138[x2187] = x2190;

}
for(int x2194=0; x2194 < 150; x2194++) {
double x2195 = x271[x2194];
double x2196 = x2151[x2194];
double x2197 = x2195 + x2196;
x271[x2194] = x2197;

}
// backpropagate +
for(int x2202=0; x2202 < 150; x2202++) {
double x2203 = x2102[x2202];
double x2204 = x2138[x2202];
double x2205 = x2203 + x2204;
x2102[x2202] = x2205;

}
for(int x2209=0; x2209 < 150; x2209++) {
double x2210 = x2125[x2209];
double x2211 = x2138[x2209];
double x2212 = x2210 + x2211;
x2125[x2209] = x2212;

}
int32_t x2216 = 0;
int32_t x2217 = x2216;
int32_t x2218 = x2217;
int32_t x2219 = 0;
int32_t x2220 = x2219;
int32_t x2221 = x2220;
int32_t x2222 = 0;
int32_t x2223 = x2222;
int32_t x2224 = x2223;
for(int x2225=0; x2225 < 150; x2225++) {
int32_t x2226 = x2224;
int32_t x2227 = x2226;
for(int x2228=0; x2228 < 150; x2228++) {
int32_t x2229 = x2227;
int32_t x2230 = x2229;
int32_t x2231 = x2221;
int32_t x2232 = x2231;
for(int x2233=0; x2233 < 1; x2233++) {
int32_t x2234 = x2218;
double x2235 = x266[x2234];
int32_t x2236 = x2232;
double x2237 = x2125[x2236];
int32_t x2238 = x2230;
double x2239 = x536[x2238];
double x2240 = x2237 * x2239;
double x2241 = x2235 + x2240;
x266[x2234] = x2241;
x2232 += 1;
x2230 += 150;

}
x2218 += 1;
x2227 += 1;

}
x2221 += 1;
x2224 *= 0;

}
int32_t x2255 = 0;
int32_t x2256 = x2255;
int32_t x2257 = x2256;
int32_t x2258 = 0;
int32_t x2259 = x2258;
int32_t x2260 = x2259;
int32_t x2261 = 0;
int32_t x2262 = x2261;
int32_t x2263 = x2262;
for(int x2264=0; x2264 < 1; x2264++) {
int32_t x2265 = x2263;
int32_t x2266 = x2265;
for(int x2267=0; x2267 < 150; x2267++) {
int32_t x2268 = x2266;
int32_t x2269 = x2268;
int32_t x2270 = x2260;
int32_t x2271 = x2270;
for(int x2272=0; x2272 < 150; x2272++) {
int32_t x2273 = x2257;
double x2274 = x537[x2273];
int32_t x2275 = x2271;
double x2276 = x2125[x2275];
int32_t x2277 = x2269;
double x2278 = x136[x2277];
double x2279 = x2276 * x2278;
double x2280 = x2274 + x2279;
x537[x2273] = x2280;
x2271 += 1;
x2269 += 150;

}
x2257 += 1;
x2266 += 1;

}
x2260 += 150;
x2263 *= 0;

}
int32_t x2294 = 0;
int32_t x2295 = x2294;
int32_t x2296 = x2295;
int32_t x2297 = 0;
int32_t x2298 = x2297;
int32_t x2299 = x2298;
int32_t x2300 = 0;
int32_t x2301 = x2300;
int32_t x2302 = x2301;
for(int x2303=0; x2303 < 150; x2303++) {
int32_t x2304 = x2302;
int32_t x2305 = x2304;
for(int x2306=0; x2306 < 150; x2306++) {
int32_t x2307 = x2305;
int32_t x2308 = x2307;
int32_t x2309 = x2299;
int32_t x2310 = x2309;
for(int x2311=0; x2311 < 1; x2311++) {
int32_t x2312 = x2296;
double x2313 = x261[x2312];
int32_t x2314 = x2310;
double x2315 = x2102[x2314];
int32_t x2316 = x2308;
double x2317 = x527[x2316];
double x2318 = x2315 * x2317;
double x2319 = x2313 + x2318;
x261[x2312] = x2319;
x2310 += 1;
x2308 += 150;

}
x2296 += 1;
x2305 += 1;

}
x2299 += 1;
x2302 *= 0;

}
int32_t x2333 = 0;
int32_t x2334 = x2333;
int32_t x2335 = x2334;
int32_t x2336 = 0;
int32_t x2337 = x2336;
int32_t x2338 = x2337;
int32_t x2339 = 0;
int32_t x2340 = x2339;
int32_t x2341 = x2340;
for(int x2342=0; x2342 < 1; x2342++) {
int32_t x2343 = x2341;
int32_t x2344 = x2343;
for(int x2345=0; x2345 < 150; x2345++) {
int32_t x2346 = x2344;
int32_t x2347 = x2346;
int32_t x2348 = x2338;
int32_t x2349 = x2348;
for(int x2350=0; x2350 < 150; x2350++) {
int32_t x2351 = x2335;
double x2352 = x528[x2351];
int32_t x2353 = x2349;
double x2354 = x2102[x2353];
int32_t x2355 = x2347;
double x2356 = x128[x2355];
double x2357 = x2354 * x2356;
double x2358 = x2352 + x2357;
x528[x2351] = x2358;
x2349 += 1;
x2347 += 150;

}
x2335 += 1;
x2344 += 1;

}
x2338 += 150;
x2341 *= 0;

}
}
};
x566(x2467);
for(int x2471=0; x2471 < 150; x2471++) {
double x2472 = x2447[x2471];
double x2473 = x2452[x2471];
double x2476 = x2462[x2471];
double x2474 = 1.0 - x2473;
double x2475 = x2474 * x2473;
double x2477 = x2475 * x2476;
double x2478 = x2472 + x2477;
x2447[x2471] = x2478;

}
// backpropagate +
for(int x2483=0; x2483 < 150; x2483++) {
double x2484 = x2434[x2483];
double x2485 = x2447[x2483];
double x2486 = x2484 + x2485;
x2434[x2483] = x2486;

}
for(int x2490=0; x2490 < 150; x2490++) {
double x2491 = x271[x2490];
double x2492 = x2447[x2490];
double x2493 = x2491 + x2492;
x271[x2490] = x2493;

}
// backpropagate +
for(int x2498=0; x2498 < 150; x2498++) {
double x2499 = x2398[x2498];
double x2500 = x2434[x2498];
double x2501 = x2499 + x2500;
x2398[x2498] = x2501;

}
for(int x2505=0; x2505 < 150; x2505++) {
double x2506 = x2421[x2505];
double x2507 = x2434[x2505];
double x2508 = x2506 + x2507;
x2421[x2505] = x2508;

}
int32_t x2512 = 0;
int32_t x2513 = x2512;
int32_t x2514 = x2513;
int32_t x2515 = 0;
int32_t x2516 = x2515;
int32_t x2517 = x2516;
int32_t x2518 = 0;
int32_t x2519 = x2518;
int32_t x2520 = x2519;
for(int x2521=0; x2521 < 150; x2521++) {
int32_t x2522 = x2520;
int32_t x2523 = x2522;
for(int x2524=0; x2524 < 150; x2524++) {
int32_t x2525 = x2523;
int32_t x2526 = x2525;
int32_t x2527 = x2517;
int32_t x2528 = x2527;
for(int x2529=0; x2529 < 1; x2529++) {
int32_t x2530 = x2514;
double x2531 = x256[x2530];
int32_t x2532 = x2528;
double x2533 = x2421[x2532];
int32_t x2534 = x2526;
double x2535 = x536[x2534];
double x2536 = x2533 * x2535;
double x2537 = x2531 + x2536;
x256[x2530] = x2537;
x2528 += 1;
x2526 += 150;

}
x2514 += 1;
x2523 += 1;

}
x2517 += 1;
x2520 *= 0;

}
int32_t x2551 = 0;
int32_t x2552 = x2551;
int32_t x2553 = x2552;
int32_t x2554 = 0;
int32_t x2555 = x2554;
int32_t x2556 = x2555;
int32_t x2557 = 0;
int32_t x2558 = x2557;
int32_t x2559 = x2558;
for(int x2560=0; x2560 < 1; x2560++) {
int32_t x2561 = x2559;
int32_t x2562 = x2561;
for(int x2563=0; x2563 < 150; x2563++) {
int32_t x2564 = x2562;
int32_t x2565 = x2564;
int32_t x2566 = x2556;
int32_t x2567 = x2566;
for(int x2568=0; x2568 < 150; x2568++) {
int32_t x2569 = x2553;
double x2570 = x537[x2569];
int32_t x2571 = x2567;
double x2572 = x2421[x2571];
int32_t x2573 = x2565;
double x2574 = x120[x2573];
double x2575 = x2572 * x2574;
double x2576 = x2570 + x2575;
x537[x2569] = x2576;
x2567 += 1;
x2565 += 150;

}
x2553 += 1;
x2562 += 1;

}
x2556 += 150;
x2559 *= 0;

}
int32_t x2590 = 0;
int32_t x2591 = x2590;
int32_t x2592 = x2591;
int32_t x2593 = 0;
int32_t x2594 = x2593;
int32_t x2595 = x2594;
int32_t x2596 = 0;
int32_t x2597 = x2596;
int32_t x2598 = x2597;
for(int x2599=0; x2599 < 150; x2599++) {
int32_t x2600 = x2598;
int32_t x2601 = x2600;
for(int x2602=0; x2602 < 150; x2602++) {
int32_t x2603 = x2601;
int32_t x2604 = x2603;
int32_t x2605 = x2595;
int32_t x2606 = x2605;
for(int x2607=0; x2607 < 1; x2607++) {
int32_t x2608 = x2592;
double x2609 = x251[x2608];
int32_t x2610 = x2606;
double x2611 = x2398[x2610];
int32_t x2612 = x2604;
double x2613 = x527[x2612];
double x2614 = x2611 * x2613;
double x2615 = x2609 + x2614;
x251[x2608] = x2615;
x2606 += 1;
x2604 += 150;

}
x2592 += 1;
x2601 += 1;

}
x2595 += 1;
x2598 *= 0;

}
int32_t x2629 = 0;
int32_t x2630 = x2629;
int32_t x2631 = x2630;
int32_t x2632 = 0;
int32_t x2633 = x2632;
int32_t x2634 = x2633;
int32_t x2635 = 0;
int32_t x2636 = x2635;
int32_t x2637 = x2636;
for(int x2638=0; x2638 < 1; x2638++) {
int32_t x2639 = x2637;
int32_t x2640 = x2639;
for(int x2641=0; x2641 < 150; x2641++) {
int32_t x2642 = x2640;
int32_t x2643 = x2642;
int32_t x2644 = x2634;
int32_t x2645 = x2644;
for(int x2646=0; x2646 < 150; x2646++) {
int32_t x2647 = x2631;
double x2648 = x528[x2647];
int32_t x2649 = x2645;
double x2650 = x2398[x2649];
int32_t x2651 = x2643;
double x2652 = x112[x2651];
double x2653 = x2650 * x2652;
double x2654 = x2648 + x2653;
x528[x2647] = x2654;
x2645 += 1;
x2643 += 150;

}
x2631 += 1;
x2640 += 1;

}
x2634 += 150;
x2637 *= 0;

}
}
};
x560(x2722);
for(int x2726=0; x2726 < 150; x2726++) {
double x2727 = x2702[x2726];
double x2728 = x2707[x2726];
double x2731 = x2717[x2726];
double x2729 = 1.0 - x2728;
double x2730 = x2729 * x2728;
double x2732 = x2730 * x2731;
double x2733 = x2727 + x2732;
x2702[x2726] = x2733;

}
// backpropagate +
for(int x2738=0; x2738 < 150; x2738++) {
double x2739 = x2689[x2738];
double x2740 = x2702[x2738];
double x2741 = x2739 + x2740;
x2689[x2738] = x2741;

}
for(int x2745=0; x2745 < 150; x2745++) {
double x2746 = x211[x2745];
double x2747 = x2702[x2745];
double x2748 = x2746 + x2747;
x211[x2745] = x2748;

}
int32_t x2752 = 0;
int32_t x2753 = x2752;
int32_t x2754 = x2753;
int32_t x2755 = 0;
int32_t x2756 = x2755;
int32_t x2757 = x2756;
int32_t x2758 = 0;
int32_t x2759 = x2758;
int32_t x2760 = x2759;
for(int x2761=0; x2761 < 150; x2761++) {
int32_t x2762 = x2760;
int32_t x2763 = x2762;
for(int x2764=0; x2764 < 300; x2764++) {
int32_t x2765 = x2763;
int32_t x2766 = x2765;
int32_t x2767 = x2757;
int32_t x2768 = x2767;
for(int x2769=0; x2769 < 1; x2769++) {
int32_t x2770 = x2754;
double x2771 = x206[x2770];
int32_t x2772 = x2768;
double x2773 = x2689[x2772];
int32_t x2774 = x2766;
double x2775 = x556[x2774];
double x2776 = x2773 * x2775;
double x2777 = x2771 + x2776;
x206[x2770] = x2777;
x2768 += 1;
x2766 += 300;

}
x2754 += 1;
x2763 += 1;

}
x2757 += 1;
x2760 *= 0;

}
int32_t x2791 = 0;
int32_t x2792 = x2791;
int32_t x2793 = x2792;
int32_t x2794 = 0;
int32_t x2795 = x2794;
int32_t x2796 = x2795;
int32_t x2797 = 0;
int32_t x2798 = x2797;
int32_t x2799 = x2798;
for(int x2800=0; x2800 < 1; x2800++) {
int32_t x2801 = x2799;
int32_t x2802 = x2801;
for(int x2803=0; x2803 < 300; x2803++) {
int32_t x2804 = x2802;
int32_t x2805 = x2804;
int32_t x2806 = x2796;
int32_t x2807 = x2806;
for(int x2808=0; x2808 < 150; x2808++) {
int32_t x2809 = x2793;
double x2810 = x557[x2809];
int32_t x2811 = x2807;
double x2812 = x2689[x2811];
int32_t x2813 = x2805;
double x2814 = x49[x2813];
double x2815 = x2812 * x2814;
double x2816 = x2810 + x2815;
x557[x2809] = x2816;
x2807 += 1;
x2805 += 300;

}
x2793 += 1;
x2802 += 1;

}
x2796 += 150;
x2799 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2832 = 0;
double* x2833 = (double*)myMalloc(150 * sizeof(double));
for(int x2834=0; x2834 < 150; x2834++) {
double x2835 = 0.0;
for(int x2836=0; x2836 < 150; x2836++) {
int32_t x2837 = x2832;
double x2838 = x90[x2837];
double x2839 = x527[x2836];
double x2840 = x2838 * x2839;
x2835 += x2840;
x2832 += 1;

}
double x2845 = x2835;
x2833[x2834] = x2845;

}
double* x2849 = (double*)myMalloc(150 * sizeof(double));
for(int x2850=0; x2850 < 150; x2850++) {
x2849[x2850] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2855 = 0;
double* x2856 = (double*)myMalloc(150 * sizeof(double));
for(int x2857=0; x2857 < 150; x2857++) {
double x2858 = 0.0;
for(int x2859=0; x2859 < 150; x2859++) {
int32_t x2860 = x2855;
double x2861 = x99[x2860];
double x2862 = x536[x2859];
double x2863 = x2861 * x2862;
x2858 += x2863;
x2855 += 1;

}
double x2868 = x2858;
x2856[x2857] = x2868;

}
double* x2872 = (double*)myMalloc(150 * sizeof(double));
for(int x2873=0; x2873 < 150; x2873++) {
x2872[x2873] = 0.0;

}
double* x2877 = (double*)myMalloc(150 * sizeof(double));
for(int x2878=0; x2878 < 150; x2878++) {
double x2879 = x2833[x2878];
double x2880 = x2856[x2878];
double x2881 = x2879 + x2880;
x2877[x2878] = x2881;

}
double* x2885 = (double*)myMalloc(150 * sizeof(double));
for(int x2886=0; x2886 < 150; x2886++) {
x2885[x2886] = 0.0;

}
double* x2890 = (double*)myMalloc(150 * sizeof(double));
for(int x2891=0; x2891 < 150; x2891++) {
double x2892 = x2877[x2891];
double x2893 = x107[x2891];
double x2894 = x2892 + x2893;
x2890[x2891] = x2894;

}
double* x2898 = (double*)myMalloc(150 * sizeof(double));
for(int x2899=0; x2899 < 150; x2899++) {
x2898[x2899] = 0.0;

}
double* x2903 = (double*)myMalloc(150 * sizeof(double));
for(int x2904=0; x2904 < 150; x2904++) {
double x2905 = x2890[x2904];
double x2906 = -1.0 * x2905;
double x2907 = exp(x2906);
double x2908 = x2907 + 1.0;
double x2909 = 1.0 / x2908;
x2903[x2904] = x2909;

}
double* x2913 = (double*)myMalloc(150 * sizeof(double));
for(int x2914=0; x2914 < 150; x2914++) {
x2913[x2914] = 0.0;

}
double** x2918 = (double**)myMalloc(2 * sizeof(double*));
x2918[0] = x2903;
x2918[1] = x2913;
function<void(double**)> x560 = [&](double** x561) {
double* x562 = x561[0];
double* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
double** x2375 = (double**)myMalloc(2 * sizeof(double*));
x2375[0] = x326;
x2375[1] = x331;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x2079 = (double**)myMalloc(2 * sizeof(double*));
x2079[0] = x326;
x2079[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2079);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2085 = 0;
double* x2086 = (double*)myMalloc(150 * sizeof(double));
for(int x2087=0; x2087 < 150; x2087++) {
double x2088 = 0.0;
for(int x2089=0; x2089 < 150; x2089++) {
int32_t x2090 = x2085;
double x2091 = x128[x2090];
double x2092 = x527[x2089];
double x2093 = x2091 * x2092;
x2088 += x2093;
x2085 += 1;

}
double x2098 = x2088;
x2086[x2087] = x2098;

}
double* x2102 = (double*)myMalloc(150 * sizeof(double));
for(int x2103=0; x2103 < 150; x2103++) {
x2102[x2103] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2108 = 0;
double* x2109 = (double*)myMalloc(150 * sizeof(double));
for(int x2110=0; x2110 < 150; x2110++) {
double x2111 = 0.0;
for(int x2112=0; x2112 < 150; x2112++) {
int32_t x2113 = x2108;
double x2114 = x136[x2113];
double x2115 = x536[x2112];
double x2116 = x2114 * x2115;
x2111 += x2116;
x2108 += 1;

}
double x2121 = x2111;
x2109[x2110] = x2121;

}
double* x2125 = (double*)myMalloc(150 * sizeof(double));
for(int x2126=0; x2126 < 150; x2126++) {
x2125[x2126] = 0.0;

}
double* x2130 = (double*)myMalloc(150 * sizeof(double));
for(int x2131=0; x2131 < 150; x2131++) {
double x2132 = x2086[x2131];
double x2133 = x2109[x2131];
double x2134 = x2132 + x2133;
x2130[x2131] = x2134;

}
double* x2138 = (double*)myMalloc(150 * sizeof(double));
for(int x2139=0; x2139 < 150; x2139++) {
x2138[x2139] = 0.0;

}
double* x2143 = (double*)myMalloc(150 * sizeof(double));
for(int x2144=0; x2144 < 150; x2144++) {
double x2145 = x2130[x2144];
double x2146 = x144[x2144];
double x2147 = x2145 + x2146;
x2143[x2144] = x2147;

}
double* x2151 = (double*)myMalloc(150 * sizeof(double));
for(int x2152=0; x2152 < 150; x2152++) {
x2151[x2152] = 0.0;

}
double* x2156 = (double*)myMalloc(150 * sizeof(double));
for(int x2157=0; x2157 < 150; x2157++) {
double x2158 = x2143[x2157];
double x2159 = -1.0 * x2158;
double x2160 = exp(x2159);
double x2161 = x2160 + 1.0;
double x2162 = 1.0 / x2161;
x2156[x2157] = x2162;

}
double* x2166 = (double*)myMalloc(150 * sizeof(double));
for(int x2167=0; x2167 < 150; x2167++) {
x2166[x2167] = 0.0;

}
double** x2171 = (double**)myMalloc(2 * sizeof(double*));
x2171[0] = x2156;
x2171[1] = x2166;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2171);
for(int x2175=0; x2175 < 150; x2175++) {
double x2176 = x2151[x2175];
double x2177 = x2156[x2175];
double x2180 = x2166[x2175];
double x2178 = 1.0 - x2177;
double x2179 = x2178 * x2177;
double x2181 = x2179 * x2180;
double x2182 = x2176 + x2181;
x2151[x2175] = x2182;

}
// backpropagate +
for(int x2187=0; x2187 < 150; x2187++) {
double x2188 = x2138[x2187];
double x2189 = x2151[x2187];
double x2190 = x2188 + x2189;
x2138[x2187] = x2190;

}
for(int x2194=0; x2194 < 150; x2194++) {
double x2195 = x271[x2194];
double x2196 = x2151[x2194];
double x2197 = x2195 + x2196;
x271[x2194] = x2197;

}
// backpropagate +
for(int x2202=0; x2202 < 150; x2202++) {
double x2203 = x2102[x2202];
double x2204 = x2138[x2202];
double x2205 = x2203 + x2204;
x2102[x2202] = x2205;

}
for(int x2209=0; x2209 < 150; x2209++) {
double x2210 = x2125[x2209];
double x2211 = x2138[x2209];
double x2212 = x2210 + x2211;
x2125[x2209] = x2212;

}
int32_t x2216 = 0;
int32_t x2217 = x2216;
int32_t x2218 = x2217;
int32_t x2219 = 0;
int32_t x2220 = x2219;
int32_t x2221 = x2220;
int32_t x2222 = 0;
int32_t x2223 = x2222;
int32_t x2224 = x2223;
for(int x2225=0; x2225 < 150; x2225++) {
int32_t x2226 = x2224;
int32_t x2227 = x2226;
for(int x2228=0; x2228 < 150; x2228++) {
int32_t x2229 = x2227;
int32_t x2230 = x2229;
int32_t x2231 = x2221;
int32_t x2232 = x2231;
for(int x2233=0; x2233 < 1; x2233++) {
int32_t x2234 = x2218;
double x2235 = x266[x2234];
int32_t x2236 = x2232;
double x2237 = x2125[x2236];
int32_t x2238 = x2230;
double x2239 = x536[x2238];
double x2240 = x2237 * x2239;
double x2241 = x2235 + x2240;
x266[x2234] = x2241;
x2232 += 1;
x2230 += 150;

}
x2218 += 1;
x2227 += 1;

}
x2221 += 1;
x2224 *= 0;

}
int32_t x2255 = 0;
int32_t x2256 = x2255;
int32_t x2257 = x2256;
int32_t x2258 = 0;
int32_t x2259 = x2258;
int32_t x2260 = x2259;
int32_t x2261 = 0;
int32_t x2262 = x2261;
int32_t x2263 = x2262;
for(int x2264=0; x2264 < 1; x2264++) {
int32_t x2265 = x2263;
int32_t x2266 = x2265;
for(int x2267=0; x2267 < 150; x2267++) {
int32_t x2268 = x2266;
int32_t x2269 = x2268;
int32_t x2270 = x2260;
int32_t x2271 = x2270;
for(int x2272=0; x2272 < 150; x2272++) {
int32_t x2273 = x2257;
double x2274 = x537[x2273];
int32_t x2275 = x2271;
double x2276 = x2125[x2275];
int32_t x2277 = x2269;
double x2278 = x136[x2277];
double x2279 = x2276 * x2278;
double x2280 = x2274 + x2279;
x537[x2273] = x2280;
x2271 += 1;
x2269 += 150;

}
x2257 += 1;
x2266 += 1;

}
x2260 += 150;
x2263 *= 0;

}
int32_t x2294 = 0;
int32_t x2295 = x2294;
int32_t x2296 = x2295;
int32_t x2297 = 0;
int32_t x2298 = x2297;
int32_t x2299 = x2298;
int32_t x2300 = 0;
int32_t x2301 = x2300;
int32_t x2302 = x2301;
for(int x2303=0; x2303 < 150; x2303++) {
int32_t x2304 = x2302;
int32_t x2305 = x2304;
for(int x2306=0; x2306 < 150; x2306++) {
int32_t x2307 = x2305;
int32_t x2308 = x2307;
int32_t x2309 = x2299;
int32_t x2310 = x2309;
for(int x2311=0; x2311 < 1; x2311++) {
int32_t x2312 = x2296;
double x2313 = x261[x2312];
int32_t x2314 = x2310;
double x2315 = x2102[x2314];
int32_t x2316 = x2308;
double x2317 = x527[x2316];
double x2318 = x2315 * x2317;
double x2319 = x2313 + x2318;
x261[x2312] = x2319;
x2310 += 1;
x2308 += 150;

}
x2296 += 1;
x2305 += 1;

}
x2299 += 1;
x2302 *= 0;

}
int32_t x2333 = 0;
int32_t x2334 = x2333;
int32_t x2335 = x2334;
int32_t x2336 = 0;
int32_t x2337 = x2336;
int32_t x2338 = x2337;
int32_t x2339 = 0;
int32_t x2340 = x2339;
int32_t x2341 = x2340;
for(int x2342=0; x2342 < 1; x2342++) {
int32_t x2343 = x2341;
int32_t x2344 = x2343;
for(int x2345=0; x2345 < 150; x2345++) {
int32_t x2346 = x2344;
int32_t x2347 = x2346;
int32_t x2348 = x2338;
int32_t x2349 = x2348;
for(int x2350=0; x2350 < 150; x2350++) {
int32_t x2351 = x2335;
double x2352 = x528[x2351];
int32_t x2353 = x2349;
double x2354 = x2102[x2353];
int32_t x2355 = x2347;
double x2356 = x128[x2355];
double x2357 = x2354 * x2356;
double x2358 = x2352 + x2357;
x528[x2351] = x2358;
x2349 += 1;
x2347 += 150;

}
x2335 += 1;
x2344 += 1;

}
x2338 += 150;
x2341 *= 0;

}
}
};
x566(x2375);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2381 = 0;
double* x2382 = (double*)myMalloc(150 * sizeof(double));
for(int x2383=0; x2383 < 150; x2383++) {
double x2384 = 0.0;
for(int x2385=0; x2385 < 150; x2385++) {
int32_t x2386 = x2381;
double x2387 = x112[x2386];
double x2388 = x527[x2385];
double x2389 = x2387 * x2388;
x2384 += x2389;
x2381 += 1;

}
double x2394 = x2384;
x2382[x2383] = x2394;

}
double* x2398 = (double*)myMalloc(150 * sizeof(double));
for(int x2399=0; x2399 < 150; x2399++) {
x2398[x2399] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2404 = 0;
double* x2405 = (double*)myMalloc(150 * sizeof(double));
for(int x2406=0; x2406 < 150; x2406++) {
double x2407 = 0.0;
for(int x2408=0; x2408 < 150; x2408++) {
int32_t x2409 = x2404;
double x2410 = x120[x2409];
double x2411 = x536[x2408];
double x2412 = x2410 * x2411;
x2407 += x2412;
x2404 += 1;

}
double x2417 = x2407;
x2405[x2406] = x2417;

}
double* x2421 = (double*)myMalloc(150 * sizeof(double));
for(int x2422=0; x2422 < 150; x2422++) {
x2421[x2422] = 0.0;

}
double* x2426 = (double*)myMalloc(150 * sizeof(double));
for(int x2427=0; x2427 < 150; x2427++) {
double x2428 = x2382[x2427];
double x2429 = x2405[x2427];
double x2430 = x2428 + x2429;
x2426[x2427] = x2430;

}
double* x2434 = (double*)myMalloc(150 * sizeof(double));
for(int x2435=0; x2435 < 150; x2435++) {
x2434[x2435] = 0.0;

}
double* x2439 = (double*)myMalloc(150 * sizeof(double));
for(int x2440=0; x2440 < 150; x2440++) {
double x2441 = x2426[x2440];
double x2442 = x144[x2440];
double x2443 = x2441 + x2442;
x2439[x2440] = x2443;

}
double* x2447 = (double*)myMalloc(150 * sizeof(double));
for(int x2448=0; x2448 < 150; x2448++) {
x2447[x2448] = 0.0;

}
double* x2452 = (double*)myMalloc(150 * sizeof(double));
for(int x2453=0; x2453 < 150; x2453++) {
double x2454 = x2439[x2453];
double x2455 = -1.0 * x2454;
double x2456 = exp(x2455);
double x2457 = x2456 + 1.0;
double x2458 = 1.0 / x2457;
x2452[x2453] = x2458;

}
double* x2462 = (double*)myMalloc(150 * sizeof(double));
for(int x2463=0; x2463 < 150; x2463++) {
x2462[x2463] = 0.0;

}
double** x2467 = (double**)myMalloc(2 * sizeof(double*));
x2467[0] = x2452;
x2467[1] = x2462;
function<void(double**)> x566 = [&](double** x567) {
double* x568 = x567[0];
double* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
double** x2079 = (double**)myMalloc(2 * sizeof(double*));
x2079[0] = x326;
x2079[1] = x331;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2079);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2085 = 0;
double* x2086 = (double*)myMalloc(150 * sizeof(double));
for(int x2087=0; x2087 < 150; x2087++) {
double x2088 = 0.0;
for(int x2089=0; x2089 < 150; x2089++) {
int32_t x2090 = x2085;
double x2091 = x128[x2090];
double x2092 = x527[x2089];
double x2093 = x2091 * x2092;
x2088 += x2093;
x2085 += 1;

}
double x2098 = x2088;
x2086[x2087] = x2098;

}
double* x2102 = (double*)myMalloc(150 * sizeof(double));
for(int x2103=0; x2103 < 150; x2103++) {
x2102[x2103] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2108 = 0;
double* x2109 = (double*)myMalloc(150 * sizeof(double));
for(int x2110=0; x2110 < 150; x2110++) {
double x2111 = 0.0;
for(int x2112=0; x2112 < 150; x2112++) {
int32_t x2113 = x2108;
double x2114 = x136[x2113];
double x2115 = x536[x2112];
double x2116 = x2114 * x2115;
x2111 += x2116;
x2108 += 1;

}
double x2121 = x2111;
x2109[x2110] = x2121;

}
double* x2125 = (double*)myMalloc(150 * sizeof(double));
for(int x2126=0; x2126 < 150; x2126++) {
x2125[x2126] = 0.0;

}
double* x2130 = (double*)myMalloc(150 * sizeof(double));
for(int x2131=0; x2131 < 150; x2131++) {
double x2132 = x2086[x2131];
double x2133 = x2109[x2131];
double x2134 = x2132 + x2133;
x2130[x2131] = x2134;

}
double* x2138 = (double*)myMalloc(150 * sizeof(double));
for(int x2139=0; x2139 < 150; x2139++) {
x2138[x2139] = 0.0;

}
double* x2143 = (double*)myMalloc(150 * sizeof(double));
for(int x2144=0; x2144 < 150; x2144++) {
double x2145 = x2130[x2144];
double x2146 = x144[x2144];
double x2147 = x2145 + x2146;
x2143[x2144] = x2147;

}
double* x2151 = (double*)myMalloc(150 * sizeof(double));
for(int x2152=0; x2152 < 150; x2152++) {
x2151[x2152] = 0.0;

}
double* x2156 = (double*)myMalloc(150 * sizeof(double));
for(int x2157=0; x2157 < 150; x2157++) {
double x2158 = x2143[x2157];
double x2159 = -1.0 * x2158;
double x2160 = exp(x2159);
double x2161 = x2160 + 1.0;
double x2162 = 1.0 / x2161;
x2156[x2157] = x2162;

}
double* x2166 = (double*)myMalloc(150 * sizeof(double));
for(int x2167=0; x2167 < 150; x2167++) {
x2166[x2167] = 0.0;

}
double** x2171 = (double**)myMalloc(2 * sizeof(double*));
x2171[0] = x2156;
x2171[1] = x2166;
function<void(double**)> x572 = [&](double** x573) {
double* x574 = x573[0];
double* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1629 = 0;
double* x1630 = (double*)myMalloc(150 * sizeof(double));
for(int x1631=0; x1631 < 150; x1631++) {
double x1632 = 0.0;
for(int x1633=0; x1633 < 300; x1633++) {
int32_t x1634 = x1629;
double x1635 = x64[x1634];
double x1636 = x556[x1633];
double x1637 = x1635 * x1636;
x1632 += x1637;
x1629 += 1;

}
double x1642 = x1632;
x1630[x1631] = x1642;

}
double* x1646 = (double*)myMalloc(150 * sizeof(double));
for(int x1647=0; x1647 < 150; x1647++) {
x1646[x1647] = 0.0;

}
double* x1651 = (double*)myMalloc(150 * sizeof(double));
for(int x1652=0; x1652 < 150; x1652++) {
double x1653 = x1630[x1652];
double x1654 = x72[x1652];
double x1655 = x1653 + x1654;
x1651[x1652] = x1655;

}
double* x1659 = (double*)myMalloc(150 * sizeof(double));
for(int x1660=0; x1660 < 150; x1660++) {
x1659[x1660] = 0.0;

}
double* x1664 = (double*)myMalloc(150 * sizeof(double));
for(int x1665=0; x1665 < 150; x1665++) {
double x1666 = x1651[x1665];
double x1667 = -1.0 * x1666;
double x1668 = exp(x1667);
double x1669 = x1668 + 1.0;
double x1670 = 1.0 / x1669;
x1664[x1665] = x1670;

}
double* x1674 = (double*)myMalloc(150 * sizeof(double));
for(int x1675=0; x1675 < 150; x1675++) {
x1674[x1675] = 0.0;

}
double** x1679 = (double**)myMalloc(2 * sizeof(double*));
x1679[0] = x1664;
x1679[1] = x1674;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1679);
for(int x1683=0; x1683 < 150; x1683++) {
double x1684 = x1659[x1683];
double x1685 = x1664[x1683];
double x1688 = x1674[x1683];
double x1686 = 1.0 - x1685;
double x1687 = x1686 * x1685;
double x1689 = x1687 * x1688;
double x1690 = x1684 + x1689;
x1659[x1683] = x1690;

}
// backpropagate +
for(int x1695=0; x1695 < 150; x1695++) {
double x1696 = x1646[x1695];
double x1697 = x1659[x1695];
double x1698 = x1696 + x1697;
x1646[x1695] = x1698;

}
for(int x1702=0; x1702 < 150; x1702++) {
double x1703 = x221[x1702];
double x1704 = x1659[x1702];
double x1705 = x1703 + x1704;
x221[x1702] = x1705;

}
int32_t x1709 = 0;
int32_t x1710 = x1709;
int32_t x1711 = x1710;
int32_t x1712 = 0;
int32_t x1713 = x1712;
int32_t x1714 = x1713;
int32_t x1715 = 0;
int32_t x1716 = x1715;
int32_t x1717 = x1716;
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1717;
int32_t x1720 = x1719;
for(int x1721=0; x1721 < 300; x1721++) {
int32_t x1722 = x1720;
int32_t x1723 = x1722;
int32_t x1724 = x1714;
int32_t x1725 = x1724;
for(int x1726=0; x1726 < 1; x1726++) {
int32_t x1727 = x1711;
double x1728 = x216[x1727];
int32_t x1729 = x1725;
double x1730 = x1646[x1729];
int32_t x1731 = x1723;
double x1732 = x556[x1731];
double x1733 = x1730 * x1732;
double x1734 = x1728 + x1733;
x216[x1727] = x1734;
x1725 += 1;
x1723 += 300;

}
x1711 += 1;
x1720 += 1;

}
x1714 += 1;
x1717 *= 0;

}
int32_t x1748 = 0;
int32_t x1749 = x1748;
int32_t x1750 = x1749;
int32_t x1751 = 0;
int32_t x1752 = x1751;
int32_t x1753 = x1752;
int32_t x1754 = 0;
int32_t x1755 = x1754;
int32_t x1756 = x1755;
for(int x1757=0; x1757 < 1; x1757++) {
int32_t x1758 = x1756;
int32_t x1759 = x1758;
for(int x1760=0; x1760 < 300; x1760++) {
int32_t x1761 = x1759;
int32_t x1762 = x1761;
int32_t x1763 = x1753;
int32_t x1764 = x1763;
for(int x1765=0; x1765 < 150; x1765++) {
int32_t x1766 = x1750;
double x1767 = x557[x1766];
int32_t x1768 = x1764;
double x1769 = x1646[x1768];
int32_t x1770 = x1762;
double x1771 = x64[x1770];
double x1772 = x1769 * x1771;
double x1773 = x1767 + x1772;
x557[x1766] = x1773;
x1764 += 1;
x1762 += 300;

}
x1750 += 1;
x1759 += 1;

}
x1753 += 150;
x1756 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1789 = 0;
double* x1790 = (double*)myMalloc(150 * sizeof(double));
for(int x1791=0; x1791 < 150; x1791++) {
double x1792 = 0.0;
for(int x1793=0; x1793 < 150; x1793++) {
int32_t x1794 = x1789;
double x1795 = x149[x1794];
double x1796 = x527[x1793];
double x1797 = x1795 * x1796;
x1792 += x1797;
x1789 += 1;

}
double x1802 = x1792;
x1790[x1791] = x1802;

}
double* x1806 = (double*)myMalloc(150 * sizeof(double));
for(int x1807=0; x1807 < 150; x1807++) {
x1806[x1807] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1812 = 0;
double* x1813 = (double*)myMalloc(150 * sizeof(double));
for(int x1814=0; x1814 < 150; x1814++) {
double x1815 = 0.0;
for(int x1816=0; x1816 < 150; x1816++) {
int32_t x1817 = x1812;
double x1818 = x157[x1817];
double x1819 = x536[x1816];
double x1820 = x1818 * x1819;
x1815 += x1820;
x1812 += 1;

}
double x1825 = x1815;
x1813[x1814] = x1825;

}
double* x1829 = (double*)myMalloc(150 * sizeof(double));
for(int x1830=0; x1830 < 150; x1830++) {
x1829[x1830] = 0.0;

}
double* x1834 = (double*)myMalloc(150 * sizeof(double));
for(int x1835=0; x1835 < 150; x1835++) {
double x1836 = x1790[x1835];
double x1837 = x1813[x1835];
double x1838 = x1836 + x1837;
x1834[x1835] = x1838;

}
double* x1842 = (double*)myMalloc(150 * sizeof(double));
for(int x1843=0; x1843 < 150; x1843++) {
x1842[x1843] = 0.0;

}
double* x1847 = (double*)myMalloc(150 * sizeof(double));
for(int x1848=0; x1848 < 150; x1848++) {
double x1849 = x1834[x1848];
double x1850 = x165[x1848];
double x1851 = x1849 + x1850;
x1847[x1848] = x1851;

}
double* x1855 = (double*)myMalloc(150 * sizeof(double));
for(int x1856=0; x1856 < 150; x1856++) {
x1855[x1856] = 0.0;

}
double* x1860 = (double*)myMalloc(150 * sizeof(double));
for(int x1861=0; x1861 < 150; x1861++) {
double x1862 = x1847[x1861];
double x1863 = -1.0 * x1862;
double x1864 = exp(x1863);
double x1865 = x1864 + 1.0;
double x1866 = 1.0 / x1865;
x1860[x1861] = x1866;

}
double* x1870 = (double*)myMalloc(150 * sizeof(double));
for(int x1871=0; x1871 < 150; x1871++) {
x1870[x1871] = 0.0;

}
double** x1875 = (double**)myMalloc(2 * sizeof(double*));
x1875[0] = x1860;
x1875[1] = x1870;
function<void(double**)> x578 = [&](double** x579) {
double* x580 = x579[0];
double* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1182 = 0;
double* x1183 = (double*)myMalloc(150 * sizeof(double));
for(int x1184=0; x1184 < 150; x1184++) {
double x1185 = 0.0;
for(int x1186=0; x1186 < 300; x1186++) {
int32_t x1187 = x1182;
double x1188 = x77[x1187];
double x1189 = x556[x1186];
double x1190 = x1188 * x1189;
x1185 += x1190;
x1182 += 1;

}
double x1195 = x1185;
x1183[x1184] = x1195;

}
double* x1199 = (double*)myMalloc(150 * sizeof(double));
for(int x1200=0; x1200 < 150; x1200++) {
x1199[x1200] = 0.0;

}
double* x1204 = (double*)myMalloc(150 * sizeof(double));
for(int x1205=0; x1205 < 150; x1205++) {
double x1206 = x1183[x1205];
double x1207 = x85[x1205];
double x1208 = x1206 + x1207;
x1204[x1205] = x1208;

}
double* x1212 = (double*)myMalloc(150 * sizeof(double));
for(int x1213=0; x1213 < 150; x1213++) {
x1212[x1213] = 0.0;

}
double* x1217 = (double*)myMalloc(150 * sizeof(double));
for(int x1218=0; x1218 < 150; x1218++) {
double x1219 = x1204[x1218];
double x1220 = tanh(x1219);
x1217[x1218] = x1220;

}
double* x1224 = (double*)myMalloc(150 * sizeof(double));
for(int x1225=0; x1225 < 150; x1225++) {
x1224[x1225] = 0.0;

}
double** x1229 = (double**)myMalloc(2 * sizeof(double*));
x1229[0] = x1217;
x1229[1] = x1224;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1229);
// backpropagate tanh
for(int x1234=0; x1234 < 150; x1234++) {
double x1235 = x1212[x1234];
double x1236 = x1217[x1234];
double x1239 = x1224[x1234];
double x1237 = x1236 * x1236;
double x1238 = 1.0 - x1237;
double x1240 = x1238 * x1239;
double x1241 = x1235 + x1240;
x1212[x1234] = x1241;

}
// backpropagate +
for(int x1246=0; x1246 < 150; x1246++) {
double x1247 = x1199[x1246];
double x1248 = x1212[x1246];
double x1249 = x1247 + x1248;
x1199[x1246] = x1249;

}
for(int x1253=0; x1253 < 150; x1253++) {
double x1254 = x231[x1253];
double x1255 = x1212[x1253];
double x1256 = x1254 + x1255;
x231[x1253] = x1256;

}
int32_t x1260 = 0;
int32_t x1261 = x1260;
int32_t x1262 = x1261;
int32_t x1263 = 0;
int32_t x1264 = x1263;
int32_t x1265 = x1264;
int32_t x1266 = 0;
int32_t x1267 = x1266;
int32_t x1268 = x1267;
for(int x1269=0; x1269 < 150; x1269++) {
int32_t x1270 = x1268;
int32_t x1271 = x1270;
for(int x1272=0; x1272 < 300; x1272++) {
int32_t x1273 = x1271;
int32_t x1274 = x1273;
int32_t x1275 = x1265;
int32_t x1276 = x1275;
for(int x1277=0; x1277 < 1; x1277++) {
int32_t x1278 = x1262;
double x1279 = x226[x1278];
int32_t x1280 = x1276;
double x1281 = x1199[x1280];
int32_t x1282 = x1274;
double x1283 = x556[x1282];
double x1284 = x1281 * x1283;
double x1285 = x1279 + x1284;
x226[x1278] = x1285;
x1276 += 1;
x1274 += 300;

}
x1262 += 1;
x1271 += 1;

}
x1265 += 1;
x1268 *= 0;

}
int32_t x1299 = 0;
int32_t x1300 = x1299;
int32_t x1301 = x1300;
int32_t x1302 = 0;
int32_t x1303 = x1302;
int32_t x1304 = x1303;
int32_t x1305 = 0;
int32_t x1306 = x1305;
int32_t x1307 = x1306;
for(int x1308=0; x1308 < 1; x1308++) {
int32_t x1309 = x1307;
int32_t x1310 = x1309;
for(int x1311=0; x1311 < 300; x1311++) {
int32_t x1312 = x1310;
int32_t x1313 = x1312;
int32_t x1314 = x1304;
int32_t x1315 = x1314;
for(int x1316=0; x1316 < 150; x1316++) {
int32_t x1317 = x1301;
double x1318 = x557[x1317];
int32_t x1319 = x1315;
double x1320 = x1199[x1319];
int32_t x1321 = x1313;
double x1322 = x77[x1321];
double x1323 = x1320 * x1322;
double x1324 = x1318 + x1323;
x557[x1317] = x1324;
x1315 += 1;
x1313 += 300;

}
x1301 += 1;
x1310 += 1;

}
x1304 += 150;
x1307 *= 0;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1340 = 0;
double* x1341 = (double*)myMalloc(150 * sizeof(double));
for(int x1342=0; x1342 < 150; x1342++) {
double x1343 = 0.0;
for(int x1344=0; x1344 < 150; x1344++) {
int32_t x1345 = x1340;
double x1346 = x170[x1345];
double x1347 = x527[x1344];
double x1348 = x1346 * x1347;
x1343 += x1348;
x1340 += 1;

}
double x1353 = x1343;
x1341[x1342] = x1353;

}
double* x1357 = (double*)myMalloc(150 * sizeof(double));
for(int x1358=0; x1358 < 150; x1358++) {
x1357[x1358] = 0.0;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1363 = 0;
double* x1364 = (double*)myMalloc(150 * sizeof(double));
for(int x1365=0; x1365 < 150; x1365++) {
double x1366 = 0.0;
for(int x1367=0; x1367 < 150; x1367++) {
int32_t x1368 = x1363;
double x1369 = x178[x1368];
double x1370 = x536[x1367];
double x1371 = x1369 * x1370;
x1366 += x1371;
x1363 += 1;

}
double x1376 = x1366;
x1364[x1365] = x1376;

}
double* x1380 = (double*)myMalloc(150 * sizeof(double));
for(int x1381=0; x1381 < 150; x1381++) {
x1380[x1381] = 0.0;

}
double* x1385 = (double*)myMalloc(150 * sizeof(double));
for(int x1386=0; x1386 < 150; x1386++) {
double x1387 = x1341[x1386];
double x1388 = x1364[x1386];
double x1389 = x1387 + x1388;
x1385[x1386] = x1389;

}
double* x1393 = (double*)myMalloc(150 * sizeof(double));
for(int x1394=0; x1394 < 150; x1394++) {
x1393[x1394] = 0.0;

}
double* x1398 = (double*)myMalloc(150 * sizeof(double));
for(int x1399=0; x1399 < 150; x1399++) {
double x1400 = x1385[x1399];
double x1401 = x186[x1399];
double x1402 = x1400 + x1401;
x1398[x1399] = x1402;

}
double* x1406 = (double*)myMalloc(150 * sizeof(double));
for(int x1407=0; x1407 < 150; x1407++) {
x1406[x1407] = 0.0;

}
double* x1411 = (double*)myMalloc(150 * sizeof(double));
for(int x1412=0; x1412 < 150; x1412++) {
double x1413 = x1398[x1412];
double x1414 = tanh(x1413);
x1411[x1412] = x1414;

}
double* x1418 = (double*)myMalloc(150 * sizeof(double));
for(int x1419=0; x1419 < 150; x1419++) {
x1418[x1419] = 0.0;

}
double** x1423 = (double**)myMalloc(2 * sizeof(double*));
x1423[0] = x1411;
x1423[1] = x1418;
function<void(double**)> x590 = [&](double** x591) {
double* x592 = x591[0];
double* x593 = x591[1];
double* x594 = (double*)myMalloc(150 * sizeof(double));
for(int x595=0; x595 < 150; x595++) {
double x596 = x592[x595];
double x597 = tanh(x596);
x594[x595] = x597;

}
double* x601 = (double*)myMalloc(150 * sizeof(double));
for(int x602=0; x602 < 150; x602++) {
x601[x602] = 0.0;

}
double* x606 = (double*)myMalloc(150 * sizeof(double));
for(int x607=0; x607 < 150; x607++) {
double x608 = x580[x607];
double x609 = x594[x607];
double x610 = x608 * x609;
x606[x607] = x610;

}
double* x614 = (double*)myMalloc(150 * sizeof(double));
for(int x615=0; x615 < 150; x615++) {
x614[x615] = 0.0;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x620 = 0;
double* x621 = (double*)myMalloc(5 * sizeof(double));
for(int x622=0; x622 < 5; x622++) {
double x623 = 0.0;
for(int x624=0; x624 < 150; x624++) {
int32_t x625 = x620;
double x626 = x191[x625];
double x627 = x606[x624];
double x628 = x626 * x627;
x623 += x628;
x620 += 1;

}
double x633 = x623;
x621[x622] = x633;

}
double* x637 = (double*)myMalloc(5 * sizeof(double));
for(int x638=0; x638 < 5; x638++) {
x637[x638] = 0.0;

}
double* x642 = (double*)myMalloc(5 * sizeof(double));
for(int x643=0; x643 < 5; x643++) {
double x644 = x621[x643];
double x645 = x200[x643];
double x646 = x644 + x645;
x642[x643] = x646;

}
double* x650 = (double*)myMalloc(5 * sizeof(double));
for(int x651=0; x651 < 5; x651++) {
x650[x651] = 0.0;

}
double* x655 = (double*)myMalloc(5 * sizeof(double));
for(int x656=0; x656 < 5; x656++) {
double x657 = x642[x656];
double x658 = exp(x657);
x655[x656] = x658;

}
double* x662 = (double*)myMalloc(5 * sizeof(double));
for(int x663=0; x663 < 5; x663++) {
x662[x663] = 0.0;

}
double x667 = 0.0;
for(int x668=0; x668 < 5; x668++) {
double x669 = x667;
double x670 = x655[x668];
double x671 = x669 + x670;
x667 = x671;

}
double x675 = x667;
double* x676 = (double*)myMalloc(1 * sizeof(double));
x676[0] = x675;
double* x678 = (double*)myMalloc(1 * sizeof(double));
for(int x679=0; x679 < 1; x679++) {
x678[x679] = 0.0;

}
double x683 = x676[0];
double* x684 = (double*)myMalloc(5 * sizeof(double));
for(int x685=0; x685 < 5; x685++) {
double x686 = x655[x685];
double x687 = x686 / x683;
x684[x685] = x687;

}
double* x691 = (double*)myMalloc(5 * sizeof(double));
for(int x692=0; x692 < 5; x692++) {
x691[x692] = 0.0;

}
double x696 = x525[0];
double* x697 = (double*)myMalloc(1 * sizeof(double));
for(int x698=0; x698 < 1; x698++) {
double x699 = x534[x698];
double x700 = x699 + x696;
x697[x698] = x700;

}
double* x704 = (double*)myMalloc(1 * sizeof(double));
for(int x705=0; x705 < 1; x705++) {
x704[x705] = 0.0;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x710 = 0;
double* x711 = (double*)myMalloc(1 * sizeof(double));
for(int x712=0; x712 < 1; x712++) {
double x713 = 0.0;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x710;
double x716 = x684[x715];
double x717 = x540[x714];
double x718 = x716 * x717;
x713 += x718;
x710 += 1;

}
double x723 = x713;
x711[x712] = x723;

}
double* x727 = (double*)myMalloc(1 * sizeof(double));
for(int x728=0; x728 < 1; x728++) {
x727[x728] = 0.0;

}
double* x732 = (double*)myMalloc(1 * sizeof(double));
for(int x733=0; x733 < 1; x733++) {
double x734 = x711[x733];
double x735 = log(x734);
x732[x733] = x735;

}
double* x739 = (double*)myMalloc(1 * sizeof(double));
for(int x740=0; x740 < 1; x740++) {
x739[x740] = 0.0;

}
double* x744 = (double*)myMalloc(1 * sizeof(double));
for(int x745=0; x745 < 1; x745++) {
double x746 = x732[x745];
double x747 = x697[0];
double x748 = x747 - x746;
x744[x745] = x748;

}
double* x752 = (double*)myMalloc(1 * sizeof(double));
for(int x753=0; x753 < 1; x753++) {
x752[x753] = 0.0;

}
double** x757 = (double**)myMalloc(6 * sizeof(double*));
x757[0] = x744;
x757[1] = x752;
x757[2] = x606;
x757[3] = x614;
x757[4] = x592;
x757[5] = x593;
x513(x757);
// += tensor of dim 0
double x766 = x752[0];
for(int x767=0; x767 < 1; x767++) {
double x768 = x704[x767];
double x769 = x768 + x766;
x704[x767] = x769;

}
double x773 = x752[0];
for(int x774=0; x774 < 1; x774++) {
double x775 = x739[x774];
double x776 = x775 - x773;
x739[x774] = x776;

}
for(int x780=0; x780 < 1; x780++) {
double x781 = x727[0];
double x782 = x739[0];
double x783 = x711[0];
double x784 = x782 / x783;
double x785 = x781 + x784;
x727[0] = x785;

}
double x789 = x727[0];
// Generate code for addMul
for(int x791=0; x791 < 5; x791++) {
double x792 = x691[x791];
double x793 = x540[x791];
double x794 = x789 * x793;
double x795 = x792 + x794;
x691[x791] = x795;

}
double x799 = x727[0];
// Generate code for addMul
for(int x801=0; x801 < 5; x801++) {
double x802 = x547[x801];
double x803 = x684[x801];
double x804 = x799 * x803;
double x805 = x802 + x804;
x547[x801] = x805;

}
// backpropagate +
// += tensor of dim 0
double x811 = x704[0];
for(int x812=0; x812 < 1; x812++) {
double x813 = x526[x812];
double x814 = x813 + x811;
x526[x812] = x814;

}
// += tensor of dim 0
double x819 = x704[0];
for(int x820=0; x820 < 1; x820++) {
double x821 = x535[x820];
double x822 = x821 + x819;
x535[x820] = x822;

}
for(int x826=0; x826 < 5; x826++) {
double x827 = x662[x826];
double x828 = x691[x826];
double x829 = x676[0];
double x830 = x828 / x829;
double x831 = x827 + x830;
x662[x826] = x831;

}
for(int x835=0; x835 < 5; x835++) {
double x836 = x678[0];
double x837 = x655[x835];
double x838 = x691[x835];
double x840 = x676[0];
double x839 = x837 * x838;
double x841 = x840 * x840;
double x842 = x839 / x841;
double x843 = x836 - x842;
x678[0] = x843;

}
// += tensor of dim 0
double x848 = x678[0];
for(int x849=0; x849 < 5; x849++) {
double x850 = x662[x849];
double x851 = x850 + x848;
x662[x849] = x851;

}
// backpropage exp
for(int x856=0; x856 < 5; x856++) {
double x857 = x650[x856];
double x858 = x655[x856];
double x859 = x662[x856];
double x860 = x858 * x859;
double x861 = x857 + x860;
x650[x856] = x861;

}
// backpropagate +
for(int x866=0; x866 < 5; x866++) {
double x867 = x637[x866];
double x868 = x650[x866];
double x869 = x867 + x868;
x637[x866] = x869;

}
for(int x873=0; x873 < 5; x873++) {
double x874 = x311[x873];
double x875 = x650[x873];
double x876 = x874 + x875;
x311[x873] = x876;

}
int32_t x880 = 0;
int32_t x881 = x880;
int32_t x882 = x881;
int32_t x883 = 0;
int32_t x884 = x883;
int32_t x885 = x884;
int32_t x886 = 0;
int32_t x887 = x886;
int32_t x888 = x887;
for(int x889=0; x889 < 5; x889++) {
int32_t x890 = x888;
int32_t x891 = x890;
for(int x892=0; x892 < 150; x892++) {
int32_t x893 = x891;
int32_t x894 = x893;
int32_t x895 = x885;
int32_t x896 = x895;
for(int x897=0; x897 < 1; x897++) {
int32_t x898 = x882;
double x899 = x306[x898];
int32_t x900 = x896;
double x901 = x637[x900];
int32_t x902 = x894;
double x903 = x606[x902];
double x904 = x901 * x903;
double x905 = x899 + x904;
x306[x898] = x905;
x896 += 1;
x894 += 150;

}
x882 += 1;
x891 += 1;

}
x885 += 1;
x888 *= 0;

}
int32_t x919 = 0;
int32_t x920 = x919;
int32_t x921 = x920;
int32_t x922 = 0;
int32_t x923 = x922;
int32_t x924 = x923;
int32_t x925 = 0;
int32_t x926 = x925;
int32_t x927 = x926;
for(int x928=0; x928 < 1; x928++) {
int32_t x929 = x927;
int32_t x930 = x929;
for(int x931=0; x931 < 150; x931++) {
int32_t x932 = x930;
int32_t x933 = x932;
int32_t x934 = x924;
int32_t x935 = x934;
for(int x936=0; x936 < 5; x936++) {
int32_t x937 = x921;
double x938 = x614[x937];
int32_t x939 = x935;
double x940 = x637[x939];
int32_t x941 = x933;
double x942 = x191[x941];
double x943 = x940 * x942;
double x944 = x938 + x943;
x614[x937] = x944;
x935 += 1;
x933 += 150;

}
x921 += 1;
x930 += 1;

}
x924 += 5;
x927 *= 0;

}
for(int x958=0; x958 < 150; x958++) {
double x959 = x581[x958];
double x960 = x594[x958];
double x961 = x614[x958];
double x962 = x960 * x961;
double x963 = x959 + x962;
x581[x958] = x963;

}
for(int x967=0; x967 < 150; x967++) {
double x968 = x601[x967];
double x969 = x580[x967];
double x970 = x614[x967];
double x971 = x969 * x970;
double x972 = x968 + x971;
x601[x967] = x972;

}
// backpropagate tanh
for(int x977=0; x977 < 150; x977++) {
double x978 = x593[x977];
double x979 = x594[x977];
double x982 = x601[x977];
double x980 = x979 * x979;
double x981 = 1.0 - x980;
double x983 = x981 * x982;
double x984 = x978 + x983;
x593[x977] = x984;

}
};
function<void(double**)> x584 = [&](double** x585) {
double* x586 = x585[0];
double* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
double* x989 = (double*)myMalloc(150 * sizeof(double));
for(int x990=0; x990 < 150; x990++) {
double x991 = x562[x990];
double x992 = x586[x990];
double x993 = x991 * x992;
x989[x990] = x993;

}
double* x997 = (double*)myMalloc(150 * sizeof(double));
for(int x998=0; x998 < 150; x998++) {
x997[x998] = 0.0;

}
double** x1002 = (double**)myMalloc(2 * sizeof(double*));
x1002[0] = x989;
x1002[1] = x997;
x590(x1002);
for(int x1006=0; x1006 < 150; x1006++) {
double x1007 = x563[x1006];
double x1008 = x586[x1006];
double x1009 = x997[x1006];
double x1010 = x1008 * x1009;
double x1011 = x1007 + x1010;
x563[x1006] = x1011;

}
for(int x1015=0; x1015 < 150; x1015++) {
double x1016 = x587[x1015];
double x1017 = x562[x1015];
double x1018 = x997[x1015];
double x1019 = x1017 * x1018;
double x1020 = x1016 + x1019;
x587[x1015] = x1020;

}
} else {
double* x1025 = (double*)myMalloc(150 * sizeof(double));
for(int x1026=0; x1026 < 150; x1026++) {
double x1027 = x562[x1026];
double x1028 = x586[x1026];
double x1029 = x1027 * x1028;
x1025[x1026] = x1029;

}
double* x1033 = (double*)myMalloc(150 * sizeof(double));
for(int x1034=0; x1034 < 150; x1034++) {
x1033[x1034] = 0.0;

}
double* x1038 = (double*)myMalloc(150 * sizeof(double));
for(int x1039=0; x1039 < 150; x1039++) {
double x1040 = x568[x1039];
double x1041 = x529[x1039];
double x1042 = x1040 * x1041;
x1038[x1039] = x1042;

}
double* x1046 = (double*)myMalloc(150 * sizeof(double));
for(int x1047=0; x1047 < 150; x1047++) {
x1046[x1047] = 0.0;

}
double* x1051 = (double*)myMalloc(150 * sizeof(double));
for(int x1052=0; x1052 < 150; x1052++) {
double x1053 = x1025[x1052];
double x1054 = x1038[x1052];
double x1055 = x1053 + x1054;
x1051[x1052] = x1055;

}
double* x1059 = (double*)myMalloc(150 * sizeof(double));
for(int x1060=0; x1060 < 150; x1060++) {
x1059[x1060] = 0.0;

}
double* x1064 = (double*)myMalloc(150 * sizeof(double));
for(int x1065=0; x1065 < 150; x1065++) {
double x1066 = x574[x1065];
double x1067 = x538[x1065];
double x1068 = x1066 * x1067;
x1064[x1065] = x1068;

}
double* x1072 = (double*)myMalloc(150 * sizeof(double));
for(int x1073=0; x1073 < 150; x1073++) {
x1072[x1073] = 0.0;

}
double* x1077 = (double*)myMalloc(150 * sizeof(double));
for(int x1078=0; x1078 < 150; x1078++) {
double x1079 = x1051[x1078];
double x1080 = x1064[x1078];
double x1081 = x1079 + x1080;
x1077[x1078] = x1081;

}
double* x1085 = (double*)myMalloc(150 * sizeof(double));
for(int x1086=0; x1086 < 150; x1086++) {
x1085[x1086] = 0.0;

}
double** x1090 = (double**)myMalloc(2 * sizeof(double*));
x1090[0] = x1077;
x1090[1] = x1085;
x590(x1090);
// backpropagate +
for(int x1095=0; x1095 < 150; x1095++) {
double x1096 = x1059[x1095];
double x1097 = x1085[x1095];
double x1098 = x1096 + x1097;
x1059[x1095] = x1098;

}
for(int x1102=0; x1102 < 150; x1102++) {
double x1103 = x1072[x1102];
double x1104 = x1085[x1102];
double x1105 = x1103 + x1104;
x1072[x1102] = x1105;

}
for(int x1109=0; x1109 < 150; x1109++) {
double x1110 = x575[x1109];
double x1111 = x538[x1109];
double x1112 = x1072[x1109];
double x1113 = x1111 * x1112;
double x1114 = x1110 + x1113;
x575[x1109] = x1114;

}
for(int x1118=0; x1118 < 150; x1118++) {
double x1119 = x539[x1118];
double x1120 = x574[x1118];
double x1121 = x1072[x1118];
double x1122 = x1120 * x1121;
double x1123 = x1119 + x1122;
x539[x1118] = x1123;

}
// backpropagate +
for(int x1128=0; x1128 < 150; x1128++) {
double x1129 = x1033[x1128];
double x1130 = x1059[x1128];
double x1131 = x1129 + x1130;
x1033[x1128] = x1131;

}
for(int x1135=0; x1135 < 150; x1135++) {
double x1136 = x1046[x1135];
double x1137 = x1059[x1135];
double x1138 = x1136 + x1137;
x1046[x1135] = x1138;

}
for(int x1142=0; x1142 < 150; x1142++) {
double x1143 = x569[x1142];
double x1144 = x529[x1142];
double x1145 = x1046[x1142];
double x1146 = x1144 * x1145;
double x1147 = x1143 + x1146;
x569[x1142] = x1147;

}
for(int x1151=0; x1151 < 150; x1151++) {
double x1152 = x530[x1151];
double x1153 = x568[x1151];
double x1154 = x1046[x1151];
double x1155 = x1153 * x1154;
double x1156 = x1152 + x1155;
x530[x1151] = x1156;

}
for(int x1160=0; x1160 < 150; x1160++) {
double x1161 = x563[x1160];
double x1162 = x586[x1160];
double x1163 = x1033[x1160];
double x1164 = x1162 * x1163;
double x1165 = x1161 + x1164;
x563[x1160] = x1165;

}
for(int x1169=0; x1169 < 150; x1169++) {
double x1170 = x587[x1169];
double x1171 = x562[x1169];
double x1172 = x1033[x1169];
double x1173 = x1171 * x1172;
double x1174 = x1170 + x1173;
x587[x1169] = x1174;

}
}
};
x584(x1423);
// backpropagate tanh
for(int x1428=0; x1428 < 150; x1428++) {
double x1429 = x1406[x1428];
double x1430 = x1411[x1428];
double x1433 = x1418[x1428];
double x1431 = x1430 * x1430;
double x1432 = 1.0 - x1431;
double x1434 = x1432 * x1433;
double x1435 = x1429 + x1434;
x1406[x1428] = x1435;

}
// backpropagate +
for(int x1440=0; x1440 < 150; x1440++) {
double x1441 = x1393[x1440];
double x1442 = x1406[x1440];
double x1443 = x1441 + x1442;
x1393[x1440] = x1443;

}
for(int x1447=0; x1447 < 150; x1447++) {
double x1448 = x301[x1447];
double x1449 = x1406[x1447];
double x1450 = x1448 + x1449;
x301[x1447] = x1450;

}
// backpropagate +
for(int x1455=0; x1455 < 150; x1455++) {
double x1456 = x1357[x1455];
double x1457 = x1393[x1455];
double x1458 = x1456 + x1457;
x1357[x1455] = x1458;

}
for(int x1462=0; x1462 < 150; x1462++) {
double x1463 = x1380[x1462];
double x1464 = x1393[x1462];
double x1465 = x1463 + x1464;
x1380[x1462] = x1465;

}
int32_t x1469 = 0;
int32_t x1470 = x1469;
int32_t x1471 = x1470;
int32_t x1472 = 0;
int32_t x1473 = x1472;
int32_t x1474 = x1473;
int32_t x1475 = 0;
int32_t x1476 = x1475;
int32_t x1477 = x1476;
for(int x1478=0; x1478 < 150; x1478++) {
int32_t x1479 = x1477;
int32_t x1480 = x1479;
for(int x1481=0; x1481 < 150; x1481++) {
int32_t x1482 = x1480;
int32_t x1483 = x1482;
int32_t x1484 = x1474;
int32_t x1485 = x1484;
for(int x1486=0; x1486 < 1; x1486++) {
int32_t x1487 = x1471;
double x1488 = x296[x1487];
int32_t x1489 = x1485;
double x1490 = x1380[x1489];
int32_t x1491 = x1483;
double x1492 = x536[x1491];
double x1493 = x1490 * x1492;
double x1494 = x1488 + x1493;
x296[x1487] = x1494;
x1485 += 1;
x1483 += 150;

}
x1471 += 1;
x1480 += 1;

}
x1474 += 1;
x1477 *= 0;

}
int32_t x1508 = 0;
int32_t x1509 = x1508;
int32_t x1510 = x1509;
int32_t x1511 = 0;
int32_t x1512 = x1511;
int32_t x1513 = x1512;
int32_t x1514 = 0;
int32_t x1515 = x1514;
int32_t x1516 = x1515;
for(int x1517=0; x1517 < 1; x1517++) {
int32_t x1518 = x1516;
int32_t x1519 = x1518;
for(int x1520=0; x1520 < 150; x1520++) {
int32_t x1521 = x1519;
int32_t x1522 = x1521;
int32_t x1523 = x1513;
int32_t x1524 = x1523;
for(int x1525=0; x1525 < 150; x1525++) {
int32_t x1526 = x1510;
double x1527 = x537[x1526];
int32_t x1528 = x1524;
double x1529 = x1380[x1528];
int32_t x1530 = x1522;
double x1531 = x178[x1530];
double x1532 = x1529 * x1531;
double x1533 = x1527 + x1532;
x537[x1526] = x1533;
x1524 += 1;
x1522 += 150;

}
x1510 += 1;
x1519 += 1;

}
x1513 += 150;
x1516 *= 0;

}
int32_t x1547 = 0;
int32_t x1548 = x1547;
int32_t x1549 = x1548;
int32_t x1550 = 0;
int32_t x1551 = x1550;
int32_t x1552 = x1551;
int32_t x1553 = 0;
int32_t x1554 = x1553;
int32_t x1555 = x1554;
for(int x1556=0; x1556 < 150; x1556++) {
int32_t x1557 = x1555;
int32_t x1558 = x1557;
for(int x1559=0; x1559 < 150; x1559++) {
int32_t x1560 = x1558;
int32_t x1561 = x1560;
int32_t x1562 = x1552;
int32_t x1563 = x1562;
for(int x1564=0; x1564 < 1; x1564++) {
int32_t x1565 = x1549;
double x1566 = x291[x1565];
int32_t x1567 = x1563;
double x1568 = x1357[x1567];
int32_t x1569 = x1561;
double x1570 = x527[x1569];
double x1571 = x1568 * x1570;
double x1572 = x1566 + x1571;
x291[x1565] = x1572;
x1563 += 1;
x1561 += 150;

}
x1549 += 1;
x1558 += 1;

}
x1552 += 1;
x1555 *= 0;

}
int32_t x1586 = 0;
int32_t x1587 = x1586;
int32_t x1588 = x1587;
int32_t x1589 = 0;
int32_t x1590 = x1589;
int32_t x1591 = x1590;
int32_t x1592 = 0;
int32_t x1593 = x1592;
int32_t x1594 = x1593;
for(int x1595=0; x1595 < 1; x1595++) {
int32_t x1596 = x1594;
int32_t x1597 = x1596;
for(int x1598=0; x1598 < 150; x1598++) {
int32_t x1599 = x1597;
int32_t x1600 = x1599;
int32_t x1601 = x1591;
int32_t x1602 = x1601;
for(int x1603=0; x1603 < 150; x1603++) {
int32_t x1604 = x1588;
double x1605 = x528[x1604];
int32_t x1606 = x1602;
double x1607 = x1357[x1606];
int32_t x1608 = x1600;
double x1609 = x170[x1608];
double x1610 = x1607 * x1609;
double x1611 = x1605 + x1610;
x528[x1604] = x1611;
x1602 += 1;
x1600 += 150;

}
x1588 += 1;
x1597 += 1;

}
x1591 += 150;
x1594 *= 0;

}
}
};
x578(x1875);
for(int x1879=0; x1879 < 150; x1879++) {
double x1880 = x1855[x1879];
double x1881 = x1860[x1879];
double x1884 = x1870[x1879];
double x1882 = 1.0 - x1881;
double x1883 = x1882 * x1881;
double x1885 = x1883 * x1884;
double x1886 = x1880 + x1885;
x1855[x1879] = x1886;

}
// backpropagate +
for(int x1891=0; x1891 < 150; x1891++) {
double x1892 = x1842[x1891];
double x1893 = x1855[x1891];
double x1894 = x1892 + x1893;
x1842[x1891] = x1894;

}
for(int x1898=0; x1898 < 150; x1898++) {
double x1899 = x286[x1898];
double x1900 = x1855[x1898];
double x1901 = x1899 + x1900;
x286[x1898] = x1901;

}
// backpropagate +
for(int x1906=0; x1906 < 150; x1906++) {
double x1907 = x1806[x1906];
double x1908 = x1842[x1906];
double x1909 = x1907 + x1908;
x1806[x1906] = x1909;

}
for(int x1913=0; x1913 < 150; x1913++) {
double x1914 = x1829[x1913];
double x1915 = x1842[x1913];
double x1916 = x1914 + x1915;
x1829[x1913] = x1916;

}
int32_t x1920 = 0;
int32_t x1921 = x1920;
int32_t x1922 = x1921;
int32_t x1923 = 0;
int32_t x1924 = x1923;
int32_t x1925 = x1924;
int32_t x1926 = 0;
int32_t x1927 = x1926;
int32_t x1928 = x1927;
for(int x1929=0; x1929 < 150; x1929++) {
int32_t x1930 = x1928;
int32_t x1931 = x1930;
for(int x1932=0; x1932 < 150; x1932++) {
int32_t x1933 = x1931;
int32_t x1934 = x1933;
int32_t x1935 = x1925;
int32_t x1936 = x1935;
for(int x1937=0; x1937 < 1; x1937++) {
int32_t x1938 = x1922;
double x1939 = x281[x1938];
int32_t x1940 = x1936;
double x1941 = x1829[x1940];
int32_t x1942 = x1934;
double x1943 = x536[x1942];
double x1944 = x1941 * x1943;
double x1945 = x1939 + x1944;
x281[x1938] = x1945;
x1936 += 1;
x1934 += 150;

}
x1922 += 1;
x1931 += 1;

}
x1925 += 1;
x1928 *= 0;

}
int32_t x1959 = 0;
int32_t x1960 = x1959;
int32_t x1961 = x1960;
int32_t x1962 = 0;
int32_t x1963 = x1962;
int32_t x1964 = x1963;
int32_t x1965 = 0;
int32_t x1966 = x1965;
int32_t x1967 = x1966;
for(int x1968=0; x1968 < 1; x1968++) {
int32_t x1969 = x1967;
int32_t x1970 = x1969;
for(int x1971=0; x1971 < 150; x1971++) {
int32_t x1972 = x1970;
int32_t x1973 = x1972;
int32_t x1974 = x1964;
int32_t x1975 = x1974;
for(int x1976=0; x1976 < 150; x1976++) {
int32_t x1977 = x1961;
double x1978 = x537[x1977];
int32_t x1979 = x1975;
double x1980 = x1829[x1979];
int32_t x1981 = x1973;
double x1982 = x157[x1981];
double x1983 = x1980 * x1982;
double x1984 = x1978 + x1983;
x537[x1977] = x1984;
x1975 += 1;
x1973 += 150;

}
x1961 += 1;
x1970 += 1;

}
x1964 += 150;
x1967 *= 0;

}
int32_t x1998 = 0;
int32_t x1999 = x1998;
int32_t x2000 = x1999;
int32_t x2001 = 0;
int32_t x2002 = x2001;
int32_t x2003 = x2002;
int32_t x2004 = 0;
int32_t x2005 = x2004;
int32_t x2006 = x2005;
for(int x2007=0; x2007 < 150; x2007++) {
int32_t x2008 = x2006;
int32_t x2009 = x2008;
for(int x2010=0; x2010 < 150; x2010++) {
int32_t x2011 = x2009;
int32_t x2012 = x2011;
int32_t x2013 = x2003;
int32_t x2014 = x2013;
for(int x2015=0; x2015 < 1; x2015++) {
int32_t x2016 = x2000;
double x2017 = x276[x2016];
int32_t x2018 = x2014;
double x2019 = x1806[x2018];
int32_t x2020 = x2012;
double x2021 = x527[x2020];
double x2022 = x2019 * x2021;
double x2023 = x2017 + x2022;
x276[x2016] = x2023;
x2014 += 1;
x2012 += 150;

}
x2000 += 1;
x2009 += 1;

}
x2003 += 1;
x2006 *= 0;

}
int32_t x2037 = 0;
int32_t x2038 = x2037;
int32_t x2039 = x2038;
int32_t x2040 = 0;
int32_t x2041 = x2040;
int32_t x2042 = x2041;
int32_t x2043 = 0;
int32_t x2044 = x2043;
int32_t x2045 = x2044;
for(int x2046=0; x2046 < 1; x2046++) {
int32_t x2047 = x2045;
int32_t x2048 = x2047;
for(int x2049=0; x2049 < 150; x2049++) {
int32_t x2050 = x2048;
int32_t x2051 = x2050;
int32_t x2052 = x2042;
int32_t x2053 = x2052;
for(int x2054=0; x2054 < 150; x2054++) {
int32_t x2055 = x2039;
double x2056 = x528[x2055];
int32_t x2057 = x2053;
double x2058 = x1806[x2057];
int32_t x2059 = x2051;
double x2060 = x149[x2059];
double x2061 = x2058 * x2060;
double x2062 = x2056 + x2061;
x528[x2055] = x2062;
x2053 += 1;
x2051 += 150;

}
x2039 += 1;
x2048 += 1;

}
x2042 += 150;
x2045 *= 0;

}
}
};
x572(x2171);
for(int x2175=0; x2175 < 150; x2175++) {
double x2176 = x2151[x2175];
double x2177 = x2156[x2175];
double x2180 = x2166[x2175];
double x2178 = 1.0 - x2177;
double x2179 = x2178 * x2177;
double x2181 = x2179 * x2180;
double x2182 = x2176 + x2181;
x2151[x2175] = x2182;

}
// backpropagate +
for(int x2187=0; x2187 < 150; x2187++) {
double x2188 = x2138[x2187];
double x2189 = x2151[x2187];
double x2190 = x2188 + x2189;
x2138[x2187] = x2190;

}
for(int x2194=0; x2194 < 150; x2194++) {
double x2195 = x271[x2194];
double x2196 = x2151[x2194];
double x2197 = x2195 + x2196;
x271[x2194] = x2197;

}
// backpropagate +
for(int x2202=0; x2202 < 150; x2202++) {
double x2203 = x2102[x2202];
double x2204 = x2138[x2202];
double x2205 = x2203 + x2204;
x2102[x2202] = x2205;

}
for(int x2209=0; x2209 < 150; x2209++) {
double x2210 = x2125[x2209];
double x2211 = x2138[x2209];
double x2212 = x2210 + x2211;
x2125[x2209] = x2212;

}
int32_t x2216 = 0;
int32_t x2217 = x2216;
int32_t x2218 = x2217;
int32_t x2219 = 0;
int32_t x2220 = x2219;
int32_t x2221 = x2220;
int32_t x2222 = 0;
int32_t x2223 = x2222;
int32_t x2224 = x2223;
for(int x2225=0; x2225 < 150; x2225++) {
int32_t x2226 = x2224;
int32_t x2227 = x2226;
for(int x2228=0; x2228 < 150; x2228++) {
int32_t x2229 = x2227;
int32_t x2230 = x2229;
int32_t x2231 = x2221;
int32_t x2232 = x2231;
for(int x2233=0; x2233 < 1; x2233++) {
int32_t x2234 = x2218;
double x2235 = x266[x2234];
int32_t x2236 = x2232;
double x2237 = x2125[x2236];
int32_t x2238 = x2230;
double x2239 = x536[x2238];
double x2240 = x2237 * x2239;
double x2241 = x2235 + x2240;
x266[x2234] = x2241;
x2232 += 1;
x2230 += 150;

}
x2218 += 1;
x2227 += 1;

}
x2221 += 1;
x2224 *= 0;

}
int32_t x2255 = 0;
int32_t x2256 = x2255;
int32_t x2257 = x2256;
int32_t x2258 = 0;
int32_t x2259 = x2258;
int32_t x2260 = x2259;
int32_t x2261 = 0;
int32_t x2262 = x2261;
int32_t x2263 = x2262;
for(int x2264=0; x2264 < 1; x2264++) {
int32_t x2265 = x2263;
int32_t x2266 = x2265;
for(int x2267=0; x2267 < 150; x2267++) {
int32_t x2268 = x2266;
int32_t x2269 = x2268;
int32_t x2270 = x2260;
int32_t x2271 = x2270;
for(int x2272=0; x2272 < 150; x2272++) {
int32_t x2273 = x2257;
double x2274 = x537[x2273];
int32_t x2275 = x2271;
double x2276 = x2125[x2275];
int32_t x2277 = x2269;
double x2278 = x136[x2277];
double x2279 = x2276 * x2278;
double x2280 = x2274 + x2279;
x537[x2273] = x2280;
x2271 += 1;
x2269 += 150;

}
x2257 += 1;
x2266 += 1;

}
x2260 += 150;
x2263 *= 0;

}
int32_t x2294 = 0;
int32_t x2295 = x2294;
int32_t x2296 = x2295;
int32_t x2297 = 0;
int32_t x2298 = x2297;
int32_t x2299 = x2298;
int32_t x2300 = 0;
int32_t x2301 = x2300;
int32_t x2302 = x2301;
for(int x2303=0; x2303 < 150; x2303++) {
int32_t x2304 = x2302;
int32_t x2305 = x2304;
for(int x2306=0; x2306 < 150; x2306++) {
int32_t x2307 = x2305;
int32_t x2308 = x2307;
int32_t x2309 = x2299;
int32_t x2310 = x2309;
for(int x2311=0; x2311 < 1; x2311++) {
int32_t x2312 = x2296;
double x2313 = x261[x2312];
int32_t x2314 = x2310;
double x2315 = x2102[x2314];
int32_t x2316 = x2308;
double x2317 = x527[x2316];
double x2318 = x2315 * x2317;
double x2319 = x2313 + x2318;
x261[x2312] = x2319;
x2310 += 1;
x2308 += 150;

}
x2296 += 1;
x2305 += 1;

}
x2299 += 1;
x2302 *= 0;

}
int32_t x2333 = 0;
int32_t x2334 = x2333;
int32_t x2335 = x2334;
int32_t x2336 = 0;
int32_t x2337 = x2336;
int32_t x2338 = x2337;
int32_t x2339 = 0;
int32_t x2340 = x2339;
int32_t x2341 = x2340;
for(int x2342=0; x2342 < 1; x2342++) {
int32_t x2343 = x2341;
int32_t x2344 = x2343;
for(int x2345=0; x2345 < 150; x2345++) {
int32_t x2346 = x2344;
int32_t x2347 = x2346;
int32_t x2348 = x2338;
int32_t x2349 = x2348;
for(int x2350=0; x2350 < 150; x2350++) {
int32_t x2351 = x2335;
double x2352 = x528[x2351];
int32_t x2353 = x2349;
double x2354 = x2102[x2353];
int32_t x2355 = x2347;
double x2356 = x128[x2355];
double x2357 = x2354 * x2356;
double x2358 = x2352 + x2357;
x528[x2351] = x2358;
x2349 += 1;
x2347 += 150;

}
x2335 += 1;
x2344 += 1;

}
x2338 += 150;
x2341 *= 0;

}
}
};
x566(x2467);
for(int x2471=0; x2471 < 150; x2471++) {
double x2472 = x2447[x2471];
double x2473 = x2452[x2471];
double x2476 = x2462[x2471];
double x2474 = 1.0 - x2473;
double x2475 = x2474 * x2473;
double x2477 = x2475 * x2476;
double x2478 = x2472 + x2477;
x2447[x2471] = x2478;

}
// backpropagate +
for(int x2483=0; x2483 < 150; x2483++) {
double x2484 = x2434[x2483];
double x2485 = x2447[x2483];
double x2486 = x2484 + x2485;
x2434[x2483] = x2486;

}
for(int x2490=0; x2490 < 150; x2490++) {
double x2491 = x271[x2490];
double x2492 = x2447[x2490];
double x2493 = x2491 + x2492;
x271[x2490] = x2493;

}
// backpropagate +
for(int x2498=0; x2498 < 150; x2498++) {
double x2499 = x2398[x2498];
double x2500 = x2434[x2498];
double x2501 = x2499 + x2500;
x2398[x2498] = x2501;

}
for(int x2505=0; x2505 < 150; x2505++) {
double x2506 = x2421[x2505];
double x2507 = x2434[x2505];
double x2508 = x2506 + x2507;
x2421[x2505] = x2508;

}
int32_t x2512 = 0;
int32_t x2513 = x2512;
int32_t x2514 = x2513;
int32_t x2515 = 0;
int32_t x2516 = x2515;
int32_t x2517 = x2516;
int32_t x2518 = 0;
int32_t x2519 = x2518;
int32_t x2520 = x2519;
for(int x2521=0; x2521 < 150; x2521++) {
int32_t x2522 = x2520;
int32_t x2523 = x2522;
for(int x2524=0; x2524 < 150; x2524++) {
int32_t x2525 = x2523;
int32_t x2526 = x2525;
int32_t x2527 = x2517;
int32_t x2528 = x2527;
for(int x2529=0; x2529 < 1; x2529++) {
int32_t x2530 = x2514;
double x2531 = x256[x2530];
int32_t x2532 = x2528;
double x2533 = x2421[x2532];
int32_t x2534 = x2526;
double x2535 = x536[x2534];
double x2536 = x2533 * x2535;
double x2537 = x2531 + x2536;
x256[x2530] = x2537;
x2528 += 1;
x2526 += 150;

}
x2514 += 1;
x2523 += 1;

}
x2517 += 1;
x2520 *= 0;

}
int32_t x2551 = 0;
int32_t x2552 = x2551;
int32_t x2553 = x2552;
int32_t x2554 = 0;
int32_t x2555 = x2554;
int32_t x2556 = x2555;
int32_t x2557 = 0;
int32_t x2558 = x2557;
int32_t x2559 = x2558;
for(int x2560=0; x2560 < 1; x2560++) {
int32_t x2561 = x2559;
int32_t x2562 = x2561;
for(int x2563=0; x2563 < 150; x2563++) {
int32_t x2564 = x2562;
int32_t x2565 = x2564;
int32_t x2566 = x2556;
int32_t x2567 = x2566;
for(int x2568=0; x2568 < 150; x2568++) {
int32_t x2569 = x2553;
double x2570 = x537[x2569];
int32_t x2571 = x2567;
double x2572 = x2421[x2571];
int32_t x2573 = x2565;
double x2574 = x120[x2573];
double x2575 = x2572 * x2574;
double x2576 = x2570 + x2575;
x537[x2569] = x2576;
x2567 += 1;
x2565 += 150;

}
x2553 += 1;
x2562 += 1;

}
x2556 += 150;
x2559 *= 0;

}
int32_t x2590 = 0;
int32_t x2591 = x2590;
int32_t x2592 = x2591;
int32_t x2593 = 0;
int32_t x2594 = x2593;
int32_t x2595 = x2594;
int32_t x2596 = 0;
int32_t x2597 = x2596;
int32_t x2598 = x2597;
for(int x2599=0; x2599 < 150; x2599++) {
int32_t x2600 = x2598;
int32_t x2601 = x2600;
for(int x2602=0; x2602 < 150; x2602++) {
int32_t x2603 = x2601;
int32_t x2604 = x2603;
int32_t x2605 = x2595;
int32_t x2606 = x2605;
for(int x2607=0; x2607 < 1; x2607++) {
int32_t x2608 = x2592;
double x2609 = x251[x2608];
int32_t x2610 = x2606;
double x2611 = x2398[x2610];
int32_t x2612 = x2604;
double x2613 = x527[x2612];
double x2614 = x2611 * x2613;
double x2615 = x2609 + x2614;
x251[x2608] = x2615;
x2606 += 1;
x2604 += 150;

}
x2592 += 1;
x2601 += 1;

}
x2595 += 1;
x2598 *= 0;

}
int32_t x2629 = 0;
int32_t x2630 = x2629;
int32_t x2631 = x2630;
int32_t x2632 = 0;
int32_t x2633 = x2632;
int32_t x2634 = x2633;
int32_t x2635 = 0;
int32_t x2636 = x2635;
int32_t x2637 = x2636;
for(int x2638=0; x2638 < 1; x2638++) {
int32_t x2639 = x2637;
int32_t x2640 = x2639;
for(int x2641=0; x2641 < 150; x2641++) {
int32_t x2642 = x2640;
int32_t x2643 = x2642;
int32_t x2644 = x2634;
int32_t x2645 = x2644;
for(int x2646=0; x2646 < 150; x2646++) {
int32_t x2647 = x2631;
double x2648 = x528[x2647];
int32_t x2649 = x2645;
double x2650 = x2398[x2649];
int32_t x2651 = x2643;
double x2652 = x112[x2651];
double x2653 = x2650 * x2652;
double x2654 = x2648 + x2653;
x528[x2647] = x2654;
x2645 += 1;
x2643 += 150;

}
x2631 += 1;
x2640 += 1;

}
x2634 += 150;
x2637 *= 0;

}
}
};
x560(x2918);
for(int x2922=0; x2922 < 150; x2922++) {
double x2923 = x2898[x2922];
double x2924 = x2903[x2922];
double x2927 = x2913[x2922];
double x2925 = 1.0 - x2924;
double x2926 = x2925 * x2924;
double x2928 = x2926 * x2927;
double x2929 = x2923 + x2928;
x2898[x2922] = x2929;

}
// backpropagate +
for(int x2934=0; x2934 < 150; x2934++) {
double x2935 = x2885[x2934];
double x2936 = x2898[x2934];
double x2937 = x2935 + x2936;
x2885[x2934] = x2937;

}
for(int x2941=0; x2941 < 150; x2941++) {
double x2942 = x246[x2941];
double x2943 = x2898[x2941];
double x2944 = x2942 + x2943;
x246[x2941] = x2944;

}
// backpropagate +
for(int x2949=0; x2949 < 150; x2949++) {
double x2950 = x2849[x2949];
double x2951 = x2885[x2949];
double x2952 = x2950 + x2951;
x2849[x2949] = x2952;

}
for(int x2956=0; x2956 < 150; x2956++) {
double x2957 = x2872[x2956];
double x2958 = x2885[x2956];
double x2959 = x2957 + x2958;
x2872[x2956] = x2959;

}
int32_t x2963 = 0;
int32_t x2964 = x2963;
int32_t x2965 = x2964;
int32_t x2966 = 0;
int32_t x2967 = x2966;
int32_t x2968 = x2967;
int32_t x2969 = 0;
int32_t x2970 = x2969;
int32_t x2971 = x2970;
for(int x2972=0; x2972 < 150; x2972++) {
int32_t x2973 = x2971;
int32_t x2974 = x2973;
for(int x2975=0; x2975 < 150; x2975++) {
int32_t x2976 = x2974;
int32_t x2977 = x2976;
int32_t x2978 = x2968;
int32_t x2979 = x2978;
for(int x2980=0; x2980 < 1; x2980++) {
int32_t x2981 = x2965;
double x2982 = x241[x2981];
int32_t x2983 = x2979;
double x2984 = x2872[x2983];
int32_t x2985 = x2977;
double x2986 = x536[x2985];
double x2987 = x2984 * x2986;
double x2988 = x2982 + x2987;
x241[x2981] = x2988;
x2979 += 1;
x2977 += 150;

}
x2965 += 1;
x2974 += 1;

}
x2968 += 1;
x2971 *= 0;

}
int32_t x3002 = 0;
int32_t x3003 = x3002;
int32_t x3004 = x3003;
int32_t x3005 = 0;
int32_t x3006 = x3005;
int32_t x3007 = x3006;
int32_t x3008 = 0;
int32_t x3009 = x3008;
int32_t x3010 = x3009;
for(int x3011=0; x3011 < 1; x3011++) {
int32_t x3012 = x3010;
int32_t x3013 = x3012;
for(int x3014=0; x3014 < 150; x3014++) {
int32_t x3015 = x3013;
int32_t x3016 = x3015;
int32_t x3017 = x3007;
int32_t x3018 = x3017;
for(int x3019=0; x3019 < 150; x3019++) {
int32_t x3020 = x3004;
double x3021 = x537[x3020];
int32_t x3022 = x3018;
double x3023 = x2872[x3022];
int32_t x3024 = x3016;
double x3025 = x99[x3024];
double x3026 = x3023 * x3025;
double x3027 = x3021 + x3026;
x537[x3020] = x3027;
x3018 += 1;
x3016 += 150;

}
x3004 += 1;
x3013 += 1;

}
x3007 += 150;
x3010 *= 0;

}
int32_t x3041 = 0;
int32_t x3042 = x3041;
int32_t x3043 = x3042;
int32_t x3044 = 0;
int32_t x3045 = x3044;
int32_t x3046 = x3045;
int32_t x3047 = 0;
int32_t x3048 = x3047;
int32_t x3049 = x3048;
for(int x3050=0; x3050 < 150; x3050++) {
int32_t x3051 = x3049;
int32_t x3052 = x3051;
for(int x3053=0; x3053 < 150; x3053++) {
int32_t x3054 = x3052;
int32_t x3055 = x3054;
int32_t x3056 = x3046;
int32_t x3057 = x3056;
for(int x3058=0; x3058 < 1; x3058++) {
int32_t x3059 = x3043;
double x3060 = x236[x3059];
int32_t x3061 = x3057;
double x3062 = x2849[x3061];
int32_t x3063 = x3055;
double x3064 = x527[x3063];
double x3065 = x3062 * x3064;
double x3066 = x3060 + x3065;
x236[x3059] = x3066;
x3057 += 1;
x3055 += 150;

}
x3043 += 1;
x3052 += 1;

}
x3046 += 1;
x3049 *= 0;

}
int32_t x3080 = 0;
int32_t x3081 = x3080;
int32_t x3082 = x3081;
int32_t x3083 = 0;
int32_t x3084 = x3083;
int32_t x3085 = x3084;
int32_t x3086 = 0;
int32_t x3087 = x3086;
int32_t x3088 = x3087;
for(int x3089=0; x3089 < 1; x3089++) {
int32_t x3090 = x3088;
int32_t x3091 = x3090;
for(int x3092=0; x3092 < 150; x3092++) {
int32_t x3093 = x3091;
int32_t x3094 = x3093;
int32_t x3095 = x3085;
int32_t x3096 = x3095;
for(int x3097=0; x3097 < 150; x3097++) {
int32_t x3098 = x3082;
double x3099 = x528[x3098];
int32_t x3100 = x3096;
double x3101 = x2849[x3100];
int32_t x3102 = x3094;
double x3103 = x90[x3102];
double x3104 = x3101 * x3103;
double x3105 = x3099 + x3104;
x528[x3098] = x3105;
x3096 += 1;
x3094 += 150;

}
x3082 += 1;
x3091 += 1;

}
x3085 += 150;
x3088 *= 0;

}
}
};
x554(x3134);
}
};
x508(x531,x532,x3141);
};
x508(x522,x523,x3151);
} else {
double** x3161 = (double**)myMalloc(6 * sizeof(double*));
x3161[0] = x515;
x3161[1] = x516;
x3161[2] = x517;
x3161[3] = x518;
x3161[4] = x519;
x3161[5] = x520;
function<void(double**)> x513 = x510;
x513(x3161);
}
};
double* x462 = (double*)myMalloc(1 * sizeof(double));
for(int x464=0; x464 < 1; x464++) {
x462[x464] = 0.0;

}
double* x468 = (double*)myMalloc(1 * sizeof(double));
for(int x469=0; x469 < 1; x469++) {
x468[x469] = 0.0;

}
double* x473 = (double*)myMalloc(1 * sizeof(double));
for(int x474=0; x474 < 1; x474++) {
x473[x474] = 0.0;

}
double* x478 = (double*)myMalloc(1 * sizeof(double));
for(int x479=0; x479 < 1; x479++) {
x478[x479] = 0.0;

}
double* x483 = (double*)myMalloc(1 * sizeof(double));
for(int x484=0; x484 < 1; x484++) {
x483[x484] = 0.0;

}
double* x488 = (double*)myMalloc(150 * sizeof(double));
for(int x489=0; x489 < 150; x489++) {
x488[x489] = 0.0;

}
double* x493 = (double*)myMalloc(150 * sizeof(double));
for(int x494=0; x494 < 150; x494++) {
x493[x494] = 0.0;

}
double* x498 = (double*)myMalloc(150 * sizeof(double));
for(int x499=0; x499 < 150; x499++) {
x498[x499] = 0.0;

}
double* x503 = (double*)myMalloc(150 * sizeof(double));
for(int x504=0; x504 < 150; x504++) {
x503[x504] = 0.0;

}
double** x3191 = (double**)myMalloc(6 * sizeof(double*));
x3191[0] = x478;
x3191[1] = x483;
x3191[2] = x488;
x3191[3] = x493;
x3191[4] = x498;
x3191[5] = x503;
function<void(double**)> x3172 = [&](double** x3173) {
double* x3174 = x3173[0];
double* x3175 = x3173[1];
double* x3176 = x3173[2];
double* x3177 = x3173[3];
double* x3178 = x3173[4];
double* x3179 = x3173[5];
for(int x3180=0; x3180 < 1; x3180++) {
double x3181 = x3175[x3180];
x3175[x3180] = 1.0;

}
for(int x3185=0; x3185 < 1; x3185++) {
double x3186 = x3174[x3185];
x473[x3185] = x3186;

}
};
x508(0,x3172,x3191);
double x3200 = x473[0];
double x3201 = x451;
double x3202 = (double)x452;
double x3203 = x3201 * x3202;
int32_t x3204 = x452 + 1;
double x3205 = (double)x3204;
double x3206 = x3203 / x3205;
double x3207 = x3200 / x3205;
double x3208 = x3206 + x3207;
x451 = x3208;
for(int x3210=0; x3210 < 45000; x3210++) {
double x3211 = x206[x3210];
bool x3212 = x3211 > 5.0;
if (x3212) {
x206[x3210] = 5.0;
} else {
}
double x3216 = x206[x3210];
bool x3217 = x3216 < -5.0;
if (x3217) {
x206[x3210] = -5.0;
} else {
}

}
double* x3223 = (double*)myMalloc(45000 * sizeof(double));
for(int x3224=0; x3224 < 45000; x3224++) {
double x3225 = x206[x3224];
double x3226 = x206[x3224];
double x3227 = x3225 * x3226;
x3223[x3224] = x3227;

}
for(int x3231=0; x3231 < 45000; x3231++) {
double x3232 = x336[x3231];
double x3233 = x3223[x3231];
double x3234 = x3232 + x3233;
x336[x3231] = x3234;

}
double* x3238 = (double*)myMalloc(45000 * sizeof(double));
for(int x3239=0; x3239 < 45000; x3239++) {
double x3240 = x206[x3239];
double x3241 = x3240 * 0.05;
x3238[x3239] = x3241;

}
double* x3245 = (double*)myMalloc(45000 * sizeof(double));
for(int x3246=0; x3246 < 45000; x3246++) {
double x3247 = x336[x3246];
double x3248 = x3247 + 1.0E-8;
x3245[x3246] = x3248;

}
double* x3252 = (double*)myMalloc(45000 * sizeof(double));
for(int x3253=0; x3253 < 45000; x3253++) {
double x3254 = x3245[x3253];
double x3255 = sqrt(x3254);
x3252[x3253] = x3255;

}
double* x3259 = (double*)myMalloc(45000 * sizeof(double));
for(int x3260=0; x3260 < 45000; x3260++) {
double x3261 = x3238[x3260];
double x3262 = x3252[x3260];
double x3263 = x3261 / x3262;
x3259[x3260] = x3263;

}
for(int x3267=0; x3267 < 45000; x3267++) {
double x3268 = x49[x3267];
double x3269 = x3259[x3267];
double x3270 = x3268 - x3269;
x49[x3267] = x3270;

}
for(int x3274=0; x3274 < 45000; x3274++) {
double x3275 = x206[x3274];
x206[x3274] = 0.0;

}
for(int x3279=0; x3279 < 150; x3279++) {
double x3280 = x211[x3279];
bool x3281 = x3280 > 5.0;
if (x3281) {
x211[x3279] = 5.0;
} else {
}
double x3285 = x211[x3279];
bool x3286 = x3285 < -5.0;
if (x3286) {
x211[x3279] = -5.0;
} else {
}

}
double* x3292 = (double*)myMalloc(150 * sizeof(double));
for(int x3293=0; x3293 < 150; x3293++) {
double x3294 = x211[x3293];
double x3295 = x211[x3293];
double x3296 = x3294 * x3295;
x3292[x3293] = x3296;

}
for(int x3300=0; x3300 < 150; x3300++) {
double x3301 = x341[x3300];
double x3302 = x3292[x3300];
double x3303 = x3301 + x3302;
x341[x3300] = x3303;

}
double* x3307 = (double*)myMalloc(150 * sizeof(double));
for(int x3308=0; x3308 < 150; x3308++) {
double x3309 = x211[x3308];
double x3310 = x3309 * 0.05;
x3307[x3308] = x3310;

}
double* x3314 = (double*)myMalloc(150 * sizeof(double));
for(int x3315=0; x3315 < 150; x3315++) {
double x3316 = x341[x3315];
double x3317 = x3316 + 1.0E-8;
x3314[x3315] = x3317;

}
double* x3321 = (double*)myMalloc(150 * sizeof(double));
for(int x3322=0; x3322 < 150; x3322++) {
double x3323 = x3314[x3322];
double x3324 = sqrt(x3323);
x3321[x3322] = x3324;

}
double* x3328 = (double*)myMalloc(150 * sizeof(double));
for(int x3329=0; x3329 < 150; x3329++) {
double x3330 = x3307[x3329];
double x3331 = x3321[x3329];
double x3332 = x3330 / x3331;
x3328[x3329] = x3332;

}
for(int x3336=0; x3336 < 150; x3336++) {
double x3337 = x58[x3336];
double x3338 = x3328[x3336];
double x3339 = x3337 - x3338;
x58[x3336] = x3339;

}
for(int x3343=0; x3343 < 150; x3343++) {
double x3344 = x211[x3343];
x211[x3343] = 0.0;

}
for(int x3348=0; x3348 < 45000; x3348++) {
double x3349 = x216[x3348];
bool x3350 = x3349 > 5.0;
if (x3350) {
x216[x3348] = 5.0;
} else {
}
double x3354 = x216[x3348];
bool x3355 = x3354 < -5.0;
if (x3355) {
x216[x3348] = -5.0;
} else {
}

}
double* x3361 = (double*)myMalloc(45000 * sizeof(double));
for(int x3362=0; x3362 < 45000; x3362++) {
double x3363 = x216[x3362];
double x3364 = x216[x3362];
double x3365 = x3363 * x3364;
x3361[x3362] = x3365;

}
for(int x3369=0; x3369 < 45000; x3369++) {
double x3370 = x346[x3369];
double x3371 = x3361[x3369];
double x3372 = x3370 + x3371;
x346[x3369] = x3372;

}
double* x3376 = (double*)myMalloc(45000 * sizeof(double));
for(int x3377=0; x3377 < 45000; x3377++) {
double x3378 = x216[x3377];
double x3379 = x3378 * 0.05;
x3376[x3377] = x3379;

}
double* x3383 = (double*)myMalloc(45000 * sizeof(double));
for(int x3384=0; x3384 < 45000; x3384++) {
double x3385 = x346[x3384];
double x3386 = x3385 + 1.0E-8;
x3383[x3384] = x3386;

}
double* x3390 = (double*)myMalloc(45000 * sizeof(double));
for(int x3391=0; x3391 < 45000; x3391++) {
double x3392 = x3383[x3391];
double x3393 = sqrt(x3392);
x3390[x3391] = x3393;

}
double* x3397 = (double*)myMalloc(45000 * sizeof(double));
for(int x3398=0; x3398 < 45000; x3398++) {
double x3399 = x3376[x3398];
double x3400 = x3390[x3398];
double x3401 = x3399 / x3400;
x3397[x3398] = x3401;

}
for(int x3405=0; x3405 < 45000; x3405++) {
double x3406 = x64[x3405];
double x3407 = x3397[x3405];
double x3408 = x3406 - x3407;
x64[x3405] = x3408;

}
for(int x3412=0; x3412 < 45000; x3412++) {
double x3413 = x216[x3412];
x216[x3412] = 0.0;

}
for(int x3417=0; x3417 < 150; x3417++) {
double x3418 = x221[x3417];
bool x3419 = x3418 > 5.0;
if (x3419) {
x221[x3417] = 5.0;
} else {
}
double x3423 = x221[x3417];
bool x3424 = x3423 < -5.0;
if (x3424) {
x221[x3417] = -5.0;
} else {
}

}
double* x3430 = (double*)myMalloc(150 * sizeof(double));
for(int x3431=0; x3431 < 150; x3431++) {
double x3432 = x221[x3431];
double x3433 = x221[x3431];
double x3434 = x3432 * x3433;
x3430[x3431] = x3434;

}
for(int x3438=0; x3438 < 150; x3438++) {
double x3439 = x351[x3438];
double x3440 = x3430[x3438];
double x3441 = x3439 + x3440;
x351[x3438] = x3441;

}
double* x3445 = (double*)myMalloc(150 * sizeof(double));
for(int x3446=0; x3446 < 150; x3446++) {
double x3447 = x221[x3446];
double x3448 = x3447 * 0.05;
x3445[x3446] = x3448;

}
double* x3452 = (double*)myMalloc(150 * sizeof(double));
for(int x3453=0; x3453 < 150; x3453++) {
double x3454 = x351[x3453];
double x3455 = x3454 + 1.0E-8;
x3452[x3453] = x3455;

}
double* x3459 = (double*)myMalloc(150 * sizeof(double));
for(int x3460=0; x3460 < 150; x3460++) {
double x3461 = x3452[x3460];
double x3462 = sqrt(x3461);
x3459[x3460] = x3462;

}
double* x3466 = (double*)myMalloc(150 * sizeof(double));
for(int x3467=0; x3467 < 150; x3467++) {
double x3468 = x3445[x3467];
double x3469 = x3459[x3467];
double x3470 = x3468 / x3469;
x3466[x3467] = x3470;

}
for(int x3474=0; x3474 < 150; x3474++) {
double x3475 = x72[x3474];
double x3476 = x3466[x3474];
double x3477 = x3475 - x3476;
x72[x3474] = x3477;

}
for(int x3481=0; x3481 < 150; x3481++) {
double x3482 = x221[x3481];
x221[x3481] = 0.0;

}
for(int x3486=0; x3486 < 45000; x3486++) {
double x3487 = x226[x3486];
bool x3488 = x3487 > 5.0;
if (x3488) {
x226[x3486] = 5.0;
} else {
}
double x3492 = x226[x3486];
bool x3493 = x3492 < -5.0;
if (x3493) {
x226[x3486] = -5.0;
} else {
}

}
double* x3499 = (double*)myMalloc(45000 * sizeof(double));
for(int x3500=0; x3500 < 45000; x3500++) {
double x3501 = x226[x3500];
double x3502 = x226[x3500];
double x3503 = x3501 * x3502;
x3499[x3500] = x3503;

}
for(int x3507=0; x3507 < 45000; x3507++) {
double x3508 = x356[x3507];
double x3509 = x3499[x3507];
double x3510 = x3508 + x3509;
x356[x3507] = x3510;

}
double* x3514 = (double*)myMalloc(45000 * sizeof(double));
for(int x3515=0; x3515 < 45000; x3515++) {
double x3516 = x226[x3515];
double x3517 = x3516 * 0.05;
x3514[x3515] = x3517;

}
double* x3521 = (double*)myMalloc(45000 * sizeof(double));
for(int x3522=0; x3522 < 45000; x3522++) {
double x3523 = x356[x3522];
double x3524 = x3523 + 1.0E-8;
x3521[x3522] = x3524;

}
double* x3528 = (double*)myMalloc(45000 * sizeof(double));
for(int x3529=0; x3529 < 45000; x3529++) {
double x3530 = x3521[x3529];
double x3531 = sqrt(x3530);
x3528[x3529] = x3531;

}
double* x3535 = (double*)myMalloc(45000 * sizeof(double));
for(int x3536=0; x3536 < 45000; x3536++) {
double x3537 = x3514[x3536];
double x3538 = x3528[x3536];
double x3539 = x3537 / x3538;
x3535[x3536] = x3539;

}
for(int x3543=0; x3543 < 45000; x3543++) {
double x3544 = x77[x3543];
double x3545 = x3535[x3543];
double x3546 = x3544 - x3545;
x77[x3543] = x3546;

}
for(int x3550=0; x3550 < 45000; x3550++) {
double x3551 = x226[x3550];
x226[x3550] = 0.0;

}
for(int x3555=0; x3555 < 150; x3555++) {
double x3556 = x231[x3555];
bool x3557 = x3556 > 5.0;
if (x3557) {
x231[x3555] = 5.0;
} else {
}
double x3561 = x231[x3555];
bool x3562 = x3561 < -5.0;
if (x3562) {
x231[x3555] = -5.0;
} else {
}

}
double* x3568 = (double*)myMalloc(150 * sizeof(double));
for(int x3569=0; x3569 < 150; x3569++) {
double x3570 = x231[x3569];
double x3571 = x231[x3569];
double x3572 = x3570 * x3571;
x3568[x3569] = x3572;

}
for(int x3576=0; x3576 < 150; x3576++) {
double x3577 = x361[x3576];
double x3578 = x3568[x3576];
double x3579 = x3577 + x3578;
x361[x3576] = x3579;

}
double* x3583 = (double*)myMalloc(150 * sizeof(double));
for(int x3584=0; x3584 < 150; x3584++) {
double x3585 = x231[x3584];
double x3586 = x3585 * 0.05;
x3583[x3584] = x3586;

}
double* x3590 = (double*)myMalloc(150 * sizeof(double));
for(int x3591=0; x3591 < 150; x3591++) {
double x3592 = x361[x3591];
double x3593 = x3592 + 1.0E-8;
x3590[x3591] = x3593;

}
double* x3597 = (double*)myMalloc(150 * sizeof(double));
for(int x3598=0; x3598 < 150; x3598++) {
double x3599 = x3590[x3598];
double x3600 = sqrt(x3599);
x3597[x3598] = x3600;

}
double* x3604 = (double*)myMalloc(150 * sizeof(double));
for(int x3605=0; x3605 < 150; x3605++) {
double x3606 = x3583[x3605];
double x3607 = x3597[x3605];
double x3608 = x3606 / x3607;
x3604[x3605] = x3608;

}
for(int x3612=0; x3612 < 150; x3612++) {
double x3613 = x85[x3612];
double x3614 = x3604[x3612];
double x3615 = x3613 - x3614;
x85[x3612] = x3615;

}
for(int x3619=0; x3619 < 150; x3619++) {
double x3620 = x231[x3619];
x231[x3619] = 0.0;

}
for(int x3624=0; x3624 < 22500; x3624++) {
double x3625 = x236[x3624];
bool x3626 = x3625 > 5.0;
if (x3626) {
x236[x3624] = 5.0;
} else {
}
double x3630 = x236[x3624];
bool x3631 = x3630 < -5.0;
if (x3631) {
x236[x3624] = -5.0;
} else {
}

}
double* x3637 = (double*)myMalloc(22500 * sizeof(double));
for(int x3638=0; x3638 < 22500; x3638++) {
double x3639 = x236[x3638];
double x3640 = x236[x3638];
double x3641 = x3639 * x3640;
x3637[x3638] = x3641;

}
for(int x3645=0; x3645 < 22500; x3645++) {
double x3646 = x366[x3645];
double x3647 = x3637[x3645];
double x3648 = x3646 + x3647;
x366[x3645] = x3648;

}
double* x3652 = (double*)myMalloc(22500 * sizeof(double));
for(int x3653=0; x3653 < 22500; x3653++) {
double x3654 = x236[x3653];
double x3655 = x3654 * 0.05;
x3652[x3653] = x3655;

}
double* x3659 = (double*)myMalloc(22500 * sizeof(double));
for(int x3660=0; x3660 < 22500; x3660++) {
double x3661 = x366[x3660];
double x3662 = x3661 + 1.0E-8;
x3659[x3660] = x3662;

}
double* x3666 = (double*)myMalloc(22500 * sizeof(double));
for(int x3667=0; x3667 < 22500; x3667++) {
double x3668 = x3659[x3667];
double x3669 = sqrt(x3668);
x3666[x3667] = x3669;

}
double* x3673 = (double*)myMalloc(22500 * sizeof(double));
for(int x3674=0; x3674 < 22500; x3674++) {
double x3675 = x3652[x3674];
double x3676 = x3666[x3674];
double x3677 = x3675 / x3676;
x3673[x3674] = x3677;

}
for(int x3681=0; x3681 < 22500; x3681++) {
double x3682 = x90[x3681];
double x3683 = x3673[x3681];
double x3684 = x3682 - x3683;
x90[x3681] = x3684;

}
for(int x3688=0; x3688 < 22500; x3688++) {
double x3689 = x236[x3688];
x236[x3688] = 0.0;

}
for(int x3693=0; x3693 < 22500; x3693++) {
double x3694 = x241[x3693];
bool x3695 = x3694 > 5.0;
if (x3695) {
x241[x3693] = 5.0;
} else {
}
double x3699 = x241[x3693];
bool x3700 = x3699 < -5.0;
if (x3700) {
x241[x3693] = -5.0;
} else {
}

}
double* x3706 = (double*)myMalloc(22500 * sizeof(double));
for(int x3707=0; x3707 < 22500; x3707++) {
double x3708 = x241[x3707];
double x3709 = x241[x3707];
double x3710 = x3708 * x3709;
x3706[x3707] = x3710;

}
for(int x3714=0; x3714 < 22500; x3714++) {
double x3715 = x371[x3714];
double x3716 = x3706[x3714];
double x3717 = x3715 + x3716;
x371[x3714] = x3717;

}
double* x3721 = (double*)myMalloc(22500 * sizeof(double));
for(int x3722=0; x3722 < 22500; x3722++) {
double x3723 = x241[x3722];
double x3724 = x3723 * 0.05;
x3721[x3722] = x3724;

}
double* x3728 = (double*)myMalloc(22500 * sizeof(double));
for(int x3729=0; x3729 < 22500; x3729++) {
double x3730 = x371[x3729];
double x3731 = x3730 + 1.0E-8;
x3728[x3729] = x3731;

}
double* x3735 = (double*)myMalloc(22500 * sizeof(double));
for(int x3736=0; x3736 < 22500; x3736++) {
double x3737 = x3728[x3736];
double x3738 = sqrt(x3737);
x3735[x3736] = x3738;

}
double* x3742 = (double*)myMalloc(22500 * sizeof(double));
for(int x3743=0; x3743 < 22500; x3743++) {
double x3744 = x3721[x3743];
double x3745 = x3735[x3743];
double x3746 = x3744 / x3745;
x3742[x3743] = x3746;

}
for(int x3750=0; x3750 < 22500; x3750++) {
double x3751 = x99[x3750];
double x3752 = x3742[x3750];
double x3753 = x3751 - x3752;
x99[x3750] = x3753;

}
for(int x3757=0; x3757 < 22500; x3757++) {
double x3758 = x241[x3757];
x241[x3757] = 0.0;

}
for(int x3762=0; x3762 < 150; x3762++) {
double x3763 = x246[x3762];
bool x3764 = x3763 > 5.0;
if (x3764) {
x246[x3762] = 5.0;
} else {
}
double x3768 = x246[x3762];
bool x3769 = x3768 < -5.0;
if (x3769) {
x246[x3762] = -5.0;
} else {
}

}
double* x3775 = (double*)myMalloc(150 * sizeof(double));
for(int x3776=0; x3776 < 150; x3776++) {
double x3777 = x246[x3776];
double x3778 = x246[x3776];
double x3779 = x3777 * x3778;
x3775[x3776] = x3779;

}
for(int x3783=0; x3783 < 150; x3783++) {
double x3784 = x376[x3783];
double x3785 = x3775[x3783];
double x3786 = x3784 + x3785;
x376[x3783] = x3786;

}
double* x3790 = (double*)myMalloc(150 * sizeof(double));
for(int x3791=0; x3791 < 150; x3791++) {
double x3792 = x246[x3791];
double x3793 = x3792 * 0.05;
x3790[x3791] = x3793;

}
double* x3797 = (double*)myMalloc(150 * sizeof(double));
for(int x3798=0; x3798 < 150; x3798++) {
double x3799 = x376[x3798];
double x3800 = x3799 + 1.0E-8;
x3797[x3798] = x3800;

}
double* x3804 = (double*)myMalloc(150 * sizeof(double));
for(int x3805=0; x3805 < 150; x3805++) {
double x3806 = x3797[x3805];
double x3807 = sqrt(x3806);
x3804[x3805] = x3807;

}
double* x3811 = (double*)myMalloc(150 * sizeof(double));
for(int x3812=0; x3812 < 150; x3812++) {
double x3813 = x3790[x3812];
double x3814 = x3804[x3812];
double x3815 = x3813 / x3814;
x3811[x3812] = x3815;

}
for(int x3819=0; x3819 < 150; x3819++) {
double x3820 = x107[x3819];
double x3821 = x3811[x3819];
double x3822 = x3820 - x3821;
x107[x3819] = x3822;

}
for(int x3826=0; x3826 < 150; x3826++) {
double x3827 = x246[x3826];
x246[x3826] = 0.0;

}
for(int x3831=0; x3831 < 22500; x3831++) {
double x3832 = x251[x3831];
bool x3833 = x3832 > 5.0;
if (x3833) {
x251[x3831] = 5.0;
} else {
}
double x3837 = x251[x3831];
bool x3838 = x3837 < -5.0;
if (x3838) {
x251[x3831] = -5.0;
} else {
}

}
double* x3844 = (double*)myMalloc(22500 * sizeof(double));
for(int x3845=0; x3845 < 22500; x3845++) {
double x3846 = x251[x3845];
double x3847 = x251[x3845];
double x3848 = x3846 * x3847;
x3844[x3845] = x3848;

}
for(int x3852=0; x3852 < 22500; x3852++) {
double x3853 = x381[x3852];
double x3854 = x3844[x3852];
double x3855 = x3853 + x3854;
x381[x3852] = x3855;

}
double* x3859 = (double*)myMalloc(22500 * sizeof(double));
for(int x3860=0; x3860 < 22500; x3860++) {
double x3861 = x251[x3860];
double x3862 = x3861 * 0.05;
x3859[x3860] = x3862;

}
double* x3866 = (double*)myMalloc(22500 * sizeof(double));
for(int x3867=0; x3867 < 22500; x3867++) {
double x3868 = x381[x3867];
double x3869 = x3868 + 1.0E-8;
x3866[x3867] = x3869;

}
double* x3873 = (double*)myMalloc(22500 * sizeof(double));
for(int x3874=0; x3874 < 22500; x3874++) {
double x3875 = x3866[x3874];
double x3876 = sqrt(x3875);
x3873[x3874] = x3876;

}
double* x3880 = (double*)myMalloc(22500 * sizeof(double));
for(int x3881=0; x3881 < 22500; x3881++) {
double x3882 = x3859[x3881];
double x3883 = x3873[x3881];
double x3884 = x3882 / x3883;
x3880[x3881] = x3884;

}
for(int x3888=0; x3888 < 22500; x3888++) {
double x3889 = x112[x3888];
double x3890 = x3880[x3888];
double x3891 = x3889 - x3890;
x112[x3888] = x3891;

}
for(int x3895=0; x3895 < 22500; x3895++) {
double x3896 = x251[x3895];
x251[x3895] = 0.0;

}
for(int x3900=0; x3900 < 22500; x3900++) {
double x3901 = x256[x3900];
bool x3902 = x3901 > 5.0;
if (x3902) {
x256[x3900] = 5.0;
} else {
}
double x3906 = x256[x3900];
bool x3907 = x3906 < -5.0;
if (x3907) {
x256[x3900] = -5.0;
} else {
}

}
double* x3913 = (double*)myMalloc(22500 * sizeof(double));
for(int x3914=0; x3914 < 22500; x3914++) {
double x3915 = x256[x3914];
double x3916 = x256[x3914];
double x3917 = x3915 * x3916;
x3913[x3914] = x3917;

}
for(int x3921=0; x3921 < 22500; x3921++) {
double x3922 = x386[x3921];
double x3923 = x3913[x3921];
double x3924 = x3922 + x3923;
x386[x3921] = x3924;

}
double* x3928 = (double*)myMalloc(22500 * sizeof(double));
for(int x3929=0; x3929 < 22500; x3929++) {
double x3930 = x256[x3929];
double x3931 = x3930 * 0.05;
x3928[x3929] = x3931;

}
double* x3935 = (double*)myMalloc(22500 * sizeof(double));
for(int x3936=0; x3936 < 22500; x3936++) {
double x3937 = x386[x3936];
double x3938 = x3937 + 1.0E-8;
x3935[x3936] = x3938;

}
double* x3942 = (double*)myMalloc(22500 * sizeof(double));
for(int x3943=0; x3943 < 22500; x3943++) {
double x3944 = x3935[x3943];
double x3945 = sqrt(x3944);
x3942[x3943] = x3945;

}
double* x3949 = (double*)myMalloc(22500 * sizeof(double));
for(int x3950=0; x3950 < 22500; x3950++) {
double x3951 = x3928[x3950];
double x3952 = x3942[x3950];
double x3953 = x3951 / x3952;
x3949[x3950] = x3953;

}
for(int x3957=0; x3957 < 22500; x3957++) {
double x3958 = x120[x3957];
double x3959 = x3949[x3957];
double x3960 = x3958 - x3959;
x120[x3957] = x3960;

}
for(int x3964=0; x3964 < 22500; x3964++) {
double x3965 = x256[x3964];
x256[x3964] = 0.0;

}
for(int x3969=0; x3969 < 22500; x3969++) {
double x3970 = x261[x3969];
bool x3971 = x3970 > 5.0;
if (x3971) {
x261[x3969] = 5.0;
} else {
}
double x3975 = x261[x3969];
bool x3976 = x3975 < -5.0;
if (x3976) {
x261[x3969] = -5.0;
} else {
}

}
double* x3982 = (double*)myMalloc(22500 * sizeof(double));
for(int x3983=0; x3983 < 22500; x3983++) {
double x3984 = x261[x3983];
double x3985 = x261[x3983];
double x3986 = x3984 * x3985;
x3982[x3983] = x3986;

}
for(int x3990=0; x3990 < 22500; x3990++) {
double x3991 = x391[x3990];
double x3992 = x3982[x3990];
double x3993 = x3991 + x3992;
x391[x3990] = x3993;

}
double* x3997 = (double*)myMalloc(22500 * sizeof(double));
for(int x3998=0; x3998 < 22500; x3998++) {
double x3999 = x261[x3998];
double x4000 = x3999 * 0.05;
x3997[x3998] = x4000;

}
double* x4004 = (double*)myMalloc(22500 * sizeof(double));
for(int x4005=0; x4005 < 22500; x4005++) {
double x4006 = x391[x4005];
double x4007 = x4006 + 1.0E-8;
x4004[x4005] = x4007;

}
double* x4011 = (double*)myMalloc(22500 * sizeof(double));
for(int x4012=0; x4012 < 22500; x4012++) {
double x4013 = x4004[x4012];
double x4014 = sqrt(x4013);
x4011[x4012] = x4014;

}
double* x4018 = (double*)myMalloc(22500 * sizeof(double));
for(int x4019=0; x4019 < 22500; x4019++) {
double x4020 = x3997[x4019];
double x4021 = x4011[x4019];
double x4022 = x4020 / x4021;
x4018[x4019] = x4022;

}
for(int x4026=0; x4026 < 22500; x4026++) {
double x4027 = x128[x4026];
double x4028 = x4018[x4026];
double x4029 = x4027 - x4028;
x128[x4026] = x4029;

}
for(int x4033=0; x4033 < 22500; x4033++) {
double x4034 = x261[x4033];
x261[x4033] = 0.0;

}
for(int x4038=0; x4038 < 22500; x4038++) {
double x4039 = x266[x4038];
bool x4040 = x4039 > 5.0;
if (x4040) {
x266[x4038] = 5.0;
} else {
}
double x4044 = x266[x4038];
bool x4045 = x4044 < -5.0;
if (x4045) {
x266[x4038] = -5.0;
} else {
}

}
double* x4051 = (double*)myMalloc(22500 * sizeof(double));
for(int x4052=0; x4052 < 22500; x4052++) {
double x4053 = x266[x4052];
double x4054 = x266[x4052];
double x4055 = x4053 * x4054;
x4051[x4052] = x4055;

}
for(int x4059=0; x4059 < 22500; x4059++) {
double x4060 = x396[x4059];
double x4061 = x4051[x4059];
double x4062 = x4060 + x4061;
x396[x4059] = x4062;

}
double* x4066 = (double*)myMalloc(22500 * sizeof(double));
for(int x4067=0; x4067 < 22500; x4067++) {
double x4068 = x266[x4067];
double x4069 = x4068 * 0.05;
x4066[x4067] = x4069;

}
double* x4073 = (double*)myMalloc(22500 * sizeof(double));
for(int x4074=0; x4074 < 22500; x4074++) {
double x4075 = x396[x4074];
double x4076 = x4075 + 1.0E-8;
x4073[x4074] = x4076;

}
double* x4080 = (double*)myMalloc(22500 * sizeof(double));
for(int x4081=0; x4081 < 22500; x4081++) {
double x4082 = x4073[x4081];
double x4083 = sqrt(x4082);
x4080[x4081] = x4083;

}
double* x4087 = (double*)myMalloc(22500 * sizeof(double));
for(int x4088=0; x4088 < 22500; x4088++) {
double x4089 = x4066[x4088];
double x4090 = x4080[x4088];
double x4091 = x4089 / x4090;
x4087[x4088] = x4091;

}
for(int x4095=0; x4095 < 22500; x4095++) {
double x4096 = x136[x4095];
double x4097 = x4087[x4095];
double x4098 = x4096 - x4097;
x136[x4095] = x4098;

}
for(int x4102=0; x4102 < 22500; x4102++) {
double x4103 = x266[x4102];
x266[x4102] = 0.0;

}
for(int x4107=0; x4107 < 150; x4107++) {
double x4108 = x271[x4107];
bool x4109 = x4108 > 5.0;
if (x4109) {
x271[x4107] = 5.0;
} else {
}
double x4113 = x271[x4107];
bool x4114 = x4113 < -5.0;
if (x4114) {
x271[x4107] = -5.0;
} else {
}

}
double* x4120 = (double*)myMalloc(150 * sizeof(double));
for(int x4121=0; x4121 < 150; x4121++) {
double x4122 = x271[x4121];
double x4123 = x271[x4121];
double x4124 = x4122 * x4123;
x4120[x4121] = x4124;

}
for(int x4128=0; x4128 < 150; x4128++) {
double x4129 = x401[x4128];
double x4130 = x4120[x4128];
double x4131 = x4129 + x4130;
x401[x4128] = x4131;

}
double* x4135 = (double*)myMalloc(150 * sizeof(double));
for(int x4136=0; x4136 < 150; x4136++) {
double x4137 = x271[x4136];
double x4138 = x4137 * 0.05;
x4135[x4136] = x4138;

}
double* x4142 = (double*)myMalloc(150 * sizeof(double));
for(int x4143=0; x4143 < 150; x4143++) {
double x4144 = x401[x4143];
double x4145 = x4144 + 1.0E-8;
x4142[x4143] = x4145;

}
double* x4149 = (double*)myMalloc(150 * sizeof(double));
for(int x4150=0; x4150 < 150; x4150++) {
double x4151 = x4142[x4150];
double x4152 = sqrt(x4151);
x4149[x4150] = x4152;

}
double* x4156 = (double*)myMalloc(150 * sizeof(double));
for(int x4157=0; x4157 < 150; x4157++) {
double x4158 = x4135[x4157];
double x4159 = x4149[x4157];
double x4160 = x4158 / x4159;
x4156[x4157] = x4160;

}
for(int x4164=0; x4164 < 150; x4164++) {
double x4165 = x144[x4164];
double x4166 = x4156[x4164];
double x4167 = x4165 - x4166;
x144[x4164] = x4167;

}
for(int x4171=0; x4171 < 150; x4171++) {
double x4172 = x271[x4171];
x271[x4171] = 0.0;

}
for(int x4176=0; x4176 < 22500; x4176++) {
double x4177 = x276[x4176];
bool x4178 = x4177 > 5.0;
if (x4178) {
x276[x4176] = 5.0;
} else {
}
double x4182 = x276[x4176];
bool x4183 = x4182 < -5.0;
if (x4183) {
x276[x4176] = -5.0;
} else {
}

}
double* x4189 = (double*)myMalloc(22500 * sizeof(double));
for(int x4190=0; x4190 < 22500; x4190++) {
double x4191 = x276[x4190];
double x4192 = x276[x4190];
double x4193 = x4191 * x4192;
x4189[x4190] = x4193;

}
for(int x4197=0; x4197 < 22500; x4197++) {
double x4198 = x406[x4197];
double x4199 = x4189[x4197];
double x4200 = x4198 + x4199;
x406[x4197] = x4200;

}
double* x4204 = (double*)myMalloc(22500 * sizeof(double));
for(int x4205=0; x4205 < 22500; x4205++) {
double x4206 = x276[x4205];
double x4207 = x4206 * 0.05;
x4204[x4205] = x4207;

}
double* x4211 = (double*)myMalloc(22500 * sizeof(double));
for(int x4212=0; x4212 < 22500; x4212++) {
double x4213 = x406[x4212];
double x4214 = x4213 + 1.0E-8;
x4211[x4212] = x4214;

}
double* x4218 = (double*)myMalloc(22500 * sizeof(double));
for(int x4219=0; x4219 < 22500; x4219++) {
double x4220 = x4211[x4219];
double x4221 = sqrt(x4220);
x4218[x4219] = x4221;

}
double* x4225 = (double*)myMalloc(22500 * sizeof(double));
for(int x4226=0; x4226 < 22500; x4226++) {
double x4227 = x4204[x4226];
double x4228 = x4218[x4226];
double x4229 = x4227 / x4228;
x4225[x4226] = x4229;

}
for(int x4233=0; x4233 < 22500; x4233++) {
double x4234 = x149[x4233];
double x4235 = x4225[x4233];
double x4236 = x4234 - x4235;
x149[x4233] = x4236;

}
for(int x4240=0; x4240 < 22500; x4240++) {
double x4241 = x276[x4240];
x276[x4240] = 0.0;

}
for(int x4245=0; x4245 < 22500; x4245++) {
double x4246 = x281[x4245];
bool x4247 = x4246 > 5.0;
if (x4247) {
x281[x4245] = 5.0;
} else {
}
double x4251 = x281[x4245];
bool x4252 = x4251 < -5.0;
if (x4252) {
x281[x4245] = -5.0;
} else {
}

}
double* x4258 = (double*)myMalloc(22500 * sizeof(double));
for(int x4259=0; x4259 < 22500; x4259++) {
double x4260 = x281[x4259];
double x4261 = x281[x4259];
double x4262 = x4260 * x4261;
x4258[x4259] = x4262;

}
for(int x4266=0; x4266 < 22500; x4266++) {
double x4267 = x411[x4266];
double x4268 = x4258[x4266];
double x4269 = x4267 + x4268;
x411[x4266] = x4269;

}
double* x4273 = (double*)myMalloc(22500 * sizeof(double));
for(int x4274=0; x4274 < 22500; x4274++) {
double x4275 = x281[x4274];
double x4276 = x4275 * 0.05;
x4273[x4274] = x4276;

}
double* x4280 = (double*)myMalloc(22500 * sizeof(double));
for(int x4281=0; x4281 < 22500; x4281++) {
double x4282 = x411[x4281];
double x4283 = x4282 + 1.0E-8;
x4280[x4281] = x4283;

}
double* x4287 = (double*)myMalloc(22500 * sizeof(double));
for(int x4288=0; x4288 < 22500; x4288++) {
double x4289 = x4280[x4288];
double x4290 = sqrt(x4289);
x4287[x4288] = x4290;

}
double* x4294 = (double*)myMalloc(22500 * sizeof(double));
for(int x4295=0; x4295 < 22500; x4295++) {
double x4296 = x4273[x4295];
double x4297 = x4287[x4295];
double x4298 = x4296 / x4297;
x4294[x4295] = x4298;

}
for(int x4302=0; x4302 < 22500; x4302++) {
double x4303 = x157[x4302];
double x4304 = x4294[x4302];
double x4305 = x4303 - x4304;
x157[x4302] = x4305;

}
for(int x4309=0; x4309 < 22500; x4309++) {
double x4310 = x281[x4309];
x281[x4309] = 0.0;

}
for(int x4314=0; x4314 < 150; x4314++) {
double x4315 = x286[x4314];
bool x4316 = x4315 > 5.0;
if (x4316) {
x286[x4314] = 5.0;
} else {
}
double x4320 = x286[x4314];
bool x4321 = x4320 < -5.0;
if (x4321) {
x286[x4314] = -5.0;
} else {
}

}
double* x4327 = (double*)myMalloc(150 * sizeof(double));
for(int x4328=0; x4328 < 150; x4328++) {
double x4329 = x286[x4328];
double x4330 = x286[x4328];
double x4331 = x4329 * x4330;
x4327[x4328] = x4331;

}
for(int x4335=0; x4335 < 150; x4335++) {
double x4336 = x416[x4335];
double x4337 = x4327[x4335];
double x4338 = x4336 + x4337;
x416[x4335] = x4338;

}
double* x4342 = (double*)myMalloc(150 * sizeof(double));
for(int x4343=0; x4343 < 150; x4343++) {
double x4344 = x286[x4343];
double x4345 = x4344 * 0.05;
x4342[x4343] = x4345;

}
double* x4349 = (double*)myMalloc(150 * sizeof(double));
for(int x4350=0; x4350 < 150; x4350++) {
double x4351 = x416[x4350];
double x4352 = x4351 + 1.0E-8;
x4349[x4350] = x4352;

}
double* x4356 = (double*)myMalloc(150 * sizeof(double));
for(int x4357=0; x4357 < 150; x4357++) {
double x4358 = x4349[x4357];
double x4359 = sqrt(x4358);
x4356[x4357] = x4359;

}
double* x4363 = (double*)myMalloc(150 * sizeof(double));
for(int x4364=0; x4364 < 150; x4364++) {
double x4365 = x4342[x4364];
double x4366 = x4356[x4364];
double x4367 = x4365 / x4366;
x4363[x4364] = x4367;

}
for(int x4371=0; x4371 < 150; x4371++) {
double x4372 = x165[x4371];
double x4373 = x4363[x4371];
double x4374 = x4372 - x4373;
x165[x4371] = x4374;

}
for(int x4378=0; x4378 < 150; x4378++) {
double x4379 = x286[x4378];
x286[x4378] = 0.0;

}
for(int x4383=0; x4383 < 22500; x4383++) {
double x4384 = x291[x4383];
bool x4385 = x4384 > 5.0;
if (x4385) {
x291[x4383] = 5.0;
} else {
}
double x4389 = x291[x4383];
bool x4390 = x4389 < -5.0;
if (x4390) {
x291[x4383] = -5.0;
} else {
}

}
double* x4396 = (double*)myMalloc(22500 * sizeof(double));
for(int x4397=0; x4397 < 22500; x4397++) {
double x4398 = x291[x4397];
double x4399 = x291[x4397];
double x4400 = x4398 * x4399;
x4396[x4397] = x4400;

}
for(int x4404=0; x4404 < 22500; x4404++) {
double x4405 = x421[x4404];
double x4406 = x4396[x4404];
double x4407 = x4405 + x4406;
x421[x4404] = x4407;

}
double* x4411 = (double*)myMalloc(22500 * sizeof(double));
for(int x4412=0; x4412 < 22500; x4412++) {
double x4413 = x291[x4412];
double x4414 = x4413 * 0.05;
x4411[x4412] = x4414;

}
double* x4418 = (double*)myMalloc(22500 * sizeof(double));
for(int x4419=0; x4419 < 22500; x4419++) {
double x4420 = x421[x4419];
double x4421 = x4420 + 1.0E-8;
x4418[x4419] = x4421;

}
double* x4425 = (double*)myMalloc(22500 * sizeof(double));
for(int x4426=0; x4426 < 22500; x4426++) {
double x4427 = x4418[x4426];
double x4428 = sqrt(x4427);
x4425[x4426] = x4428;

}
double* x4432 = (double*)myMalloc(22500 * sizeof(double));
for(int x4433=0; x4433 < 22500; x4433++) {
double x4434 = x4411[x4433];
double x4435 = x4425[x4433];
double x4436 = x4434 / x4435;
x4432[x4433] = x4436;

}
for(int x4440=0; x4440 < 22500; x4440++) {
double x4441 = x170[x4440];
double x4442 = x4432[x4440];
double x4443 = x4441 - x4442;
x170[x4440] = x4443;

}
for(int x4447=0; x4447 < 22500; x4447++) {
double x4448 = x291[x4447];
x291[x4447] = 0.0;

}
for(int x4452=0; x4452 < 22500; x4452++) {
double x4453 = x296[x4452];
bool x4454 = x4453 > 5.0;
if (x4454) {
x296[x4452] = 5.0;
} else {
}
double x4458 = x296[x4452];
bool x4459 = x4458 < -5.0;
if (x4459) {
x296[x4452] = -5.0;
} else {
}

}
double* x4465 = (double*)myMalloc(22500 * sizeof(double));
for(int x4466=0; x4466 < 22500; x4466++) {
double x4467 = x296[x4466];
double x4468 = x296[x4466];
double x4469 = x4467 * x4468;
x4465[x4466] = x4469;

}
for(int x4473=0; x4473 < 22500; x4473++) {
double x4474 = x426[x4473];
double x4475 = x4465[x4473];
double x4476 = x4474 + x4475;
x426[x4473] = x4476;

}
double* x4480 = (double*)myMalloc(22500 * sizeof(double));
for(int x4481=0; x4481 < 22500; x4481++) {
double x4482 = x296[x4481];
double x4483 = x4482 * 0.05;
x4480[x4481] = x4483;

}
double* x4487 = (double*)myMalloc(22500 * sizeof(double));
for(int x4488=0; x4488 < 22500; x4488++) {
double x4489 = x426[x4488];
double x4490 = x4489 + 1.0E-8;
x4487[x4488] = x4490;

}
double* x4494 = (double*)myMalloc(22500 * sizeof(double));
for(int x4495=0; x4495 < 22500; x4495++) {
double x4496 = x4487[x4495];
double x4497 = sqrt(x4496);
x4494[x4495] = x4497;

}
double* x4501 = (double*)myMalloc(22500 * sizeof(double));
for(int x4502=0; x4502 < 22500; x4502++) {
double x4503 = x4480[x4502];
double x4504 = x4494[x4502];
double x4505 = x4503 / x4504;
x4501[x4502] = x4505;

}
for(int x4509=0; x4509 < 22500; x4509++) {
double x4510 = x178[x4509];
double x4511 = x4501[x4509];
double x4512 = x4510 - x4511;
x178[x4509] = x4512;

}
for(int x4516=0; x4516 < 22500; x4516++) {
double x4517 = x296[x4516];
x296[x4516] = 0.0;

}
for(int x4521=0; x4521 < 150; x4521++) {
double x4522 = x301[x4521];
bool x4523 = x4522 > 5.0;
if (x4523) {
x301[x4521] = 5.0;
} else {
}
double x4527 = x301[x4521];
bool x4528 = x4527 < -5.0;
if (x4528) {
x301[x4521] = -5.0;
} else {
}

}
double* x4534 = (double*)myMalloc(150 * sizeof(double));
for(int x4535=0; x4535 < 150; x4535++) {
double x4536 = x301[x4535];
double x4537 = x301[x4535];
double x4538 = x4536 * x4537;
x4534[x4535] = x4538;

}
for(int x4542=0; x4542 < 150; x4542++) {
double x4543 = x431[x4542];
double x4544 = x4534[x4542];
double x4545 = x4543 + x4544;
x431[x4542] = x4545;

}
double* x4549 = (double*)myMalloc(150 * sizeof(double));
for(int x4550=0; x4550 < 150; x4550++) {
double x4551 = x301[x4550];
double x4552 = x4551 * 0.05;
x4549[x4550] = x4552;

}
double* x4556 = (double*)myMalloc(150 * sizeof(double));
for(int x4557=0; x4557 < 150; x4557++) {
double x4558 = x431[x4557];
double x4559 = x4558 + 1.0E-8;
x4556[x4557] = x4559;

}
double* x4563 = (double*)myMalloc(150 * sizeof(double));
for(int x4564=0; x4564 < 150; x4564++) {
double x4565 = x4556[x4564];
double x4566 = sqrt(x4565);
x4563[x4564] = x4566;

}
double* x4570 = (double*)myMalloc(150 * sizeof(double));
for(int x4571=0; x4571 < 150; x4571++) {
double x4572 = x4549[x4571];
double x4573 = x4563[x4571];
double x4574 = x4572 / x4573;
x4570[x4571] = x4574;

}
for(int x4578=0; x4578 < 150; x4578++) {
double x4579 = x186[x4578];
double x4580 = x4570[x4578];
double x4581 = x4579 - x4580;
x186[x4578] = x4581;

}
for(int x4585=0; x4585 < 150; x4585++) {
double x4586 = x301[x4585];
x301[x4585] = 0.0;

}
for(int x4590=0; x4590 < 750; x4590++) {
double x4591 = x306[x4590];
bool x4592 = x4591 > 5.0;
if (x4592) {
x306[x4590] = 5.0;
} else {
}
double x4596 = x306[x4590];
bool x4597 = x4596 < -5.0;
if (x4597) {
x306[x4590] = -5.0;
} else {
}

}
double* x4603 = (double*)myMalloc(750 * sizeof(double));
for(int x4604=0; x4604 < 750; x4604++) {
double x4605 = x306[x4604];
double x4606 = x306[x4604];
double x4607 = x4605 * x4606;
x4603[x4604] = x4607;

}
for(int x4611=0; x4611 < 750; x4611++) {
double x4612 = x436[x4611];
double x4613 = x4603[x4611];
double x4614 = x4612 + x4613;
x436[x4611] = x4614;

}
double* x4618 = (double*)myMalloc(750 * sizeof(double));
for(int x4619=0; x4619 < 750; x4619++) {
double x4620 = x306[x4619];
double x4621 = x4620 * 0.05;
x4618[x4619] = x4621;

}
double* x4625 = (double*)myMalloc(750 * sizeof(double));
for(int x4626=0; x4626 < 750; x4626++) {
double x4627 = x436[x4626];
double x4628 = x4627 + 1.0E-8;
x4625[x4626] = x4628;

}
double* x4632 = (double*)myMalloc(750 * sizeof(double));
for(int x4633=0; x4633 < 750; x4633++) {
double x4634 = x4625[x4633];
double x4635 = sqrt(x4634);
x4632[x4633] = x4635;

}
double* x4639 = (double*)myMalloc(750 * sizeof(double));
for(int x4640=0; x4640 < 750; x4640++) {
double x4641 = x4618[x4640];
double x4642 = x4632[x4640];
double x4643 = x4641 / x4642;
x4639[x4640] = x4643;

}
for(int x4647=0; x4647 < 750; x4647++) {
double x4648 = x191[x4647];
double x4649 = x4639[x4647];
double x4650 = x4648 - x4649;
x191[x4647] = x4650;

}
for(int x4654=0; x4654 < 750; x4654++) {
double x4655 = x306[x4654];
x306[x4654] = 0.0;

}
for(int x4659=0; x4659 < 5; x4659++) {
double x4660 = x311[x4659];
bool x4661 = x4660 > 5.0;
if (x4661) {
x311[x4659] = 5.0;
} else {
}
double x4665 = x311[x4659];
bool x4666 = x4665 < -5.0;
if (x4666) {
x311[x4659] = -5.0;
} else {
}

}
double* x4672 = (double*)myMalloc(5 * sizeof(double));
for(int x4673=0; x4673 < 5; x4673++) {
double x4674 = x311[x4673];
double x4675 = x311[x4673];
double x4676 = x4674 * x4675;
x4672[x4673] = x4676;

}
for(int x4680=0; x4680 < 5; x4680++) {
double x4681 = x441[x4680];
double x4682 = x4672[x4680];
double x4683 = x4681 + x4682;
x441[x4680] = x4683;

}
double* x4687 = (double*)myMalloc(5 * sizeof(double));
for(int x4688=0; x4688 < 5; x4688++) {
double x4689 = x311[x4688];
double x4690 = x4689 * 0.05;
x4687[x4688] = x4690;

}
double* x4694 = (double*)myMalloc(5 * sizeof(double));
for(int x4695=0; x4695 < 5; x4695++) {
double x4696 = x441[x4695];
double x4697 = x4696 + 1.0E-8;
x4694[x4695] = x4697;

}
double* x4701 = (double*)myMalloc(5 * sizeof(double));
for(int x4702=0; x4702 < 5; x4702++) {
double x4703 = x4694[x4702];
double x4704 = sqrt(x4703);
x4701[x4702] = x4704;

}
double* x4708 = (double*)myMalloc(5 * sizeof(double));
for(int x4709=0; x4709 < 5; x4709++) {
double x4710 = x4687[x4709];
double x4711 = x4701[x4709];
double x4712 = x4710 / x4711;
x4708[x4709] = x4712;

}
for(int x4716=0; x4716 < 5; x4716++) {
double x4717 = x200[x4716];
double x4718 = x4708[x4716];
double x4719 = x4717 - x4718;
x200[x4716] = x4719;

}
for(int x4723=0; x4723 < 5; x4723++) {
double x4724 = x311[x4723];
x311[x4723] = 0.0;

}
mallocAddr = (void*)x447;

}
double x4731 = x451;
x446[x450] = x4731;
double x4733 = ((double)clock() / CLOCKS_PER_SEC);
double x4734 = x4733 - x448;
printf("epoc %d, average_loss %f, time %lf\n",x450,x4731,x4734);

}
double x4738 = ((double)clock() / CLOCKS_PER_SEC);
int64_t x4742 = (long)fopen(x0, "w");
fprintf((FILE *)x4742, "unit: %s\n", "1 epoch");
for(int x4744=0; x4744 < 30; x4744++) {
double x4745 = x446[x4744];
fprintf((FILE *)x4742, "%lf\n", x4745);

}
double x4739 = x448 - x1;
double x4740 = x4738 - x448;
double x4741 = x4740 / 30.0;
fprintf((FILE *)x4742, "run time: %lf %lf\n", x4739, x4741);
fclose((FILE*)x4742);
}
/*****************************************
  End of C Generated Code                  
*******************************************/

